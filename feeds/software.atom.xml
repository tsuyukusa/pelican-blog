<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>電脳手帳 - Software</title><link href="http://blog.calcurio.com/" rel="alternate"></link><link href="http://blog.calcurio.com/feeds/software.atom.xml" rel="self"></link><id>http://blog.calcurio.com/</id><updated>2020-08-01T19:22:05+09:00</updated><subtitle>計算機環境やコーディング，機械学習まわりの話題を書き留めます</subtitle><entry><title>GNU Screenのウィンドウタイトルを自動設定する際に日本語の文字化けを回避する</title><link href="http://blog.calcurio.com/screen-title.html" rel="alternate"></link><published>2020-08-01T18:01:18+09:00</published><updated>2020-08-01T19:22:05+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2020-08-01:/screen-title.html</id><summary type="html">&lt;p&gt;GNU Screenで複数のウィンドウを開くと，どのウィンドウで何の作業をしているか分かりづらい。これを区別する手段がウィンドウタイトルであり，&lt;a href="https://tarao.hatenablog.com/entry/20100223/1266958660"&gt;GNU screenのウィンドウタイトルを自動設定 - 貳佰伍拾陸夜日記&lt;/a&gt; の設定に従うとウィンドウタイトルに実行中のコマンド名か，カレントディレクトリの名称を自動設定できる。&lt;/p&gt;
&lt;p&gt;一方，(少なくともaptで入る version 4.06.02の) Screenではウィンドウタイトルに日本語を使えない。文字化けするとレイアウトが崩れてしまう。この問題はカレントディレクトリに日本語を含むときに特に問題になる。今回はScreenにパッチを当てるのではなく，日本語をローマ字に変換してからScreenにわたすことで文字化けを回避する。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;GNU Screenで複数のウィンドウを開くと，どのウィンドウで何の作業をしているか分かりづらい。これを区別する手段がウィンドウタイトルであり，&lt;a href="https://tarao.hatenablog.com/entry/20100223/1266958660"&gt;GNU screenのウィンドウタイトルを自動設定 - 貳佰伍拾陸夜日記&lt;/a&gt; の設定に従うとウィンドウタイトルに実行中のコマンド名か，カレントディレクトリの名称を自動設定できる。&lt;/p&gt;
&lt;p&gt;一方，(少なくともaptで入る version 4.06.02の) Screenではウィンドウタイトルに日本語を使えない。文字化けするとレイアウトが崩れてしまう。この問題はカレントディレクトリに日本語を含むときに特に問題になる。今回はScreenにパッチを当てるのではなく，日本語をローマ字に変換してからScreenにわたすことで文字化けを回避する。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h1&gt;インストール&lt;/h1&gt;
&lt;p&gt;この日本語のローマ字変換は &lt;code&gt;kakasi&lt;/code&gt; プログラムで実現できる。そのインストールは通常通りにaptで可能だ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install -y kakasi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;kakasiを使えば以下のように日本語をローマ字に変換できる。今回は &lt;code&gt;-S_ -s&lt;/code&gt; オプションの付与で &lt;code&gt;_&lt;/code&gt; で区切ることにした。その他のオプションの詳細は &lt;code&gt;man kakasi&lt;/code&gt; を参照いただきたい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;とても眠い&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; kakasi -Ja -Ha -Ka -Ea -i utf-8 -o utf-8 -S_ -s
totemo_nemui
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;screenの設定&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;setenv SCREENTITLE auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;zshの設定&lt;/h1&gt;
&lt;p&gt;まず &lt;code&gt;~/.zshrc&lt;/code&gt; に以下の内容を追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# automatically set title&lt;/span&gt;
&lt;span class="nb"&gt;typeset&lt;/span&gt; -ga precmd_functions
&lt;span class="nb"&gt;typeset&lt;/span&gt; -ga preexec_functions

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$ZSH_VERSION&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;&lt;span class="m"&gt;5&lt;/span&gt;-&amp;gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.&amp;lt;&lt;span class="m"&gt;4&lt;/span&gt;-&amp;gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.3.&amp;lt;&lt;span class="m"&gt;10&lt;/span&gt;-&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;* &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;source&lt;/span&gt; ~/.zsh/term.zshrc
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次に &lt;code&gt;~/.zsh/term.zshrc&lt;/code&gt; として以下の内容を保存する。ポイントは &lt;code&gt;which kakasi &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; title=$(echo ${1} | kakasi -Ja -Ha -Ka -Ea -i utf-8 -o utf-8 -S_ -s)&lt;/code&gt; の行であり，ここで日本語をローマ字に変換している。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# VCS&lt;/span&gt;
autoload -Uz vcs_info
zstyle &lt;span class="s1"&gt;&amp;#39;:vcs_info:(git|svn):*&amp;#39;&lt;/span&gt; formats &lt;span class="s1"&gt;&amp;#39;%R&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%S&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%b&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s&amp;#39;&lt;/span&gt;
zstyle &lt;span class="s1"&gt;&amp;#39;:vcs_info:(git|svn):*&amp;#39;&lt;/span&gt; actionformats &lt;span class="s1"&gt;&amp;#39;%R&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%S&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%b|%a&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s&amp;#39;&lt;/span&gt;
zstyle &lt;span class="s1"&gt;&amp;#39;:vcs_info:*&amp;#39;&lt;/span&gt; formats &lt;span class="s1"&gt;&amp;#39;%R&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%S&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s:%b&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s&amp;#39;&lt;/span&gt;
zstyle &lt;span class="s1"&gt;&amp;#39;:vcs_info:*&amp;#39;&lt;/span&gt; actionformats &lt;span class="s1"&gt;&amp;#39;%R&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%S&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s:%b|%a&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; precmd_vcs_info &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;psvar&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;
    &lt;span class="nv"&gt;STY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8 vcs_info
    &lt;span class="nv"&gt;repos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;print -nD &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$vcs_info_msg_0_&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$vcs_info_msg_1_&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nv"&gt;vcs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$vcs_info_msg_3_&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nv"&gt;vcs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$repos&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; psvar&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$repos&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$vcs_info_msg_1_&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; psvar&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$vcs_info_msg_1_&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$vcs_info_msg_2_&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; psvar&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$vcs_info_msg_2_&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# set window title of screen&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; set_screen_title &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local&lt;/span&gt; title
  &lt;span class="c1"&gt;# convert Kanji to Rome-ji to avoid Mojibake&lt;/span&gt;
  which kakasi &amp;gt; /dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; kakasi -Ja -Ha -Ka -Ea -i utf-8 -o utf-8 -S_ -s&lt;span class="k"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; -ne &lt;span class="s2"&gt;&amp;quot;\ek&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\e\\&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# use current directory as a title&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt; precmd_screen_window_title &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SCREENTITLE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="nb"&gt;local&lt;/span&gt; dir
            &lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
            &lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;print -nD &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$dir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$vcs&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$repos&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$dir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
                &lt;span class="c1"&gt;# name of repository and directory&lt;/span&gt;
                &lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="c1"&gt;# name of directory&lt;/span&gt;
                &lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;fi&lt;/span&gt;
            set_screen_title &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$dir&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;typeset&lt;/span&gt; -A SCREEN_TITLE_CMD_ARG&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;SCREEN_TITLE_CMD_ARG&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ssh  -1 su -1 man -1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;typeset&lt;/span&gt; -A SCREEN_TITLE_CMD_IGNORE&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;SCREEN_TITLE_CMD_IGNORE&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;# use command name as a title&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt; set_cmd_screen_title &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;local&lt;/span&gt; -a cmd&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(z)1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="s2"&gt;[1]&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="s2"&gt;&amp;quot;[^\\]=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; cmd&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="s2"&gt;[1]&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;env&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt; cmd&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SCREEN_TITLE_CMD_IGNORE&lt;/span&gt;&lt;span class="s2"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="s2"&gt;[1]]&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SCREEN_TITLE_CMD_ARG&lt;/span&gt;&lt;span class="s2"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="s2"&gt;[1]]&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="c1"&gt;# argument of command&lt;/span&gt;
            cmd&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]=&lt;/span&gt;&lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$SCREEN_TITLE_CMD_ARG&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]]]&lt;/span&gt;
        &lt;span class="k"&gt;fi&lt;/span&gt;
        set_screen_title &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="s2"&gt;[1]:t&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt; preexec_screen_window_title &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;local&lt;/span&gt; -a cmd&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(z)2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# command in a single line&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SCREENTITLE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;auto&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; in
                &lt;span class="nb"&gt;fg&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="nv"&gt;$#cmd&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
                        &lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="nb"&gt;builtin&lt;/span&gt; &lt;span class="nb"&gt;jobs&lt;/span&gt; -l %+&lt;span class="o"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt;
                        &lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="nb"&gt;builtin&lt;/span&gt; &lt;span class="nb"&gt;jobs&lt;/span&gt; -l &lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
                    &lt;span class="k"&gt;fi&lt;/span&gt;
                    &lt;span class="p"&gt;;;&lt;/span&gt;
                %*&lt;span class="o"&gt;)&lt;/span&gt;
                    &lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="nb"&gt;builtin&lt;/span&gt; &lt;span class="nb"&gt;jobs&lt;/span&gt; -l &lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
                    &lt;span class="p"&gt;;;&lt;/span&gt;
                *&lt;span class="o"&gt;)&lt;/span&gt;
                    set_cmd_screen_title &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt;
                    &lt;span class="p"&gt;;;&lt;/span&gt;
            &lt;span class="k"&gt;esac&lt;/span&gt;
            &lt;span class="c1"&gt;# resolve command in jobs&lt;/span&gt;
            &lt;span class="nb"&gt;local&lt;/span&gt; -A jt&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;jt&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(kv)jobtexts&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="nv"&gt;$cmd&lt;/span&gt; &amp;gt;&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; num rest
                &lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(z)&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(e)&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="nv"&gt;jt$num&lt;/span&gt;&lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                set_cmd_screen_title &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null
        &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; title&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SCREENTITLE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
            &lt;span class="c1"&gt;# set title explicitly&lt;/span&gt;
            &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;SCREENTITLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;explicit
            set_screen_title &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="c1"&gt;# automatically set title&lt;/span&gt;
            &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;SCREENTITLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;auto
        &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;precmd_functions&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;precmd_vcs_info
&lt;span class="nv"&gt;precmd_functions&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;precmd_screen_window_title
&lt;span class="nv"&gt;preexec_functions&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;preexec_screen_window_title
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;するとローマ字に変換された内容がウィンドウタイトルに自動設定されるようになる。&lt;/p&gt;</content><category term="Software"></category><category term="CUI"></category><category term="Screen"></category></entry><entry><title>WSL2でVimのクリップボードをWindowsと共有する方法</title><link href="http://blog.calcurio.com/update-display.html" rel="alternate"></link><published>2020-07-25T00:36:41+09:00</published><updated>2020-07-25T01:02:34+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2020-07-25:/update-display.html</id><summary type="html">&lt;p&gt;WSL2でVimのヤンクをWindowsのクリップボードを共有したかった。基本的には &lt;a href="https://gist.github.com/necojackarc/02c3c81e1525bb5dc3561f378e921541"&gt;Set up Vim on Ubuntu on Windows Subsystem for Linux 2 (WSL2) to share clipboard&lt;/a&gt; の記事の手順で事足りたのだが，環境変数 DISPLAY の設定方法だけ工夫する必要があったので記録を残す。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;WSL2でVimのヤンクをWindowsのクリップボードを共有したかった。基本的には &lt;a href="https://gist.github.com/necojackarc/02c3c81e1525bb5dc3561f378e921541"&gt;Set up Vim on Ubuntu on Windows Subsystem for Linux 2 (WSL2) to share clipboard&lt;/a&gt; の記事の手順で事足りたのだが，環境変数 DISPLAY の設定方法だけ工夫する必要があったので記録を残す。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h1&gt;VimとXの設定&lt;/h1&gt;
&lt;p&gt;まず &lt;a href="https://gist.github.com/necojackarc/02c3c81e1525bb5dc3561f378e921541"&gt;Set up Vim on Ubuntu on Windows Subsystem for Linux 2 (WSL2) to share clipboard&lt;/a&gt; の記載にしたがって，Clipboard機能を有効化したVimをコンパイルし，VcXsrvをインストールする。&lt;/p&gt;
&lt;h1&gt;環境変数DISPLAYの設定&lt;/h1&gt;
&lt;p&gt;次に，WSL2のVimのヤンクとWindowsのクリップボードを共有したり，X Windowの画面を表示するためには，環境変数 &lt;code&gt;DISPLAY&lt;/code&gt; を正しくターミナルに設定する必要がある。WSL2はWindowsとは異なるIPアドレスを持いて，&lt;code&gt;DISPLAY&lt;/code&gt; には以下のような値が必要となる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$DISPLAY&lt;/span&gt;
&lt;span class="m"&gt;192&lt;/span&gt;.168.11.100:0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これは&lt;a href="https://gist.github.com/necojackarc/02c3c81e1525bb5dc3561f378e921541#gistcomment-3315136"&gt;以下の2行&lt;/a&gt;を &lt;code&gt;.zshrc&lt;/code&gt; や &lt;code&gt;.zshenv&lt;/code&gt; などに記入しておけば自動設定できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;LOCAL_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ipconfig.exe &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;BEGIN { RS=&amp;quot;\r\n&amp;quot; } /^[A-Z]/ { isWslSection=/WSL/; }; { if (!isWslSection &amp;amp;&amp;amp; /IPv4 Address/) { printf $NF; exit; }}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$LOCAL_IP&lt;/span&gt;:0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ただし，不意に (おそらくネットワークをつなげ直す等のタイミングで)，WSL2のIPアドレスが変化することがある。このとき環境変数 &lt;code&gt;DISPLAY&lt;/code&gt; のIPアドレスも更新しなければならない。もし更新しなければ，古い &lt;code&gt;DISPLAY&lt;/code&gt; への接続がタイムアウト待ちになって，Vim の起動に30秒以上の時間がかかるようになるといった弊害が生じる。&lt;/p&gt;
&lt;p&gt;そこで&lt;a href="https://qiita.com/mollifier/items/558712f1a93ee07e22e2"&gt;zshのhook機能&lt;/a&gt;を利用して30秒に1回は環境変数を更新するように設定する (正確には30秒経ってから任意のコマンドを実行したら更新)。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 定期的に環境変数 DISPLAY を更新するための設定&lt;/span&gt;

&lt;span class="c1"&gt;## 関数として環境変数DIAPLAYを更新する処理を定義&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; update_display&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="nv"&gt;LOCAL_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;ipconfig.exe &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;BEGIN { RS=&amp;quot;\r\n&amp;quot; } /^[A-Z]/ { isWslSection=/WSL/; }; { if (!isWslSection &amp;amp;&amp;amp; /IPv4 Address/) { printf $NF; exit; }}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$LOCAL_IP&lt;/span&gt;:0
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;## 自動実行対象として update_display関数を設定&lt;/span&gt;
&lt;span class="nv"&gt;PERIOD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt;  &lt;span class="c1"&gt;# 30秒ごとに更新&lt;/span&gt;
autoload -Uz add-zsh-hook
add-zsh-hook periodic update_display
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上の設定を施せば，安定してWSL2のVimのヤンクとWindowsのクリップボードを共有できるようになる。&lt;/p&gt;
&lt;h1&gt;参考URL&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/necojackarc/02c3c81e1525bb5dc3561f378e921541"&gt;Set up Vim on Ubuntu on Windows Subsystem for Linux 2 (WSL2) to share clipboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ryoi084/items/0dff11134592d0bb895c"&gt;WSL2におけるVcXsrvの設定 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/mollifier/items/558712f1a93ee07e22e2"&gt;zshでhook関数を登録する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Software"></category><category term="Vim"></category><category term="CLI"></category><category term="Linux"></category></entry><entry><title>VimをJupyterノートブックの開発環境に仕上げる</title><link href="http://blog.calcurio.com/vim-jupyter-run.html" rel="alternate"></link><published>2020-07-24T18:02:12+09:00</published><updated>2020-07-26T01:01:28+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2020-07-24:/vim-jupyter-run.html</id><summary type="html">&lt;p&gt;&lt;img src=/images/qtconsole.gif&gt;&lt;/p&gt;
&lt;p&gt;データサイエンス界隈では何かとJupyterのノートブックを開発する機会がある。そのたびにJupyterを立ち上げてブラウザで接続して...という操作も面倒であるし，JupyterのGUIでは開発効率があまり良くない。やはり，慣れ親しんだVimとターミナルのうえにJupyterと同じような開発環境を整備したいところだ。&lt;a href="https://code.visualstudio.com/docs/python/jupyter-support"&gt;VSCodeならノートブックを編集したり，セルごとに実行できる&lt;/a&gt;のだから，同じことがVimにできないはずはないだろう。&lt;/p&gt;
&lt;p&gt;ということで，本記事ではVimのプラグインを駆使してノートブックを&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;編集可能にする&lt;/li&gt;
&lt;li&gt;セルごとに実行可能にする&lt;/li&gt;
&lt;li&gt;リモートサーバに接続してノートブックを実行可能にする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ための手順を大きく3つに分けて説明する。ポイントはJupyterのように「セルごとにコード片を実行し，結果を確認できる」ことであり，これは &lt;a href="https://ja.wikipedia.org/wiki/REPL"&gt;REPL (Read-Eval-Print Loop)&lt;/a&gt; と呼ばれる作業だ。本記事の目的は「VimでノートブックのREPL環境を作る」ことと言える。&lt;/p&gt;
&lt;p&gt;Vimにノートブック開発環境を整える方法は一通りではないので本記事ではそれぞれの方法を示すが，おすすめは &lt;a href="https://github.com/goerz/jupytext.vim"&gt;goerz/jupytext.vim&lt;/a&gt; と&lt;a href="https://github.com/jupyter-vim/jupyter-vim"&gt;jupyter-vim/jupyter-vim&lt;/a&gt; を組み合わせて利用する構成だ。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;img src=/images/qtconsole.gif&gt;&lt;/p&gt;
&lt;p&gt;データサイエンス界隈では何かとJupyterのノートブックを開発する機会がある。そのたびにJupyterを立ち上げてブラウザで接続して...という操作も面倒であるし，JupyterのGUIでは開発効率があまり良くない。やはり，慣れ親しんだVimとターミナルのうえにJupyterと同じような開発環境を整備したいところだ。&lt;a href="https://code.visualstudio.com/docs/python/jupyter-support"&gt;VSCodeならノートブックを編集したり，セルごとに実行できる&lt;/a&gt;のだから，同じことがVimにできないはずはないだろう。&lt;/p&gt;
&lt;p&gt;ということで，本記事ではVimのプラグインを駆使してノートブックを&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;編集可能にする&lt;/li&gt;
&lt;li&gt;セルごとに実行可能にする&lt;/li&gt;
&lt;li&gt;リモートサーバに接続してノートブックを実行可能にする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ための手順を大きく3つに分けて説明する。ポイントはJupyterのように「セルごとにコード片を実行し，結果を確認できる」ことであり，これは &lt;a href="https://ja.wikipedia.org/wiki/REPL"&gt;REPL (Read-Eval-Print Loop)&lt;/a&gt; と呼ばれる作業だ。本記事の目的は「VimでノートブックのREPL環境を作る」ことと言える。&lt;/p&gt;
&lt;p&gt;Vimにノートブック開発環境を整える方法は一通りではないので本記事ではそれぞれの方法を示すが，おすすめは &lt;a href="https://github.com/goerz/jupytext.vim"&gt;goerz/jupytext.vim&lt;/a&gt; と&lt;a href="https://github.com/jupyter-vim/jupyter-vim"&gt;jupyter-vim/jupyter-vim&lt;/a&gt; を組み合わせて利用する構成だ。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;1. [必須] Vimでノートブックを編集可能にする&lt;/h2&gt;
&lt;p&gt;ノートブックの実体はJSONファイルであるため，単にVimでノートブックを開くだけでは編集が難しい。そこで，一時的にPythonやMarkdownの形式に変換することで編集可能にするVimプラグイン &lt;a href="https://github.com/goerz/jupytext.vim"&gt;goerz/jupytext.vim&lt;/a&gt; を利用する。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/goerz/jupytext.vim"&gt;jupytext.vim&lt;/a&gt;はバックグラウンドで&lt;a href="https://github.com/mwouts/jupytext"&gt;jupytext&lt;/a&gt;を実行することで，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ノートブック &lt;code&gt;.ipynb&lt;/code&gt; をVimで開いたら，Pythonスクリプトに変換し，Vimに表示&lt;/li&gt;
&lt;li&gt;変換済みのPythonスクリプトを保存したら，ノートブック &lt;code&gt;.ipynb&lt;/code&gt; に復元して保存&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;といった処理を自動実行する。これにより，Vimでノートブックをスムーズに編集可能になる。&lt;/p&gt;
&lt;div class="figure"&gt;
    &lt;img src=/images/jupytext.png&gt;
    &lt;p class="caption"&gt;図1. Jupyterノートブックの編集問題&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;Jupytext.vimのインストール&lt;/h3&gt;
&lt;p&gt;まず，Pythonのパッケージとして &lt;a href="https://github.com/mwouts/jupytext"&gt;jupytext&lt;/a&gt; をインストールする。jupytextはノートブックをMarkdownやPythonスクリプトの形式に変換するツールだ。一旦，Pythonスクリプト等に変換しても，元のノートブックのセル出力を保持したまま復元できる特徴がある。Vimとの組み合わせ以外にもjupytextの利用シーンは多々あるので &lt;a href="https://jupytext.readthedocs.io/en/latest/"&gt;公式マニュアル&lt;/a&gt; の内容も合わせて読んでおくと良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip3 install jupytext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次に，Vimプラグインの &lt;code&gt;jupytext.vim&lt;/code&gt; をインストールする。&lt;a href="https://github.com/Shougo/neobundle.vim"&gt;NeoBundle&lt;/a&gt;を使う場合は以下の1行を &lt;code&gt;.vimrc&lt;/code&gt; に記述したうえで &lt;code&gt;:Neobundleinstall&lt;/code&gt; コマンドをVimで実行する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;NeoBundle &lt;span class="s1"&gt;&amp;#39;goerz/jupytext.vim&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後に &lt;code&gt;jupytext.vim&lt;/code&gt; 向けの設定を &lt;code&gt;.vimrc&lt;/code&gt; に追加する。ここではノートブック &lt;code&gt;.ipynb&lt;/code&gt; を Pythonスクリプト &lt;code&gt;.py&lt;/code&gt; の形式に変換する設定を加えている。これにより，前述の図1の右下のようなPython形式に自動変換できる。&lt;/p&gt;
&lt;p&gt;ポイントは &lt;code&gt;py:percent&lt;/code&gt; の指定でセルの区切り文字を&lt;a href="https://code.visualstudio.com/docs/python/jupyter-support-py"&gt;VSCode互換&lt;/a&gt; の &lt;code&gt;# %%&lt;/code&gt; に設定していること。Jupytextのデフォルト設定ではセル内に空行がない場合は区切り文字を省略するため，セルの境界が不明確になる。この点は，ノートブックのセル実行に必要なvim-ipython-cellやjupyter-vimプラグインと組み合わせるときに不都合が生じる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;quot; セルの区切り文字をVSCode互換の # %% に指定する&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:jupytext_fmt &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;py:percent&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; vimのPython向けシンタックスハイライトを有効にする&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:jupytext_filetype_map &lt;span class="p"&gt;=&lt;/span&gt; {&lt;span class="s1"&gt;&amp;#39;py&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;その他，Jupytextのフォーマット指定の詳細は &lt;a href="https://jupytext.readthedocs.io/en/latest/formats.html"&gt;Notebook formats  Jupytext documentation&lt;/a&gt; を参照いただきたい。&lt;/p&gt;
&lt;h2&gt;2. Vimでセルごとにノートブックを実行可能にする&lt;/h2&gt;
&lt;p&gt;VimでREPL環境を実現する (セルごとにノートブックを実行可能にする) 方式は大別して2つある。それぞれの利点と欠点を書き下すと以下のようになる。どちらも一長一短ではあるので本記事では双方の方法を明記する。なお，私個人は選択肢2の利点 &lt;code&gt;セル実行中に次のセル実行を指示できる&lt;/code&gt; ことや &lt;code&gt;Matplotlibの画像もインライン表示できる&lt;/code&gt; ことは捨てがたく，選択肢2を採用した。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;選択肢1. クリップボードを経由してipythonに貼り付ける方式&lt;ul&gt;
&lt;li&gt;利点:&lt;ul&gt;
&lt;li&gt;SSH先のターミナルでも特別な設定なしに実行できる&lt;/li&gt;
&lt;li&gt;ipython以外の任意のシェルにも利用可能であり，汎用性が高い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;欠点:&lt;ul&gt;
&lt;li&gt;実行中の処理が終わるまで，次のセルの実行を指示できない&lt;/li&gt;
&lt;li&gt;利用可能なターミナルが限られる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;選択肢2. tcp接続でipythonのカーネルにセル実行を指示する方式&lt;ul&gt;
&lt;li&gt;利点:&lt;ul&gt;
&lt;li&gt;セル実行中に次のセル実行を指示できる&lt;/li&gt;
&lt;li&gt;Matplotlibの画像をインライン表示できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;欠点:&lt;ul&gt;
&lt;li&gt;SSH先のリモートサーバへ接続する場合，設定が煩雑になる&lt;/li&gt;
&lt;li&gt;リモートとローカルのファイル共有を意識する必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;[選択肢1] クリップボードを経由してipythonに貼り付ける方法&lt;/h3&gt;
&lt;p&gt;選択肢1を実現するためには，&lt;a href="https://github.com/hanschen/vim-ipython-cell"&gt;hanschen/vim-ipython-cell&lt;/a&gt; と &lt;a href="https://github.com/jpalardy/vim-slime"&gt;jpalardy/vim-slime&lt;/a&gt; の2つのプラグインを組み合わせる。vim-ipython-cellはvim-slimeをベースにJupyter向けに機能追加したVimプラグインであり，以下の画像のようなノートブックのセル実行を実現する。&lt;/p&gt;
&lt;div class="figure"&gt;
    &lt;img src=/images/ipython-cell-demo.gif&gt;
    &lt;p class="caption"&gt;図2. vim-ipython-cellによるセル実行。画像は&lt;a href="https://github.com/hanschen/vim-ipython-cell"&gt;hanschen/vim-ipython-cell&lt;/a&gt;より引用した&lt;/p&gt;
&lt;/div&gt;

&lt;h4&gt;vim-ipython-cellのインストール&lt;/h4&gt;
&lt;p&gt;まず，必要なパッケージをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip3 install ipython  &lt;span class="c1"&gt;# Pythonのコードセルを実行するipythonを準備&lt;/span&gt;
sudo apt-get -y install screen  &lt;span class="c1"&gt;# コピペの実装に必要。tmuxやX11等でも良い&lt;/span&gt;
sudo apt-get -y install python3-tk  &lt;span class="c1"&gt;# [オプション] matplotlibで画像を表示したい場合&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次に，Vimプラグインをインストールする。&lt;a href="https://github.com/Shougo/neobundle.vim"&gt;NeoBundle&lt;/a&gt;を使う場合は以下の2行を &lt;code&gt;.vimrc&lt;/code&gt; に記述したうえで &lt;code&gt;:Neobundleinstall&lt;/code&gt; コマンドをVimで実行すれば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;NeoBundle &lt;span class="s1"&gt;&amp;#39;jpalardy/vim-slime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;on_ft&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt; }
NeoBundle &lt;span class="s1"&gt;&amp;#39;hanschen/vim-ipython-cell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;on_ft&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;vim-ipython-cellの設定&lt;/h4&gt;
&lt;p&gt;最後に&lt;code&gt;.vimrc&lt;/code&gt; に設定を加える。以下の設定は Screen と &lt;a href="https://github.com/jpalardy/vim-slime"&gt;jpalardy/vim-slime&lt;/a&gt; を組み合わせる場合の設定である。この設定では同じScreenのセッションで，ウィンドウ名 &lt;code&gt;ipython3&lt;/code&gt; のシェルにセルのコードを送信する。なお，tmuxなどを使いたい場合は &lt;a href="https://github.com/jpalardy/vim-slime"&gt;jpalardy/vim-slime&lt;/a&gt; を参照して適宜設定を加えること。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;quot; screenを使う&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:slime_target &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;screen&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; ipythonを使う&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:slime_python_ipython &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; セルの区切り文字を指定&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:slime_cell_delimiter &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;# %%&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; 環境変数 $STY から GNU Screen のセッション名を取得する&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:slime_default_config &lt;span class="p"&gt;=&lt;/span&gt; {&lt;span class="s2"&gt;&amp;quot;sessionname&amp;quot;&lt;/span&gt;: $STY&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;windowname&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;ipython3&amp;quot;&lt;/span&gt;}
&lt;span class="c"&gt;&amp;quot; 接続先情報はユーザ入力させない&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:slime_dont_ask_default &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; mappings&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;&amp;quot; 選択範囲を実行&lt;/span&gt;
xmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F5&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;SlimeRegionSend
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F5&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;SlimeParagraphSend
&lt;span class="c"&gt;&amp;quot;&amp;quot; セルを実行&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F6&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :IPythonCellExecuteCellVerbose&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;&amp;quot; セルを実行して次のセルへ移動&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;M&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :IPythonCellExecuteCellVerboseJump&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;vim-ipython-cellの使い方&lt;/h4&gt;
&lt;p&gt;ここまで設定できたら，以下のような手順でノートブックのセルを実行できる。このときの操作感のイメージは図2を参照のこと。ただし，図2をよく見ると実行したPythonのコードがipythonのログに残っていない。これは &lt;code&gt;:IPythonCellExecuteCell&lt;/code&gt; の仕様だが，これでは過去に実行済みのコードがわからなくなる問題があるので，きちんとコードも表示する &lt;code&gt;:IPythonCellExecuteCellVerbose&lt;/code&gt; を利用したほうが良い。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ターミナルでGNU Screenを起動&lt;/li&gt;
&lt;li&gt;Screenのwindowでipython3を実行，window名を &lt;code&gt;ipython3&lt;/code&gt; に設定&lt;/li&gt;
&lt;li&gt;Screenの別windowでVimを起動。ノートブックを開く&lt;/li&gt;
&lt;li&gt;Vimのカーソルを実行したいセルに合わせ，&lt;code&gt;:IPythonCellExecuteCellVerbose&lt;/code&gt; を実行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;また，vim-ipython-cellの実装は，クリップボードを経由して当該セルの内容をipythonに貼り付けるだけの実装である。ゆえにジョブのキューイングなどはできない。時間のかかる処理をipythonが実行している間は，次のセル実行を指示しても正しくipythonで実行できない。この点は実用上，要注意である。&lt;/p&gt;
&lt;h3&gt;[選択肢2] ipythonのカーネルにtcp接続してセル実行を指示する方法&lt;/h3&gt;
&lt;p&gt;選択肢2を実現するためには &lt;a href="https://github.com/jupyter-vim/jupyter-vim"&gt;jupyter-vim/jupyter-vim&lt;/a&gt; のVimプラグインと &lt;a href="https://github.com/jupyter/qtconsole"&gt;jupyter/qtconsole&lt;/a&gt; を組み合わせる。この方式では，jupyter-vimプラグインからJupyterのQtConsoleにtcp接続をして，カーネルに実行したいコードを送付する実装となっている。これによりジョブのキューイングが正しく動作するため，QtConsole側で計算中に新たなセル実行を指示できる利点がある。また，QtConsoleであればMatplotlibのグラフをインラインで表示できる利点もある。&lt;/p&gt;
&lt;p&gt;なお，jupyter qtconsoleはGUIアプリだが，ターミナルで起動する jupyter console と jupyter-vim を組み合わせて利用することもできる。しかし，Vimからセル実行を指示しても，jupyter consoleの側でEnterキーを押下しないと実行されない仕様になっているため，実用性は低い。ターミナルに閉じて利用したい場合は，vim-ipython-cellを使うほうが良いだろう。&lt;/p&gt;
&lt;div class="figure"&gt;
    &lt;img src=/images/qtconsole.gif&gt;
    &lt;p class="caption"&gt;図3. jupyter-vimとQtConsoleによるセル実行&lt;/p&gt;
&lt;/div&gt;

&lt;h4&gt;jupyter-vimのインストール&lt;/h4&gt;
&lt;p&gt;まず，Jupyter QtConsoleを利用するために以下のパッケージをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip3 install jupyter
pip3 install qtconsole
pip3 install PyQt5 &lt;span class="c1"&gt;# もしエラーになるなら PyQt5==5.12.2 にダウングレードする&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PyQt5のインストールは pip ではうまく出来ないことがある。もし，pythonの仮想環境を使わないなら apt でシステム側に PyQt5 とその関連ライブラリをインストールしても良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install python3-pyqt5 pyqt5-dev-tools qttools5-dev-tools python3-pyqt5.qtsvg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次に，Vimプラグインをインストールする。&lt;a href="https://github.com/Shougo/neobundle.vim"&gt;NeoBundle&lt;/a&gt;を使う場合は以下の2行を &lt;code&gt;.vimrc&lt;/code&gt; に記述したうえで &lt;code&gt;:Neobundleinstall&lt;/code&gt; コマンドをVimで実行すれば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;NeoBundle &lt;span class="s1"&gt;&amp;#39;jupyter-vim/jupyter-vim&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;jupyter-vimの設定&lt;/h4&gt;
&lt;p&gt;jupyter-vimの動作に必要な設定を加える。まず，Jupyter QtConsoleの設定ファイルを生成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;jupyter&lt;/span&gt; &lt;span class="n"&gt;qtconsole&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成された設定ファイル &lt;code&gt;~/.jupyter/jupyter_qtconsole_config.py&lt;/code&gt; に以下の1行を挿入する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConsoleWidget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;include_other_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;jupyter-vimとQtConsoleの組み合わせには&lt;a href="https://github.com/jupyter/qtconsole/issues/386"&gt;画像表示に画面スクロールが自動的に追従しない問題&lt;/a&gt; がある。少なくとも私の環境 (Jupyter QtConsole 4.7.5) では再現した。例えば，以下のようなコードを実行して自動スクロールしない場合は修正が必要である。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この問題はQtConsoleのコードに1行を追加するだけで修正できる。具体的には &lt;a href="https://github.com/jupyter/qtconsole/pull/349/commits/49f1d666a03cf67dcf71c5e07ada80b76354fdb1"&gt;Scroll down for output from remote command by ajtam  Pull Request #349 jupyter/qtconsole&lt;/a&gt; の記載に従って &lt;code&gt;qtconsole/console_widget.py&lt;/code&gt; の 970行目付近 &lt;code&gt;_append_custom&lt;/code&gt; 関数の末尾に，以下のように &lt;code&gt;self._control.moveCursor(QtGui.QTextCursor.End)&lt;/code&gt; の1行を挿入する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;_append_custom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;before_prompt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="ss"&gt;&amp;quot;&amp;quot;&amp;quot; A low-level method for appending content to the end of the buffer.&lt;/span&gt;

&lt;span class="ss"&gt;        If &amp;#39;before_prompt&amp;#39; is enabled, the content will be inserted before the&lt;/span&gt;
&lt;span class="ss"&gt;        current prompt, if there is one.&lt;/span&gt;
&lt;span class="ss"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Determine&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="k"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textCursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;before_prompt&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_reading&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_executing&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_flush_pending_stream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_append_before_prompt_pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;insert&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_insert_plain_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_flush_pending_stream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;movePosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QTextCursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;End&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Perform&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;insertion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="k"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;moveCursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QTextCursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;End&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="err"&gt;この行を新規に加える&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;jupyter-vimの使い方&lt;/h4&gt;
&lt;p&gt;ここまでくれば，jupyter-vimを利用してノートブックのセルを実行できる。まず，コードを実行する画面を準備するため，以下のコマンドでQtConsoleを起動する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;jupyter qtconsole
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次にVimを起動し， &lt;code&gt;:JupyterConnect&lt;/code&gt; コマンドでQtConsoleに接続する。後は実行したいセルにカーソルをあわせ，&lt;code&gt;:JupyterSendCell&lt;/code&gt; コマンドを実行すれば図3のようにセルを実行できる。&lt;/p&gt;
&lt;h2&gt;3. リモートサーバでJupyterノートブックを実行する&lt;/h2&gt;
&lt;p&gt;Jupyterをリモートのサーバで起動すれば，ローカルのノートPCでは実行できない重たい計算処理をスムーズに実行できる。同様にVimでもリモートサーバに計算処理を任せたいことはよくあるので，その方法を記す。&lt;/p&gt;
&lt;p&gt;具体的な実装は，前述の選択肢1 (vim-ipython-cellを使う場合) と選択肢2 (jupyter-vimを使う場合) で異なる。複雑なのは後者であり，その詳細を説明する。&lt;/p&gt;
&lt;h3&gt;[選択肢1] vim-ipython-cellを使う場合&lt;/h3&gt;
&lt;p&gt;vim-ipython-cellを利用する場合は難しいことはない。単にリモートサーバにssh接続してから，screenとvim，ipythonを起動してローカルマシンと同様に利用すれば良い。&lt;/p&gt;
&lt;h3&gt;[選択肢2] jupyter-vimを使う場合&lt;/h3&gt;
&lt;p&gt;jupyter-vimを使う場合は，以下の2つの方式がある。こちらも，それぞれ利点と欠点があるが，私個人は方式1のほうがシンプルで好きだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方式1. リモートにX転送付きのSSH接続をし，QtConsoleとVimを立ち上げる方式&lt;ul&gt;
&lt;li&gt;利点: 処理がリモートサーバで閉じるのでファイル共有の問題が生じない&lt;/li&gt;
&lt;li&gt;欠点: X転送ではQtConsoleの画面更新が遅い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方式2. ローカルのQtConsoleとVimを，リモートのipythonカーネルと通信させる方式&lt;ul&gt;
&lt;li&gt;利点: リモートサーバのQtCOnsole等を環境整備する手間がない&lt;/li&gt;
&lt;li&gt;欠点: ローカルマシンとリモートサーバのファイル共有が必要になることがある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;方式1の実施方法&lt;/h4&gt;
&lt;div class="figure"&gt;
    &lt;img src=/images/remote_qtconsole1.PNG&gt;
    &lt;p class="caption"&gt;図4. 方式1の構成図&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;VimとQtConsoleをリモートで実行する場合はほとんどローカルマシンに閉じて使う場合と同じ操作になる。異なる点は，リモートにX転送付きのSSH接続をしてからVimとQtConsoleを立ち上げる点である。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# リモートサーバにX転送を有効化したSSH接続をする&lt;/span&gt;
ssh -Y remote

&lt;span class="c1"&gt;# [オプション] 開発用の仮想環境を準備する&lt;/span&gt;
python3 -m venv .devel
&lt;span class="nb"&gt;source&lt;/span&gt; .devel/bin/activate

&lt;span class="c1"&gt;# リモートサーバにもQtConsoleに必要なライブラリをインストールする&lt;/span&gt;
pip3 install jupyter
pip3 install qtconsole
pip3 install PyQt5 &lt;span class="c1"&gt;# もしエラーになるなら PyQt5==5.12.2 にダウングレードする&lt;/span&gt;

&lt;span class="c1"&gt;# リモートサーバでQtConsoleを実行する&lt;/span&gt;
jupyter qtconsole
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;後はリモートサーバでVimを起動し，&lt;code&gt;:JupyterConnect&lt;/code&gt; コマンドを実行して開発を開始するだけ。&lt;/p&gt;
&lt;h4&gt;方式2の実施方法&lt;/h4&gt;
&lt;div class="figure"&gt;
    &lt;img src=/images/remote_qtconsole2.PNG&gt;
    &lt;p class="caption"&gt;図5. 方式2の構成図&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://qiita.com/u1and0/items/203da9adda70f8b4c7cd"&gt;vagrant上のipython kernelに接続してjupyter を使う - Qiita&lt;/a&gt; の記事にあるように，リモートサーバで ipythonのカーネルだけを起動して，ローカルマシンのQtConsoleから呼び出す方式の実現方法を示す。この方式であれば，リモートサーバにipython以外の追加ライブラリは不要なので環境整備の手間が少ない利点がある。&lt;/p&gt;
&lt;p&gt;まず，リモートサーバでipythonカーネルを以下のように起動して準備する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# リモートサーバにSSHで接続する&lt;/span&gt;
ssh remote

&lt;span class="c1"&gt;# [オプション] 開発用の仮想環境を準備する&lt;/span&gt;
python3 -m venv .devel
&lt;span class="nb"&gt;source&lt;/span&gt; .devel/bin/activate

&lt;span class="c1"&gt;# リモートサーバに必要なライブラリをインストールする&lt;/span&gt;
pip3 install ipython

&lt;span class="c1"&gt;# リモートサーバでipythonを実行する&lt;/span&gt;
ipython kernel -f /tmp/ipython.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次に，ローカルマシンで以下のコマンドを実行し，QtConsoleをipythonカーネルに接続する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# ipythonカーネルの接続情報を取得する&lt;/span&gt;
scp remote:/tmp/ipython.json /tmp/ipython.json

&lt;span class="c1"&gt;# qtcosoleを起動してipythonカーネルに接続する&lt;/span&gt;
jupyter qtconsole --existing /tmp/ipython.json --ssh remote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後にVimを起動して &lt;code&gt;:JupyterConnect /tmp/ipython-ssh.json&lt;/code&gt; のコマンドを実行し，QtConsoleに接続する。&lt;/p&gt;
&lt;h4&gt;まとめ&lt;/h4&gt;
&lt;p&gt;以上の操作をシェルスクリプトにまとめると以下のようになる。ここでは，指定したリモートホストにSSH接続をして，ipythonカーネルを起動し，ローカルのQtConsoleで接続するところまでを自動化する。シェルスクリプトの1つめの引数は .ssh/config に記載のホスト名であり，2つめの引数はipythonカーネルの起動に利用するPythonの仮想環境 (venv) のパスである。もしも，1つめの引数がない場合は方式1のように，ローカルでQtConsoleを起動する&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; connect&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;# 指定したリモートホストにSSH接続をして，ipythonカーネルを起動し，ローカルのQtConsoleで接続する&lt;/span&gt;
    &lt;span class="c1"&gt;# 1つめの引数は .ssh/config に記載のホスト名&lt;/span&gt;
    &lt;span class="c1"&gt;# 2つめの引数はipythonカーネルの起動に利用するPythonの仮想環境 (venv)&lt;/span&gt;
    &lt;span class="c1"&gt;# 1つめの引数がない場合はローカルでipythonカーネルを起動する&lt;/span&gt;
    &lt;span class="nv"&gt;REMOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;VENVIDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="p"&gt;~/.devel&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REMOTE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Running a remote kernel&amp;#39;&lt;/span&gt;
        ssh &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REMOTE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;source &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VENVDIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/bin/activate &amp;amp;&amp;amp; ipython kernel -f /tmp/ipython.json &amp;amp;&amp;quot;&lt;/span&gt;
        scp &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REMOTE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;:/tmp/ipython.json /tmp/ipython.json
        jupyter qtconsole --existing /tmp/ipython.json --ssh &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;REMOTE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Running a local kernel&amp;#39;&lt;/span&gt;
        rm -f /tmp/ipython-ssh.json
        jupyter qtconsole -f /tmp/ipython-ssh.json
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[0]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    connect &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;h3&gt;jupytext.vimの関連情報&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jupytext.readthedocs.io/en/latest/"&gt;Jupyter Notebooks as Markdown Documents, Julia, Python or R Scripts — Jupytext documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/goerz/jupytext.vim"&gt;goerz/jupytext.vim: Vim plugin for editing Jupyter ipynb files via jupytext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;vim-ipython-cellの関連情報&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hanschen/vim-ipython-cell"&gt;hanschen/vim-ipython-cell: Seamlessly run Python code from Vim in IPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jpalardy/vim-slime"&gt;jpalardy/vim-slime: A vim plugin to give you some slime. (Emacs)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;jupyter-vimの関連情報&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyter-vim/jupyter-vim"&gt;jupyter-vim/jupyter-vim: Make Vim talk to Jupyter kernels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qtconsole.readthedocs.io/en/stable/"&gt;The Qt Console for Jupyter — Jupyter Qt Console 4.7.5 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/u1and0/items/203da9adda70f8b4c7cd"&gt;vagrant上のipython kernelに接続してjupyter を使う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/ipython/ipython/wiki/Cookbook:-Connecting-to-a-remote-kernel-via-ssh"&gt;Cookbook: Connecting to a remote kernel via ssh · ipython/ipython Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jupyter/qtconsole/issues/386"&gt;Auto-scroll not working with plots · Issue #386 · jupyter/qtconsole&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyter/qtconsole/pull/349/commits/49f1d666a03cf67dcf71c5e07ada80b76354fdb1"&gt;Scroll down for output from remote command by ajtam · Pull Request #349 · jupyter/qtconsole&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Software"></category><category term="Vim"></category><category term="Python"></category><category term="Jupyter"></category></entry><entry><title>ターミナル上で画像を表示するlibsixelを試してみた</title><link href="http://blog.calcurio.com/sixel.html" rel="alternate"></link><published>2018-04-08T15:51:47+09:00</published><updated>2018-04-08T17:06:53+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2018-04-08:/sixel.html</id><summary type="html">&lt;p&gt;ssh接続先で数値計算結果を確認するため，matplotlibでグラフ画像を生成することはよくある。今までは画像ファイルをscpでローカルに転送し，表示していたがいちいちコピーするのは面倒だ。ssh先のcatコマンドで画像も表示できたらいいのになーとはよく思っていた。&lt;/p&gt;
&lt;p&gt;ところでw3mやemacsでは，ターミナルに画像を表示する機能があったはず。
ということで調べてみると，どうやらsixelという規格を使えばターミナルに画像を表示できるようだ。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saitoha/libsixel/"&gt;libsixel&lt;/a&gt; はsixelとして表示するためのプログラム。
libsixelと &lt;a class="reference external" href="https://github.com/saitoha/libsixel#terminal-requirements"&gt;sixelに対応したターミナル&lt;/a&gt; を組み合わせれば，画像を表示できるはずだ。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;ssh接続先で数値計算結果を確認するため，matplotlibでグラフ画像を生成することはよくある。今までは画像ファイルをscpでローカルに転送し，表示していたがいちいちコピーするのは面倒だ。ssh先のcatコマンドで画像も表示できたらいいのになーとはよく思っていた。&lt;/p&gt;
&lt;p&gt;ところでw3mやemacsでは，ターミナルに画像を表示する機能があったはず。
ということで調べてみると，どうやらsixelという規格を使えばターミナルに画像を表示できるようだ。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saitoha/libsixel/"&gt;libsixel&lt;/a&gt; はsixelとして表示するためのプログラム。
libsixelと &lt;a class="reference external" href="https://github.com/saitoha/libsixel#terminal-requirements"&gt;sixelに対応したターミナル&lt;/a&gt; を組み合わせれば，画像を表示できるはずだ。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;libsixelのインストール&lt;/h2&gt;
&lt;p&gt;Ubuntuなら下記コマンドでlibsixelをインストールできる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install libsixel1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cygwinならソースコードからコンパイルする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/saitoha/libsixel.git
&lt;span class="nb"&gt;cd&lt;/span&gt; libsixel
./configure
make
make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;libsixelを使ってみる&lt;/h2&gt;
&lt;p&gt;今回はWindowsのCygwinでminttyにsixelを表示してみた。
&lt;tt class="docutils literal"&gt;img2sixel&lt;/tt&gt; コマンドを使えば，ssh接続先でも特に問題なくターミナルに画像を表示できた。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="sixelで夕焼けの写真を表示してみた例" src="http://blog.calcurio.com/images/sixel.png" /&gt;
&lt;p class="caption"&gt;minttyでsixelを使って夕焼けの写真(jpeg)を表示してみた例。
sixelでは256色？に劣化するそうだが，違和感なく綺麗に写真が表示できている&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="sixelで夕焼けの写真を表示してみた例" src="http://blog.calcurio.com/images/sixel_mpl.png" /&gt;
&lt;p class="caption"&gt;ssh先でsixelを使ってmatplotlibのグラフ(png)を表示してみた例&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="libsixelscreen"&gt;
&lt;h2&gt;libsixelとscreen&lt;/h2&gt;
&lt;p&gt;libsixelのimg2sixelでは， screenで画像表示するための &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--penetrate&lt;/span&gt;&lt;/tt&gt; オプションがある。
私の環境では，statuslineの設定のせいか一瞬だけ画像が表示された後に消えてしまった。&lt;/p&gt;
&lt;p&gt;また，screenを二重に起動する環境では画像が表示されず，エスケープシーケンスの
文字列が延々と表示されるだけになる。ということで，screenとsixelの併用は要注意なようだ。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://qiita.com/arakiken/items/3e4bc9a6e43af0198e46"&gt;Sixel Graphicsを活用したアプリケーションの御紹介 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/saitoha/libsixel/"&gt;saitoha/libsixel: The new standard of SIXEL development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Ubuntu"></category><category term="CLI"></category><category term="CUI"></category><category term="Cygwin"></category><category term="Linux"></category></entry><entry><title>機械学習のデータセットをGitライクにバージョン管理するDataVersionControlを試す</title><link href="http://blog.calcurio.com/dataversioncontrol.html" rel="alternate"></link><published>2018-04-07T19:34:14+09:00</published><updated>2018-04-08T18:12:18+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2018-04-07:/dataversioncontrol.html</id><summary type="html">&lt;p&gt;機械学習でモデルを作成する場合，満足できる結果を得るまで条件を変えながら，データセット準備とモデル作成を繰り返す。
各条件において結果の再現性を保つには，プログラムに加えてデータのバージョン管理が必要だ。&lt;/p&gt;
&lt;p&gt;そこで，コードとデータをセットでバージョン管理するツールの
&lt;a class="reference external" href="https://github.com/dataversioncontrol/dvc"&gt;dvc (DataVersionControl)&lt;/a&gt; の
&lt;a class="reference external" href="https://blog.dataversioncontrol.com/data-version-control-tutorial-9146715eda46"&gt;チュートリアル&lt;/a&gt;
を試しに実行してみた &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[1]&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;試した結論としては，今のところはgit-lfsとMakefileの組み合わせのほうが良い。dvcは絶賛開発中なので今後に期待。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;機械学習でモデルを作成する場合，満足できる結果を得るまで条件を変えながら，データセット準備とモデル作成を繰り返す。
各条件において結果の再現性を保つには，プログラムに加えてデータのバージョン管理が必要だ。&lt;/p&gt;
&lt;p&gt;そこで，コードとデータをセットでバージョン管理するツールの
&lt;a class="reference external" href="https://github.com/dataversioncontrol/dvc"&gt;dvc (DataVersionControl)&lt;/a&gt; の
&lt;a class="reference external" href="https://blog.dataversioncontrol.com/data-version-control-tutorial-9146715eda46"&gt;チュートリアル&lt;/a&gt;
を試しに実行してみた &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[1]&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;試した結論としては，今のところはgit-lfsとMakefileの組み合わせのほうが良い。dvcは絶賛開発中なので今後に期待。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="dvc"&gt;
&lt;h2&gt;1. dvcの利点&lt;/h2&gt;
&lt;div class="section" id="hardlink"&gt;
&lt;h3&gt;1.1. 巨大バイナリファイルをhardlinkで管理するので高速に動作&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;競合はgit-lfs&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dag"&gt;
&lt;h3&gt;1.2. データの依存グラフ(DAG)を定義し，コード差分に依存する処理だけ自動実行する&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ex. ハイパーパラメータを変化させたら，学習処理だけ再実行する&lt;/li&gt;
&lt;li&gt;競合はMakefile&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;2. dvcの欠点&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;2.1. 定義済みDAGの把握が困難&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;DAGを可視化するshowコマンドがあったのだが，廃止されてしまった...。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/dataversioncontrol/dvc/issues/598"&gt;showコマンド復活のissue&lt;/a&gt; はあるので今後に期待&lt;/li&gt;
&lt;li&gt;今はMakefileで処理を定義しておけば十分にみえる&lt;/li&gt;
&lt;li&gt;Makefileなら，把握も書き換えもしやすい&lt;/li&gt;
&lt;li&gt;Makefileなら汎用ツールなので，みんな知っている&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="awsgcp"&gt;
&lt;h3&gt;2.2. 外部ストレージとしてAWSとGCPにしか対応していない&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;これでは社内のようなプライベートな環境で使えない&lt;/li&gt;
&lt;li&gt;SephやMinfsなどAWS S3互換OSSへの対応してほしい&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/dataversioncontrol/dvc/issues/596"&gt;issue&lt;/a&gt; はあるので今後に期待&lt;/li&gt;
&lt;li&gt;今のところはgit-lfsで良い&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[1]&lt;/td&gt;&lt;td&gt;ちなみにチュートリアルのcode/featurization.pyは17GB程度のRAMを要求する。Swap追加を推奨&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="機械学習"></category><category term="Ubuntu"></category><category term="Linux"></category><category term="dvc"></category></entry><entry><title>Docker buildを高速化するためにsquidで透過型プロキシを立ててみた</title><link href="http://blog.calcurio.com/transparent-proxy-by-squid.html" rel="alternate"></link><published>2017-08-19T09:39:33+09:00</published><updated>2017-09-04T07:03:49+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2017-08-19:/transparent-proxy-by-squid.html</id><summary type="html">&lt;p&gt;先日，docker buildを高速化したくて &lt;a class="reference external" href="http://blog.calcurio.com/detect-apt-cacher-in-dockerfile.html"&gt;Dockerfile内部でapt-cacher-ngを自動検出する | 電脳手帳&lt;/a&gt; という記事を書いた。aptのキャッシュを使うためにプロキシを通したいが，プロキシがない環境でもそのままbuildできるDockerfileを書くのが目的だった。&lt;/p&gt;
&lt;p&gt;ならば，透過型プロキシをsquidで立てるべきだということで立ててみた。
やってみると意外と簡単だったので，apt-cacher-ngは廃止してsquidを採用することにした。squidならhttp接続のすべてをキャッシュできる，つまりyumやwgetも高速化できるという利点がある。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;先日，docker buildを高速化したくて &lt;a class="reference external" href="http://blog.calcurio.com/detect-apt-cacher-in-dockerfile.html"&gt;Dockerfile内部でapt-cacher-ngを自動検出する | 電脳手帳&lt;/a&gt; という記事を書いた。aptのキャッシュを使うためにプロキシを通したいが，プロキシがない環境でもそのままbuildできるDockerfileを書くのが目的だった。&lt;/p&gt;
&lt;p&gt;ならば，透過型プロキシをsquidで立てるべきだということで立ててみた。
やってみると意外と簡単だったので，apt-cacher-ngは廃止してsquidを採用することにした。squidならhttp接続のすべてをキャッシュできる，つまりyumやwgetも高速化できるという利点がある。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="squid"&gt;
&lt;h2&gt;1. squidコンテナの準備&lt;/h2&gt;
&lt;p&gt;まず，squidを動作させるために以下の内容のDockerfileを用意する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM ubuntu:xenial
MAINTAINER M. Tsuyuki

RUN apt -q update &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  apt -qy --no-install-recommends install squid3 &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  apt clean &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  rm -rf /var/cache/apt/archives/* /var/lib/apt/lists/*

COPY squid.conf /etc/squid/squid.conf
CMD chown -R proxy:proxy /var/cache/squid &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; squid -Nz &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; squid &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sleep 10s &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; tail -f /var/log/squid/access.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に，squidの設定ファイルをsquid.confとして作成する。
この設定ファイルではキャッシュのサイズ上限を50GBとした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;acl localnet src &lt;span class="m"&gt;10&lt;/span&gt;.0.0.0/8     &lt;span class="c1"&gt;# RFC1918 possible internal network&lt;/span&gt;
acl localnet src &lt;span class="m"&gt;172&lt;/span&gt;.16.0.0/12  &lt;span class="c1"&gt;# RFC1918 possible internal network&lt;/span&gt;
acl localnet src &lt;span class="m"&gt;192&lt;/span&gt;.168.0.0/16 &lt;span class="c1"&gt;# RFC1918 possible internal network&lt;/span&gt;
acl localnet src fc00::/7       &lt;span class="c1"&gt;# RFC 4193 local private network range&lt;/span&gt;
acl localnet src fe80::/10      &lt;span class="c1"&gt;# RFC 4291 link-local (directly plugged) machines&lt;/span&gt;
acl SSL_ports port &lt;span class="m"&gt;443&lt;/span&gt;
acl Safe_ports port &lt;span class="m"&gt;80&lt;/span&gt;          &lt;span class="c1"&gt;# http&lt;/span&gt;
acl Safe_ports port &lt;span class="m"&gt;21&lt;/span&gt;          &lt;span class="c1"&gt;# ftp&lt;/span&gt;
acl Safe_ports port &lt;span class="m"&gt;443&lt;/span&gt;         &lt;span class="c1"&gt;# https&lt;/span&gt;
acl Safe_ports port &lt;span class="m"&gt;70&lt;/span&gt;          &lt;span class="c1"&gt;# gopher&lt;/span&gt;
acl Safe_ports port &lt;span class="m"&gt;210&lt;/span&gt;         &lt;span class="c1"&gt;# wais&lt;/span&gt;
acl Safe_ports port &lt;span class="m"&gt;1025&lt;/span&gt;-65535  &lt;span class="c1"&gt;# unregistered ports&lt;/span&gt;
acl Safe_ports port &lt;span class="m"&gt;280&lt;/span&gt;         &lt;span class="c1"&gt;# http-mgmt&lt;/span&gt;
acl Safe_ports port &lt;span class="m"&gt;488&lt;/span&gt;         &lt;span class="c1"&gt;# gss-http&lt;/span&gt;
acl Safe_ports port &lt;span class="m"&gt;591&lt;/span&gt;         &lt;span class="c1"&gt;# filemaker&lt;/span&gt;
acl Safe_ports port &lt;span class="m"&gt;777&lt;/span&gt;         &lt;span class="c1"&gt;# multiling http&lt;/span&gt;
acl CONNECT method CONNECT
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
http_access allow localnet
http_access allow localhost
http_access deny all
http_port &lt;span class="m"&gt;3128&lt;/span&gt;
coredump_dir /var/spool/squid
refresh_pattern ^ftp:           &lt;span class="m"&gt;1440&lt;/span&gt;    &lt;span class="m"&gt;20&lt;/span&gt;%     &lt;span class="m"&gt;10080&lt;/span&gt;
refresh_pattern ^gopher:        &lt;span class="m"&gt;1440&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;%      &lt;span class="m"&gt;1440&lt;/span&gt;
refresh_pattern -i &lt;span class="o"&gt;(&lt;/span&gt;/cgi-bin/&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\?&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;%      &lt;span class="m"&gt;0&lt;/span&gt;
refresh_pattern &lt;span class="o"&gt;(&lt;/span&gt;Release&lt;span class="p"&gt;|&lt;/span&gt;Packages&lt;span class="o"&gt;(&lt;/span&gt;.gz&lt;span class="o"&gt;)&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;$      &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;20&lt;/span&gt;%     &lt;span class="m"&gt;2880&lt;/span&gt;
refresh_pattern .               &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;20&lt;/span&gt;%     &lt;span class="m"&gt;4320&lt;/span&gt;
visible_hostname unkown
http_port &lt;span class="m"&gt;3129&lt;/span&gt; intercept

httpd_suppress_version_string on
maximum_object_size &lt;span class="m"&gt;8192&lt;/span&gt; MB
cache_dir ufs /var/cache/squid &lt;span class="m"&gt;50000&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt; &lt;span class="m"&gt;256&lt;/span&gt;
cache_mem &lt;span class="m"&gt;2000&lt;/span&gt; MB

maximum_object_size_in_memory &lt;span class="m"&gt;10240&lt;/span&gt; KB
cache_replacement_policy lru
cache_access_log /var/log/squid/access.log
cache_log /var/log/squid/cache.log
cache_store_log /var/log/squid/store.log
pid_filename /var/run/squid.pid

&lt;span class="c1"&gt;# refresh pattern for debs and udebs&lt;/span&gt;
refresh_pattern deb$   &lt;span class="m"&gt;129600&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="m"&gt;129600&lt;/span&gt;
refresh_pattern udeb$   &lt;span class="m"&gt;129600&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="m"&gt;129600&lt;/span&gt;
refresh_pattern tar.gz$  &lt;span class="m"&gt;129600&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="m"&gt;129600&lt;/span&gt;
refresh_pattern gem$  &lt;span class="m"&gt;129600&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="m"&gt;129600&lt;/span&gt;

&lt;span class="c1"&gt;# refresh pattern Packages and Release files&lt;/span&gt;
refresh_pattern &lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;Packages&lt;span class="p"&gt;|&lt;/span&gt;Sources&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;bz2&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;gz&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;xz&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="m"&gt;300&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="m"&gt;300&lt;/span&gt; refresh-ims
refresh_pattern &lt;span class="se"&gt;\/&lt;/span&gt;Release&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;gpg&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="m"&gt;300&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="m"&gt;300&lt;/span&gt; refresh-ims
refresh_pattern &lt;span class="se"&gt;\/&lt;/span&gt;InRelease$ &lt;span class="m"&gt;300&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="m"&gt;300&lt;/span&gt; refresh-ims

&lt;span class="c1"&gt;# handle meta-release and changelogs.ubuntu.com special&lt;/span&gt;
&lt;span class="c1"&gt;# (fine to have this on debian too)&lt;/span&gt;
refresh_pattern changelogs.ubuntu.com/*  &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;% &lt;span class="m"&gt;1&lt;/span&gt;

forwarded_for off
request_header_access X-FORWARDED-FOR deny all
request_header_access Via deny all
request_header_access Cache-Control deny all
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;iptablesでsquidへnatを設定するので，dockerホストの再起動後も
iptablesの設定が永続化されるようにパッケージをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt update
sudo apt install -y iptables-persistent
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;後はbuildしてiptablesでnatを設定してからrunするだけ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker build --compress --pull -t squid .

sudo iptables -t nat -A PREROUTING -p tcp --dport &lt;span class="m"&gt;80&lt;/span&gt; -j REDIRECT --to &lt;span class="m"&gt;3129&lt;/span&gt; -w
sudo /etc/init.d/netfilter-persistent save

docker run -d &lt;span class="se"&gt;\&lt;/span&gt;
    -v /etc/localtime:/etc/localtime:ro &lt;span class="se"&gt;\&lt;/span&gt;
    -v /var/cache/squid:/var/cache/squid &lt;span class="se"&gt;\&lt;/span&gt;
    --network host &lt;span class="se"&gt;\&lt;/span&gt;
    --name&lt;span class="o"&gt;=&lt;/span&gt;squid &lt;span class="se"&gt;\&lt;/span&gt;
    --hostname&lt;span class="o"&gt;=&lt;/span&gt;squid &lt;span class="se"&gt;\&lt;/span&gt;
    squid
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のようなMakefileを作ってsquidを簡単に有効化/無効化できるようにすると便利。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;CONTAINER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;squid
&lt;span class="nv"&gt;IMAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CONTAINER&lt;span class="k"&gt;)&lt;/span&gt;

build:
    docker build --network --compress --pull -t &lt;span class="k"&gt;$(&lt;/span&gt;IMAGE&lt;span class="k"&gt;)&lt;/span&gt; .

shell:
    docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it &lt;span class="k"&gt;$(&lt;/span&gt;CONTAINER&lt;span class="k"&gt;)&lt;/span&gt; /bin/bash

run: on
    docker run -d &lt;span class="se"&gt;\&lt;/span&gt;
        -v /etc/localtime:/etc/localtime:ro &lt;span class="se"&gt;\&lt;/span&gt;
        -v squid-cache:/var/cache/squid &lt;span class="se"&gt;\&lt;/span&gt;
        --restart always &lt;span class="se"&gt;\&lt;/span&gt;
        --log-driver json-file &lt;span class="se"&gt;\&lt;/span&gt;
        --log-opt max-size&lt;span class="o"&gt;=&lt;/span&gt;1g &lt;span class="se"&gt;\&lt;/span&gt;
        --network host &lt;span class="se"&gt;\&lt;/span&gt;
        --name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CONTAINER&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --hostname&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CONTAINER&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;$(&lt;/span&gt;IMAGE&lt;span class="k"&gt;)&lt;/span&gt;

rm: off
    -docker rm -f &lt;span class="k"&gt;$(&lt;/span&gt;CONTAINER&lt;span class="k"&gt;)&lt;/span&gt;

on:
    sudo iptables -t nat -A PREROUTING -p tcp --dport &lt;span class="m"&gt;80&lt;/span&gt; -j REDIRECT --to &lt;span class="m"&gt;3129&lt;/span&gt; -w
    sudo /etc/init.d/netfilter-persistent save
off:
    -sudo iptables -t nat -D PREROUTING -p tcp --dport &lt;span class="m"&gt;80&lt;/span&gt; -j REDIRECT --to &lt;span class="m"&gt;3129&lt;/span&gt; -w
    sudo /etc/init.d/netfilter-persistent save

du:
    sudo docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it &lt;span class="k"&gt;$(&lt;/span&gt;CONTAINER&lt;span class="k"&gt;)&lt;/span&gt; du -sh /var/cache/squid

intall:
    sudo apt update
    sudo apt install -y iptables-persistent
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;最後に&lt;/h2&gt;
&lt;p&gt;以上の作業でDockerコンテナが使うネットワークを含め，
この物理ホストでnatされて外にでる80番ポートのアクセスは
squidコンテナをproxyとして使うようになった。&lt;/p&gt;
&lt;p&gt;なお，物理ホスト自体からのアクセスはnatされないので
squidコンテナを経由しないし，そもそも経由してはいけない。
なぜならば，物理ホストのhttp_proxy環境変数でsquidコンテナを指定すると，
squidコンテナ自体から発せられるhttp接続もsquidコンテナ自身を
経由するようになり，ループが発生するからだ。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jpetazzo/squid-in-a-can"&gt;jpetazzo/squid-in-a-can&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://qiita.com/kno2502/items/29fe211eac3ec10df551"&gt;.debファイルをキャッシュしたりするtransparent proxyを作る - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Ubuntu"></category><category term="Docker"></category></entry><entry><title>Dockerfile内部でapt-cacher-ngを自動検出する</title><link href="http://blog.calcurio.com/detect-apt-cacher-in-dockerfile.html" rel="alternate"></link><published>2017-08-19T04:11:46+09:00</published><updated>2017-08-21T06:09:24+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2017-08-19:/detect-apt-cacher-in-dockerfile.html</id><summary type="html">&lt;p&gt;Dockerfileを作っていると，何度もbuildしてはテストを繰り返す。
何度も何度も &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt; install&lt;/tt&gt; していると時間がかかるので
apt-cacher-ngを使うと便利だ。&lt;/p&gt;
&lt;p&gt;しかし，DockerfileにproxyのURLを決め打ちしてしまうと
可搬性が損なわれる。特にDocker Hubでbuildするときはapt-cacher-ng
を使えないので致命的だ。&lt;/p&gt;
&lt;p&gt;そこでproxyを自動検出する，つまり指定のURLへ到達できない場合は
apt-cacher-ngを使わないようにDockerfileを記述してみた。
これによりローカルで開発したDockerfileをそのままDocker Hubで公開できる。&lt;/p&gt;

&lt;h2&gt;2017-08-21追記&lt;/h2&gt;
&lt;p&gt;記録として本記事を残しておくが，本方式は推奨しない。&lt;/p&gt;
&lt;p&gt;squid を使ってhttpの透過型プロキシを立てれば，
Dockerfileに何も書かなくていいし，apt以外のyumやwget等も
高速化するからだ。&lt;/p&gt;
&lt;p&gt;squidの構築に関しては &lt;a class="reference external" href="http://blog.calcurio.com/transparent-proxy-by-squid.html"&gt;Docker buildを高速化するためにsquidで透過型プロキシを立ててみた | 電脳手帳&lt;/a&gt; を参照のこと。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Dockerfileを作っていると，何度もbuildしてはテストを繰り返す。
何度も何度も &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt; install&lt;/tt&gt; していると時間がかかるので
apt-cacher-ngを使うと便利だ。&lt;/p&gt;
&lt;p&gt;しかし，DockerfileにproxyのURLを決め打ちしてしまうと
可搬性が損なわれる。特にDocker Hubでbuildするときはapt-cacher-ng
を使えないので致命的だ。&lt;/p&gt;
&lt;p&gt;そこでproxyを自動検出する，つまり指定のURLへ到達できない場合は
apt-cacher-ngを使わないようにDockerfileを記述してみた。
これによりローカルで開発したDockerfileをそのままDocker Hubで公開できる。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;2017-08-21追記&lt;/h2&gt;
&lt;p&gt;記録として本記事を残しておくが，本方式は推奨しない。&lt;/p&gt;
&lt;p&gt;squid を使ってhttpの透過型プロキシを立てれば，
Dockerfileに何も書かなくていいし，apt以外のyumやwget等も
高速化するからだ。&lt;/p&gt;
&lt;p&gt;squidの構築に関しては &lt;a class="reference external" href="http://blog.calcurio.com/transparent-proxy-by-squid.html"&gt;Docker buildを高速化するためにsquidで透過型プロキシを立ててみた | 電脳手帳&lt;/a&gt; を参照のこと。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;/div&gt;
&lt;div class="section" id="apt-cacher-ng"&gt;
&lt;h2&gt;apt-cacher-ngコンテナの構築&lt;/h2&gt;
&lt;p&gt;まずはapt-cacher-ngが動作していないと始まらない。
下記の内容でDockerfileを用意する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM ubuntu:xenial
MAINTAINER M. Tsuyuki

ARG &lt;span class="nv"&gt;DEBIAN_FRONTEND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;noninteractive

RUN apt update &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  apt install -y apt-cacher-ng &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  apt clean &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  rm -rf /var/cache/apt/archives/* /var/lib/apt/lists/*

VOLUME &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/var/cache/apt-cacher-ng&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
EXPOSE &lt;span class="m"&gt;3142&lt;/span&gt;

CMD chmod &lt;span class="m"&gt;777&lt;/span&gt; /var/cache/apt-cacher-ng &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  /etc/init.d/apt-cacher-ng start &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  tail -f /var/log/apt-cacher-ng/*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;buildしてrunする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker build --compress --pull -t apt-cacher-ng .
docker network create usernw
docker run -d --restart&lt;span class="o"&gt;=&lt;/span&gt;always &lt;span class="se"&gt;\&lt;/span&gt;
           --net&lt;span class="o"&gt;=&lt;/span&gt;usernw &lt;span class="se"&gt;\&lt;/span&gt;
           --name apt-cacher &lt;span class="se"&gt;\&lt;/span&gt;
           --hostname apt-cacher &lt;span class="se"&gt;\&lt;/span&gt;
           apt-cacher-ng
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここでわざわざユーザ定義ネットワークを使っているのは
コンテナ名でDNSの名前解決をしたいから。&lt;/p&gt;
&lt;p&gt;そのうちデフォルトのネットワークでもコンテナ名で名前解決
できるようになると思うが，現在は後方互換性を保つために
ユーザ定義ネットワークでないと名前解決できない仕様のようだ。&lt;/p&gt;
&lt;p&gt;デフォルトのネットワークを使いたい！という場合は，hostへ
ポートを露出しておく。そうすればコンテナをlinkしなくても
ホストのIPアドレス（大抵は172.17.0.1）でアクセスできるようになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d --restart&lt;span class="o"&gt;=&lt;/span&gt;always &lt;span class="se"&gt;\&lt;/span&gt;
           -p &lt;span class="m"&gt;3142&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
           --name apt-cacher &lt;span class="se"&gt;\&lt;/span&gt;
           --hostname apt-cacher &lt;span class="se"&gt;\&lt;/span&gt;
           apt-cacher-ng
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dockerfile"&gt;
&lt;h2&gt;Dockerfileの記述&lt;/h2&gt;
&lt;p&gt;これでDockerfileの話を始められる。
Dockerfileのうえから順を追って説明していこう。&lt;/p&gt;
&lt;div class="section" id="url"&gt;
&lt;h3&gt;1. 環境変数によるURLの指定&lt;/h3&gt;
&lt;p&gt;今回は可搬性を意識しているのだから，proxyのURLはbuild-argとして
&lt;tt class="docutils literal"&gt;docker build&lt;/tt&gt; 時に指定できるようにするのが妥当だろう。
そこでARGでURLとポートを指定するようにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ARG &lt;span class="nv"&gt;APTCACHER_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apt-cacher:3142&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだけでは &lt;tt class="docutils literal"&gt;docker run&lt;/tt&gt; した後にこの環境変数が残らない。
build時のproxy設定を使えるようにARGをENVで受ける。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ENV &lt;span class="nv"&gt;APTCACHER_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;APTCACHER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="proxy"&gt;
&lt;h3&gt;2. Proxyの自動検出&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Acquire::http::ProxyAutoDetect&lt;/span&gt;&lt;/tt&gt; をapt.confに記述すれば，aptは
proxyのURLを任意のスクリプトから読み込むようになる。
詳細は &lt;a class="reference external" href="https://askubuntu.com/questions/53443/how-do-i-ignore-a-proxy-if-not-available"&gt;How do I ignore a proxy if not available? - Ask Ubuntu&lt;/a&gt;
が詳しい。&lt;/p&gt;
&lt;p&gt;これを利用して以下のようにDockerfileに記述する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# enable apt cacher auto detection&lt;/span&gt;
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Acquire::http::ProxyAutoDetect &amp;quot;/etc/apt/detect-http-proxy&amp;quot;;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/apt.conf.d/30detectproxy &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#!/bin/bash\ntimeout 1 bash -c &amp;quot;cat &amp;lt; /dev/null &amp;gt; /dev/tcp/${APTCACHER_URL/://}&amp;quot; &amp;amp;&amp;amp; echo http://${APTCACHER_URL} || echo DIRECT&amp;#39;&lt;/span&gt; &amp;gt; /etc/apt/detect-http-proxy &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  chmod +x /etc/apt/detect-http-proxy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここではスクリプトの中身をワンライナーで書いているため読みづらいが，
展開すれば下記のシェルスクリプトになる。&lt;/p&gt;
&lt;p&gt;このスクリプトは &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://${APTCACHER_URL}&lt;/span&gt;&lt;/tt&gt; へ
到達できればURLを返し，到達できなければProxyの不使用を指示する
DIRECTの文字列を返す。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; timeout &lt;span class="m"&gt;1&lt;/span&gt; bash -c &lt;span class="s2"&gt;&amp;quot;cat &amp;lt; /dev/null &amp;gt; /dev/tcp/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;APTCACHER_URL&lt;/span&gt;&lt;span class="p"&gt;/://&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; http://&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;APTCACHER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; DIRECT
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに
&lt;a class="reference external" href="https://askubuntu.com/questions/53443/how-do-i-ignore-a-proxy-if-not-available"&gt;オリジナルのスクリプト&lt;/a&gt;
ではURLへの到達確認にncコマンドを使っていたのだが，
dockerの &lt;tt class="docutils literal"&gt;library/ubuntu&lt;/tt&gt; イメージにncは含まれない。
なので下記のようにbashで接続確認する手法を採用した。
bashならば大抵のapt系Linuxのベースイメージに含まれるだろう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bash -c &lt;span class="s2"&gt;&amp;quot;cat &amp;lt; /dev/null &amp;gt; /dev/tcp/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;APTCACHER_URL&lt;/span&gt;&lt;span class="p"&gt;/://&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この手法に関しては &lt;a class="reference external" href="http://qiita.com/lumbermill/items/2309b4257d3618b8c501"&gt;&amp;quot;nc -z&amp;quot;の代替コマンド - Qiita&lt;/a&gt; とそのリンク先が参考になる。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="docker-build"&gt;
&lt;h3&gt;3. docker build&lt;/h3&gt;
&lt;p&gt;後はお好きに &lt;tt class="docutils literal"&gt;RUN &lt;span class="pre"&gt;apt-get&lt;/span&gt; install&lt;/tt&gt; すれば良いだけ。
ただし，apt-cacher-ngでユーザ定義ネットワークを使っている場合は，
build時に &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--network&lt;/span&gt;&lt;/tt&gt; が必要となる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker build --network usernw -t &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; .
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;Dockerfileのテンプレート&lt;/h2&gt;
&lt;p&gt;ということで，今回は以下のDockerfileのテンプレを作った。
もう少し短く記述したいところだが...許容範囲ということにしておこう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM ubuntu:xenial
MAINTAINER M. Tsuyuki

ARG &lt;span class="nv"&gt;DEBIAN_FRONTEND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;noninteractive
ARG &lt;span class="nv"&gt;APTCACHER_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;apt-cacher:3142&amp;quot;&lt;/span&gt;
ENV &lt;span class="nv"&gt;APTCACHER_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;APTCACHER_URL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;## enable apt cacher auto detection&lt;/span&gt;
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Acquire::http::ProxyAutoDetect &amp;quot;/etc/apt/detect-http-proxy&amp;quot;;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /etc/apt/apt.conf.d/30detectproxy &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#!/bin/bash\ntimeout 1 bash -c &amp;quot;cat &amp;lt; /dev/null &amp;gt; /dev/tcp/${APTCACHER_URL/://}&amp;quot; &amp;amp;&amp;amp; echo http://${APTCACHER_URL} || echo DIRECT&amp;#39;&lt;/span&gt; &amp;gt; /etc/apt/detect-http-proxy &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  chmod +x /etc/apt/detect-http-proxy &lt;span class="se"&gt;\&lt;/span&gt;

&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  apt update &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  apt install -y vim &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  apt clean &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;  rm -rf /var/cache/apt/archives/* /var/lib/apt/lists/*
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="debian-frontend"&gt;
&lt;h3&gt;余談: DEBIAN_FRONTEND&lt;/h3&gt;
&lt;p&gt;ちなみに上記のDockerfileで
ENVではなくARGで &lt;tt class="docutils literal"&gt;DEBIAN_FRONTEND noninteractive&lt;/tt&gt;
の環境変数を指定しているのは， &lt;tt class="docutils literal"&gt;docker run&lt;/tt&gt; した後に
この環境変数を残したくないから。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;docker exec &lt;span class="pre"&gt;-it&lt;/span&gt; ${image} /bin/bash&lt;/tt&gt; してから &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt; install&lt;/tt&gt;
するときに困ることがないようにとの配慮だ。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://askubuntu.com/questions/53443/how-do-i-ignore-a-proxy-if-not-available"&gt;networking - How do I ignore a proxy if not available? - Ask Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://qiita.com/lumbermill/items/2309b4257d3618b8c501"&gt;&amp;quot;nc -z&amp;quot;の代替コマンド - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Linux"></category><category term="Docker"></category><category term="Ubuntu"></category></entry><entry><title>slurmをインストール...したい</title><link href="http://blog.calcurio.com/slurm.html" rel="alternate"></link><published>2017-08-16T22:58:54+09:00</published><updated>2019-05-02T14:10:23+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2017-08-16:/slurm.html</id><summary type="html">&lt;!-- tags: AWS, Blog, CLI, CUI, Cygwin, Docker, EC2, Firefox, Git, Github, HTML, Hardware, Linux, Makefile, Networking, OpenStack, PC自作, Pelican, Preseed, Python, Rally, Screen, TODO, ThinkPad, ThinkPadHelix, Tmux, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, bash, blog, bot, fluentd, git, job, keyboard, math, pelican, percol, python, reStructuredText, screen, ubuntu, vagrant, yoga_tablet2, zabbix, zsh, テスト, 仮想化, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: Hardware, Hardware/ノートPC, IDEA, Software, Software/CUI, blog, hardware, software, Software/Linux, Software/Blog, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;ジョブスケジューラのSlurmを使おうとしたときのメモ。書き途中。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, Blog, CLI, CUI, Cygwin, Docker, EC2, Firefox, Git, Github, HTML, Hardware, Linux, Makefile, Networking, OpenStack, PC自作, Pelican, Preseed, Python, Rally, Screen, TODO, ThinkPad, ThinkPadHelix, Tmux, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, bash, blog, bot, fluentd, git, job, keyboard, math, pelican, percol, python, reStructuredText, screen, ubuntu, vagrant, yoga_tablet2, zabbix, zsh, テスト, 仮想化, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: Hardware, Hardware/ノートPC, IDEA, Software, Software/CUI, blog, hardware, software, Software/Linux, Software/Blog, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;ジョブスケジューラのSlurmを使おうとしたときのメモ。書き途中。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;ジョブスケジューラ&lt;/h2&gt;
&lt;p&gt;OSSで利用可能なHPC向けジョブスケジューラにはSun Microsystemsが源流のSGE系，NASAが源流のPBS系がある。最低限必要な機能は揃っているが，どちらも古臭いように見える。最近はローレンス・リバモア国立研究所が中心のSlurmが有力らしい。Wikipediaによると，Top500のスパコンの約60%はSlurmを採用しているとのこと。&lt;/p&gt;
&lt;p&gt;SGE系は，SunがOracleになってから開発が終了，PBS系のtorqueはプロプラのmoabと組み合わせないとアカウント管理ができない，同じくPBS系のPBSProはOSSになりたて（2017年8月現在）という欠点があったのでSlurmを使ってみることにする。&lt;/p&gt;
&lt;p&gt;なお，Slurmの最大の利点は &lt;a class="reference external" href="https://slurm.schedmd.com/elastic_computing.html"&gt;EC2対応&lt;/a&gt; と思われる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;SGE&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Son of Grid Engine: 過去の資産を活用したいのでなければ，使う価値はなさげ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;PBS&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pbspro: 2016年にOSSになりたて。ドキュメントが少なく積極的に使う理由がない&lt;/li&gt;
&lt;li&gt;torque: アカウント管理が弱い。小さいグループ内だけで使うなら良いが&lt;/li&gt;
&lt;li&gt;torque/maui: mauiはOSSだがほとんど開発終了している&lt;/li&gt;
&lt;li&gt;torque/moab: moabはプロプラなのでライセンス購入？が必要&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Slurm: アカウント管理機能有り。ジョブごとの消費電力計測，GPUやKNLにも対応しており高機能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;環境構築&lt;/h2&gt;
&lt;p&gt;今回は計算ノードを容易に増減できるように，SlurmをDokcer Swarmのサービスとしてデプロイする。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;ジョブ投入&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Slurm_Workload_Manager"&gt;Slurm Workload Manager - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.reddit.com/r/HPC/comments/5go1vr/differencesadvantages_of_slurm_vs_torque/"&gt;Differences/Advantages of SLURM vs. TORQUE? : HPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.ibm.com/developerworks/jp/linux/library/l-slurm-utility/index.html"&gt;SLURM を使用してスーパーコンピューターのリソース管理を最適化する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="ジョブスケジューラ"></category></entry><entry><title>UbuntuにNVENCをインストールしてエンコードしてみる</title><link href="http://blog.calcurio.com/install-nvenc-on-ubunu.html" rel="alternate"></link><published>2017-06-26T03:01:48+09:00</published><updated>2019-05-02T14:12:52+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2017-06-26:/install-nvenc-on-ubunu.html</id><summary type="html">&lt;p&gt;NVENCを使えば，ffmpegによるエンコードをNVIDIAのGPUで加速できる。録画したTSファイルを高速にエンコードシたかったので手順をメモ&lt;/p&gt;
</summary><content type="html">&lt;p&gt;NVENCを使えば，ffmpegによるエンコードをNVIDIAのGPUで加速できる。録画したTSファイルを高速にエンコードシたかったので手順をメモ&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;多分下記の手順で動くはず。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
wget http://www.nasm.us/pub/nasm/releasebuilds/2.13.01/nasm-2.13.01.tar.bz2
tar xjf nasm-2.13.01.tar.bz2
rm -f nasm-2.13.01.tar.bz2

sudo apt-get -y install libtool

wget -O fdk-aac.tar.gz https://github.com/mstorsjo/fdk-aac/tarball/master
tar xzvf fdk-aac.tar.gz
cd mstorsjo-fdk-aac*
autoreconf -fiv
./configure --prefix=&amp;quot;$HOME/ffmpeg_build&amp;quot; --disable-shared
make -j$(nproc)
make -j$(nproc) install
make -j$(nproc) distclean


./configure --pkg-config-flags=&amp;quot;--static&amp;quot; --extra-cflags=&amp;quot;-I$HOME/ffmpeg_build/include&amp;quot; --extra-ldflags=&amp;quot;-L$HOME/ffmpeg_build/lib&amp;quot; --enable-cuda-sdk --enable-cuvid --enable-libnpp --extra-cflags=-I../nv_sdk --extra-ldflags=-L../nv_sdk --extra-cflags=&amp;quot;-I/usr/local/cuda/include/&amp;quot; --extra-ldflags=-L/usr/local/cuda/lib64/ --enable-gpl --enable-libass --enable-libfdk-aac --enable-libx264 --enable-libx265 --enable-nvenc --enable-nonfree


 $ ffmpeg -i ./test.ts -vcodec hevc_nvenc test.mp4

 [hevc_nvenc &amp;#64; 0x3443b60] Driver does not support the required nvenc API version. Required: 8.0 Found: 7.1
 [hevc_nvenc &amp;#64; 0x3443b60] The minimum required Nvidia driver for nvenc is 378.13 or newer
&lt;/pre&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gist.github.com/Brainiarc7/988473b79fd5c8f0db54b92ebb47387a"&gt;This gist will show you how to build a minimalist, statically-linked ffmpeg binary under the ~/bin subdirectory on your home on Ubuntu 16.04LTS.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://devtalk.nvidia.com/default/topic/1008780/-solved-driver-does-not-support-the-required-nvenc-api-version/"&gt;[Solved] Driver does not support the required nvenc API version - NVIDIA Developer Forums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ameblo.jp/oregano-blog/entry-10282015292.html"&gt;linuxにNASMをインストール（アセンブラプログラミング）｜IT忘備録・メモ書きと日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://itjo.jp/pc/nvenc-encode-part2/"&gt;NVEncで超高速エンコードにFFmpegで再挑戦！今度はうまくいった！ - ITジョー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Ubuntu"></category></entry><entry><title>UbuntuにLinux用Dropboxをインストールする</title><link href="http://blog.calcurio.com/install_dropbox_for_linux.html" rel="alternate"></link><published>2017-06-25T14:00:43+09:00</published><updated>2017-06-25T14:25:37+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2017-06-25:/install_dropbox_for_linux.html</id><summary type="html">&lt;p&gt;Ubuntu Server 16.04にDropboxをインストールする。
このサーバにはXをインストールしていない，いわゆるヘッドレスなサーバだ。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Ubuntu Server 16.04にDropboxをインストールする。
このサーバにはXをインストールしていない，いわゆるヘッドレスなサーバだ。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;まずはCLI用dorpboxdをインストールする。
dropboxdを実行すると認証用のURLが表示されるので，アクセスして有効化する。
有効化後はdropboxdをKILLして良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget -O - &lt;span class="s2"&gt;&amp;quot;https://www.dropbox.com/download?plat=lnx.x86_64&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tar xzf -
$ &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.dropbox-dist/dropboxd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に管理用コマンドをdebファイルからインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget -O dropbox.deb &lt;span class="s1"&gt;&amp;#39;https://www.dropbox.com/download?dl=packages/debian/dropbox_2015.10.28_amd64.deb&amp;#39;&lt;/span&gt;
$ sudo dpkg -i dropbox.deb
$ rm -f dropbox.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでdropboxコマンドで管理できるようになる。 &lt;tt class="docutils literal"&gt;dropbox start&lt;/tt&gt; だけはしておこう。
昔はdropbox.pyを使っていた記憶があるが，今はもうdropboxコマンドだけで十分につかえるようだ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ dropbox -h
Dropbox command-line interface

commands:

Note: use dropbox &lt;span class="nb"&gt;help&lt;/span&gt; &amp;lt;command&amp;gt; to view usage &lt;span class="k"&gt;for&lt;/span&gt; a specific command.

 status       get current status of the dropboxd
 throttle     &lt;span class="nb"&gt;set&lt;/span&gt; bandwidth limits &lt;span class="k"&gt;for&lt;/span&gt; Dropbox
 &lt;span class="nb"&gt;help&lt;/span&gt;         provide &lt;span class="nb"&gt;help&lt;/span&gt;
 puburl       get public url of a file in your dropbox&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s public folder
 stop         stop dropboxd
 running      &lt;span class="k"&gt;return&lt;/span&gt; whether dropbox is running
 start        start dropboxd
 filestatus   get current sync status of one or more files
 ls           list directory contents with current sync status
 autostart    automatically start dropbox at login
 exclude      ignores/excludes a directory from syncing
 lansync      enables or disables LAN sync
 sharelink    get a shared link &lt;span class="k"&gt;for&lt;/span&gt; a file in your dropbox
 proxy        &lt;span class="nb"&gt;set&lt;/span&gt; proxy settings &lt;span class="k"&gt;for&lt;/span&gt; Dropbox
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.dropbox.com/ja/install-linux"&gt;インストール - Dropbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.dropbox.com/ja/help/desktop-web/linux-commands"&gt;Dropbox で使用できる Linux コマンドについて – Dropbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Ubuntu"></category></entry><entry><title>SSHトンネル経由でWindowsからリモートのSambaサーバへ接続する方法</title><link href="http://blog.calcurio.com/ssh-tunneling-for-samba.html" rel="alternate"></link><published>2017-06-19T01:43:55+09:00</published><updated>2017-06-19T01:45:53+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2017-06-19:/ssh-tunneling-for-samba.html</id><summary type="html">&lt;p&gt;SSHトンネル経由でリモートのSambaサーバへWindowsから接続した。
手順は以下の参考サイトの通り。&lt;/p&gt;
&lt;p&gt;時間が空いたら詳しく記述する予定。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;SSHトンネル経由でリモートのSambaサーバへWindowsから接続した。
手順は以下の参考サイトの通り。&lt;/p&gt;
&lt;p&gt;時間が空いたら詳しく記述する予定。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://qiita.com/0829/items/cb5659c8e607a6e72e96"&gt;作業メモ:Samba構築してwindows7とMacからssh経由での接続 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.nikhef.nl/%7Ejanjust/CifsOverSSH/VistaLoopback.html"&gt;CIFS-over-SSH for Windows Vista&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Cygwin"></category><category term="Windows"></category></entry><entry><title>Ubuntuでwake-on-lanを有効化する</title><link href="http://blog.calcurio.com/enable-wake-on-lan.html" rel="alternate"></link><published>2017-06-16T15:05:42+09:00</published><updated>2017-06-16T15:30:24+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2017-06-16:/enable-wake-on-lan.html</id><summary type="html">&lt;p&gt;遠隔操作でPCの電源を入れる技術に，wake on lanがある。
これができるとコマンド一発で電源を入れられるので非常に楽だ。&lt;/p&gt;
&lt;p&gt;UbuntuのサーバをWake on Lanで動くように設定したのでメモしておく。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;遠隔操作でPCの電源を入れる技術に，wake on lanがある。
これができるとコマンド一発で電源を入れられるので非常に楽だ。&lt;/p&gt;
&lt;p&gt;UbuntuのサーバをWake on Lanで動くように設定したのでメモしておく。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="bios"&gt;
&lt;h2&gt;1. BIOS設定&lt;/h2&gt;
&lt;p&gt;BIOSの設定の中でWake on Lanを有効化する。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ubuntu"&gt;
&lt;h2&gt;2. ubuntuの設定&lt;/h2&gt;
&lt;p&gt;パッケージインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install ethtool
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;wake on lan を使いたいNICの設定を確認する。
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Wake-on:&lt;/span&gt; d&lt;/tt&gt; となっていればWake on lanが無効化されている証拠。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ethtool enp4s0 &lt;span class="p"&gt;|&lt;/span&gt; grep Wake-on:
        Supports Wake-on: pumbg
        Wake-on: d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有効化するコマンドを打つ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ethtool -s enp4s0 wol g
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再度確認してみる。 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Wake-on:&lt;/span&gt; g&lt;/tt&gt; となっていればOK。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ethtool enp4s0 &lt;span class="p"&gt;|&lt;/span&gt; grep Wake-on:
        Supports Wake-on: pumbg
        Wake-on: g
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;3. 再起動時に自動設定&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;sudo ethtool &lt;span class="pre"&gt;-s&lt;/span&gt; enp4s0 wol g&lt;/tt&gt; だけでは，再起動後にまた無効化されてしまう。
毎回手でコマンドを打つのは面倒なので，Ubuntuの起動時に自動実行されるスクリプトに仕込んでおく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo sh -c &lt;span class="s2"&gt;&amp;quot;echo &amp;#39;#!/bin/bash&lt;/span&gt;
&lt;span class="s2"&gt;ethtool -s enp4s0 wol g&lt;/span&gt;
&lt;span class="s2"&gt;exit&amp;#39; &amp;gt; /etc/init.d/wakeonlan&amp;quot;&lt;/span&gt;

$ sudo chmod +x /etc/init.d/wakeonlan
$ sudo update-rc.d -f wakeonlan defaults
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wake-on-lan"&gt;
&lt;h2&gt;4. Wake on Lanによる起動テスト&lt;/h2&gt;
&lt;p&gt;まずはMACアドレスを確認する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ifconfig enp4s0 &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;NR==1 {print $5}&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;11&lt;/span&gt;:22:33:44:55:66
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして電源を落とす。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo shutdown -h now
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のスクリプトを使い，Wake on Lanのマジックパケットを別のPCから送信する。
PCの電源が入ったら成功。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;Broadcast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;.255.255.255
&lt;span class="nv"&gt;PortNumber&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4000&lt;/span&gt;
&lt;span class="nv"&gt;MAC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;f%.0s&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;..12&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$MAC&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/://g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;%.0s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;..16&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -e &lt;span class="s1"&gt;&amp;#39;s/../\\x&amp;amp;/g&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; nc -w1 -u  &lt;span class="nv"&gt;$Broadcast&lt;/span&gt; &lt;span class="nv"&gt;$PortNumber&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://tukaikta.blog135.fc2.com/blog-entry-202.html"&gt;知ってると便利！遠隔操作でMacやUbuntuを起動させるWakeOnLanの使い方 | Macとかの雑記帳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Ubuntu"></category></entry><entry><title>vagrantとpakcerでシリアルコンソールを有効化したイメージを作成する</title><link href="http://blog.calcurio.com/vagrant-console.html" rel="alternate"></link><published>2017-04-22T22:31:41+09:00</published><updated>2017-06-14T05:53:11+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2017-04-22:/vagrant-console.html</id><summary type="html">&lt;p&gt;いちいちvirshでKVMの仮想マシンを管理したくない。
だからvagrantで楽をしたい。&lt;/p&gt;
&lt;p&gt;でも，仮想マシンのネットワークが壊れたときのために， &lt;cite&gt;virsh console&lt;/cite&gt; でシリアルコンソールの操作はしたい。
vagrant-libvirtのイメージでシリアルコンソール対応のイメージはなさそう。&lt;/p&gt;
&lt;p&gt;自分で作るにしても，vagrantのイメージ作成はめんどくさい。
だからpackerで楽をしたい。&lt;/p&gt;
&lt;p&gt;ということで，packerを使ってシリアルコンソール対応のUbuntuイメージを作成したのでやり方をメモしておく。&lt;/p&gt;
&lt;p&gt;作成したpakcerスクリプトは &lt;a class="reference external" href="https://github.com/tsuyukusa/libvirt-packer-scripts"&gt;tsuyukusa/libvirt-packer-scripts&lt;/a&gt; として公開したので，単に使うだけならば，次のように &lt;tt class="docutils literal"&gt;git clone&lt;/tt&gt; して &lt;tt class="docutils literal"&gt;pakcer build&lt;/tt&gt; すればよい。&lt;/p&gt;
git clone https://github.com/tsuyukusa/libvirt-packer-scripts.git
&lt;span class="nb"&gt;cd&lt;/span&gt; libvirt-packer-scripts/ubuntu-16.04
packer build ubuntu-16.04-minimal.json
&lt;/pre&gt;
</summary><content type="html">&lt;p&gt;いちいちvirshでKVMの仮想マシンを管理したくない。
だからvagrantで楽をしたい。&lt;/p&gt;
&lt;p&gt;でも，仮想マシンのネットワークが壊れたときのために， &lt;cite&gt;virsh console&lt;/cite&gt; でシリアルコンソールの操作はしたい。
vagrant-libvirtのイメージでシリアルコンソール対応のイメージはなさそう。&lt;/p&gt;
&lt;p&gt;自分で作るにしても，vagrantのイメージ作成はめんどくさい。
だからpackerで楽をしたい。&lt;/p&gt;
&lt;p&gt;ということで，packerを使ってシリアルコンソール対応のUbuntuイメージを作成したのでやり方をメモしておく。&lt;/p&gt;
&lt;p&gt;作成したpakcerスクリプトは &lt;a class="reference external" href="https://github.com/tsuyukusa/libvirt-packer-scripts"&gt;tsuyukusa/libvirt-packer-scripts&lt;/a&gt; として公開したので，単に使うだけならば，次のように &lt;tt class="docutils literal"&gt;git clone&lt;/tt&gt; して &lt;tt class="docutils literal"&gt;pakcer build&lt;/tt&gt; すればよい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/tsuyukusa/libvirt-packer-scripts.git
&lt;span class="nb"&gt;cd&lt;/span&gt; libvirt-packer-scripts/ubuntu-16.04
packer build ubuntu-16.04-minimal.json
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Ubuntu Server 16.04&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Vagrant 1.9.3&lt;/li&gt;
&lt;li&gt;vagrant-libvirt 0.0.37&lt;/li&gt;
&lt;li&gt;Packer 1.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;環境構築&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# install kvm&lt;/span&gt;
sudo apt-get install kvm libvirt-bin virtinst bridge-utils

&lt;span class="c1"&gt;# install vagrant&lt;/span&gt;
wget https://releases.hashicorp.com/vagrant/1.9.3/vagrant_1.9.3_x86_64.deb
sudo dpkg -i vagrant_1.9.3_x86_64.deb
rm -f vagrant_1.9.3_x86_64.deb

&lt;span class="c1"&gt;# install vagrant-libvirt&lt;/span&gt;
sudo apt-get install libxslt-dev libxml2-dev libvirt-dev zlib1g-dev
vagrant plugin install vagrant-libvirt

&lt;span class="c1"&gt;# install vagrant-mutate&lt;/span&gt;
vagrant plugin install vagrant-mutate

&lt;span class="c1"&gt;# install packer&lt;/span&gt;
wget https://releases.hashicorp.com/packer/1.0.0/packer_1.0.0_linux_amd64.zip
unzip packer_1.0.0_linux_amd64.zip
sudo mv packer /usr/local/bin/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="packer"&gt;
&lt;h2&gt;packerスクリプトの作成&lt;/h2&gt;
&lt;p&gt;最初に，ベースとするvagrant-libvirt用のpakcerスクリプトをクローンする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/nrclark/libvirt-packer-scripts.git
&lt;span class="nb"&gt;cd&lt;/span&gt; libvirt-packer-scripts.
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;シリアルコンソールを有効化するスクリプトを作る&lt;/h3&gt;
&lt;p&gt;pakcerの仕組みは単純で，ハイパーバイザを起動してスクリプトを実行し，完成したイメージを保存するだけ。
今回はシリアルコンソールを有効化するため，以下の内容で &lt;tt class="docutils literal"&gt;scripts/console.sh&lt;/tt&gt; を作成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh -eux&lt;/span&gt;

&lt;span class="c1"&gt;# Add Console Support to the Ubuntu image&lt;/span&gt;

&lt;span class="nv"&gt;ubuntu_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;`lsb_release -r | awk &amp;#39;{print &lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;}&amp;#39;`&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;ubuntu_major_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;`echo &lt;/span&gt;&lt;span class="nv"&gt;$ubuntu_version&lt;/span&gt;&lt;span class="s2"&gt; | awk -F. &amp;#39;{print &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;}&amp;#39;`&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF &amp;gt;/etc/init/ttyS0.conf&lt;/span&gt;
&lt;span class="s"&gt;start on stopped rc RUNLEVEL=[12345]&lt;/span&gt;
&lt;span class="s"&gt;stop on runlevel [!12345]&lt;/span&gt;

&lt;span class="s"&gt;respawn&lt;/span&gt;
&lt;span class="s"&gt;exec /sbin/getty -L 115200 ttyS0 vt102&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

&lt;span class="nv"&gt;current_line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GRUB_CMDLINE_LINUX=&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;modified_line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GRUB_CMDLINE_LINUX=&amp;quot;console=tty0 console=ttyS0, 115200n8 &amp;quot;&amp;#39;&lt;/span&gt;
sed -i &lt;span class="s2"&gt;&amp;quot;s/^&lt;/span&gt;&lt;span class="nv"&gt;$current_line&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$modified_line&lt;/span&gt;&lt;span class="s2"&gt;/&amp;quot;&lt;/span&gt; /etc/default/grub
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;スクリプトの実行を指定する&lt;/h3&gt;
&lt;p&gt;次に， console.sh を実行するため &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ubuntu-16.04-minimal.json&lt;/span&gt;&lt;/tt&gt; を次のように編集する。
&lt;tt class="docutils literal"&gt;network.sh&lt;/tt&gt; は &lt;tt class="docutils literal"&gt;GRUB_CMD_LINE_LINUX&lt;/tt&gt; の内容を上書きするため，それよりも後に
&lt;tt class="docutils literal"&gt;console.sh&lt;/tt&gt; を記述すること。&lt;/p&gt;
&lt;p&gt;ついでにisoファイルのURLが403になっていたので，修正を加えた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/ubuntu-16.04/ubuntu-16.04-minimal.json b/ubuntu-16.04/ubuntu-16.04-minimal.json&lt;/span&gt;
&lt;span class="gh"&gt;index 733754b..9185a4a 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/ubuntu-16.04/ubuntu-16.04-minimal.json&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/ubuntu-16.04/ubuntu-16.04-minimal.json&lt;/span&gt;
&lt;span class="gu"&gt;@@ -10,8 +10,8 @@&lt;/span&gt;
             &amp;quot;accelerator&amp;quot;: &amp;quot;kvm&amp;quot;,
             &amp;quot;headless&amp;quot;: true,
             &amp;quot;disk_size&amp;quot;: &amp;quot;{{user `disk_size`}}&amp;quot;,
&lt;span class="gd"&gt;-            &amp;quot;iso_url&amp;quot;: &amp;quot;http://releases.ubuntu.com/16.04/ubuntu-16.04-server-amd64.iso&amp;quot;,&lt;/span&gt;
&lt;span class="gd"&gt;-            &amp;quot;iso_checksum&amp;quot;: &amp;quot;23e97cd5d4145d4105fbf29878534049&amp;quot;,&lt;/span&gt;
&lt;span class="gi"&gt;+            &amp;quot;iso_url&amp;quot;: &amp;quot;http://releases.ubuntu.com/16.04/ubuntu-16.04.2-server-amd64.iso&amp;quot;,&lt;/span&gt;
&lt;span class="gi"&gt;+            &amp;quot;iso_checksum&amp;quot;: &amp;quot;2bce60d18248df9980612619ff0b34e6&amp;quot;,&lt;/span&gt;
             &amp;quot;iso_checksum_type&amp;quot;: &amp;quot;md5&amp;quot;,
             &amp;quot;http_directory&amp;quot;: &amp;quot;http&amp;quot;,
             &amp;quot;ssh_username&amp;quot;: &amp;quot;vagrant&amp;quot;,
&lt;span class="gu"&gt;@@ -46,6 +46,7 @@&lt;/span&gt;
                 &amp;quot;scripts/update.sh&amp;quot;,
                 &amp;quot;scripts/vagrant.sh&amp;quot;,
                 &amp;quot;scripts/network.sh&amp;quot;,
&lt;span class="gi"&gt;+                &amp;quot;scripts/console.sh&amp;quot;,&lt;/span&gt;
                 &amp;quot;scripts/shrink.sh&amp;quot;
             ]
         }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;packerでイメージをビルドする&lt;/h2&gt;
&lt;p&gt;packer build ubuntu-16.04-minimal.json&lt;/p&gt;
&lt;p&gt;を実行してしばらく待っていると， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;output/xenial64-minimal-libvirt.box&lt;/span&gt;&lt;/tt&gt; が生成される。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant box add --name xenial64-console output/xenial64-minimal-libvirt.box
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で追加すれば利用できるようになる。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/nrclark/libvirt-packer-scripts"&gt;GitHub - nrclark/libvirt-packer-scripts: Packer scripts for creating Libvirt/KVM boxes for Vagrant.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://linuxsimba.com/packer-vagrant-console"&gt;Add A Serial Console to Packer Generated VMs | Linux Simba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="仮想化"></category><category term="vagrant"></category><category term="ubuntu"></category></entry><entry><title>let's encryptでNginxを常時HTTPS接続にする</title><link href="http://blog.calcurio.com/letsencrypt.html" rel="alternate"></link><published>2017-03-20T19:35:46+09:00</published><updated>2017-03-25T00:29:55+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2017-03-20:/letsencrypt.html</id><summary type="html">&lt;p&gt;遅まきながら，Let's Encryptを証明局にすればSSL/TLS証明書を無料で作成できることを知った。
Nginxで動かしてるWordpressを常時https接続にしてみた。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;遅まきながら，Let's Encryptを証明局にすればSSL/TLS証明書を無料で作成できることを知った。
Nginxで動かしてるWordpressを常時https接続にしてみた。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;p&gt;Ubuntu 16.04&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;証明書の取得&lt;/h2&gt;
&lt;p&gt;証明書の取得・更新は &lt;cite&gt;Certbot&lt;/cite&gt; を使って自動化されている。
&lt;a class="reference external" href="https://certbot.eff.org/#ubuntuxenial-nginx"&gt;公式サイトの手順書&lt;/a&gt; に従うだけで良い。&lt;/p&gt;
&lt;p&gt;パッケージのインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install letsencrypt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;証明書の取得。 &lt;cite&gt;-w&lt;/cite&gt; でドキュメントルートを指定してから， &lt;cite&gt;-d&lt;/cite&gt; で対応するドメインを列挙する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;letsencrypt certonly --webroot -w /var/www/html -d calcurio.com -d gajumaru.ddo.jp -w /var/www/wordpress -d wp.calcurio.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;証明書の期限は90日である。更新は次のコマンドで行える。
期限まで30日以上ある場合は何もしないようになっているので，
cronで毎日これを実行するようにした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;letsencrypt renew
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx"&gt;
&lt;h2&gt;Nginxの設定&lt;/h2&gt;
&lt;p&gt;Nginx側の設定は，&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;httpへの接続をhttpsへ転送する&lt;/li&gt;
&lt;li&gt;httpsの証明書のパスを設定&lt;/li&gt;
&lt;li&gt;その他，細かいチューニング&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を行う。&lt;/p&gt;
&lt;div class="section" id="httphttps"&gt;
&lt;h3&gt;httpへの接続をhttpsへ転送する&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;
server {
    listen       80;
    listen       [::]:80;
    server_name  wp.calcurio.com;
    return 301 https://$host$request_uri;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="https-3"&gt;
&lt;h3&gt;httpsの証明書のパスを設定 + 3. その他，細かいチューニング&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;
server {
    listen       443 ssl http2;
    listen       [::]:443 ssl http2;
    server_name  wp.calcurio.com;
    root /var/www/wordpress;
    index index.php;


    # ssl ###############
    add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains;';
    ssl_certificate /etc/letsencrypt/live/calcurio.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/calcurio.com/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets on;

    ssl_dhparam /etc/ssl/private/dhparam.pem;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_prefer_server_ciphers on;

    # OCCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/calcurio.com/fullchain.pem;
    resolver 8.8.8.8;
    #####################

    location / {
        root /var/www/wordpress;
        index index.php;
    }

    location ~ [^/]\.php(/|$) {
        fastcgi_pass 172.17.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_TRANSLATED $document_root$fastcgi_script_name;
        include fastcgi_params;
        fastcgi_cache_key $host$request_method$request_uri;
    }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://certbot.eff.org/#ubuntuxenial-nginx"&gt;Certbot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Blog"></category><category term="Linux"></category></entry><entry><title>libvirtのqemu hookを利用してインスタンス作成・削除時に通知する</title><link href="http://blog.calcurio.com/libvirt-qemu-hook.html" rel="alternate"></link><published>2017-02-05T14:26:23+09:00</published><updated>2017-04-09T22:25:13+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2017-02-05:/libvirt-qemu-hook.html</id><summary type="html">&lt;p&gt;共有サーバ上でQEMU/KVMのインスタンスが作成・削除されたことを通知したい。
これはlibvirtのhookスクリプトを利用して実現できる。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;共有サーバ上でQEMU/KVMのインスタンスが作成・削除されたことを通知したい。
これはlibvirtのhookスクリプトを利用して実現できる。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;libvirtがイベント発生時に呼び出すhookスクリプトは以下のとおり。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At present, there are five hook scripts that can be called:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/etc/libvirt/hooks/daemon&lt;/p&gt;
&lt;p&gt;Executed when the libvirt daemon is started, stopped, or reloads its configuration&lt;/p&gt;
&lt;p&gt;/etc/libvirt/hooks/qemu&lt;/p&gt;
&lt;p&gt;Executed when a QEMU guest is started, stopped, or migrated&lt;/p&gt;
&lt;p&gt;/etc/libvirt/hooks/lxc&lt;/p&gt;
&lt;p&gt;Executed when an LXC guest is started or stopped&lt;/p&gt;
&lt;p&gt;/etc/libvirt/hooks/libxl&lt;/p&gt;
&lt;p&gt;Executed when a libxl-handled Xen guest is started, stopped, or migrated&lt;/p&gt;
&lt;p&gt;/etc/libvirt/hooks/network&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;今回はqemuのインスタンスなので，hookスクリプトを &lt;cite&gt;/etc/libvirt/hooks/qemu&lt;/cite&gt; に実行権限を付与して保存する。&lt;/p&gt;
&lt;p&gt;..code-block:: sh&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# cat &amp;lt;&amp;lt; EOM &amp;gt; /etc/libvirt/hooks/qemu
#!/bin/bash&lt;/p&gt;
&lt;p&gt;date &amp;gt;&amp;gt; /tmp/log
echo &amp;quot;$&amp;#64;&amp;quot; &amp;gt;&amp;gt; /tmp/log
EOM&lt;/p&gt;
&lt;p&gt;# chmod +x /etc/libvirt/hooks/qemu&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;保存後はlibvirtのdaemonを再起動して有効化する。&lt;/p&gt;
&lt;p&gt;..code-block:: sh&lt;/p&gt;
&lt;blockquote&gt;
# service libvirt-bin restart&lt;/blockquote&gt;
&lt;p&gt;試しにvagrantを使ってqemuのインスタンスを起動し，また停止する。&lt;/p&gt;
&lt;p&gt;..code-block:: sh&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# vagrant up
# vagrant destroy&lt;/p&gt;
&lt;p&gt;# cat /tmp/log&lt;/p&gt;
&lt;p&gt;Sat Feb  4 21:18:22 JST 2017
vagrant_my_vm_name prepare begin -
Sat Feb  4 21:18:23 JST 2017
vagrant_my_vm_name start begin -
Sat Feb  4 21:18:24 JST 2017
vagrant_my_vm_name started begin -
Sat Feb  4 21:18:36 JST 2017
vagrant_my_vm_name stopped end -
Sat Feb  4 21:18:37 JST 2017
vagrant_my_vm_name release end -&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上記のように，domain名を引数としてスクリプトが実行されることが確認できた。
&lt;cite&gt;started begin&lt;/cite&gt; と &lt;cite&gt;stopped end&lt;/cite&gt; が引数にあったときにメールを飛ばすような
スクリプトを作成すれば今回の目的は達成できる。&lt;/p&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://libvirt.org/hooks.html"&gt;libvirt: Hooks for specific system management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="仮想化"></category></entry><entry><title>libvmiで仮想マシン内部のプロセス一覧を取得...できなかった</title><link href="http://blog.calcurio.com/libvmi.html" rel="alternate"></link><published>2017-01-31T20:46:37+09:00</published><updated>2017-02-01T19:50:55+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2017-01-31:/libvmi.html</id><summary type="html">&lt;p&gt;目的: 物理マシンからqemu-kvmで動作する仮想マシンの中で動作するプロセスの一覧を取得する。
VMI (Vritual Machine Introspection) でググると沢山情報がでてくる。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;目的: 物理マシンからqemu-kvmで動作する仮想マシンの中で動作するプロセスの一覧を取得する。
VMI (Vritual Machine Introspection) でググると沢山情報がでてくる。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;libvmiをコンパイルする。
make installをしなくてもサンプルプログラムを実行する分には十分である。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install kvm libtool m4 automake check bison flex libglib2-dev
git clone https://github.com/libvmi/libvmi.git
&lt;span class="nb"&gt;cd&lt;/span&gt; libvmi
./autogen.sh
./configure --enable-xen&lt;span class="o"&gt;=&lt;/span&gt;no
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/include/glib-2.0:/usr/lib/x86_64-linux-gnu/glib-2.0/include:glib-2.0&amp;#39;&lt;/span&gt;
make
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;build libvirt with QMP support&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install libyajl-dev libnl-3-dev libnl-route-3-dev libdevmapper-dev libpciaccess-dev
wget http://libvirt.org/sources/libvirt-3.0.0.tar.xz
xz -d libvirt-3.0.0.tar.xz
tar xf libvirt-3.0.0.tar
&lt;span class="nb"&gt;cd&lt;/span&gt; libvirt-3.0.0
./configure
make
make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;install Virtual Machine&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install kvm virtinst
sudo virt-install &lt;span class="se"&gt;\&lt;/span&gt;
    --name ubuntu &lt;span class="se"&gt;\&lt;/span&gt;
    --ram &lt;span class="m"&gt;2048&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --disk &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ubuntu.img,size&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --vcpus &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --os-type linux &lt;span class="se"&gt;\&lt;/span&gt;
    --os-variant ubuntu16.04 &lt;span class="se"&gt;\&lt;/span&gt;
    --network &lt;span class="nv"&gt;bridge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;virbr0 &lt;span class="se"&gt;\&lt;/span&gt;
    --graphics none &lt;span class="se"&gt;\&lt;/span&gt;
    --console pty,target_type&lt;span class="o"&gt;=&lt;/span&gt;serial &lt;span class="se"&gt;\&lt;/span&gt;
    --location &lt;span class="s1"&gt;&amp;#39;http://jp.archive.ubuntu.com/ubuntu/dists/xenial/main/installer-amd64/&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --extra-args &lt;span class="s1"&gt;&amp;#39;console=ttyS0,115200n8 serial&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;サンプルプログラムの実行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /path/to/libvmi/examples
./vmi-event-example ubuntu
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;カーネルダンプはcrashでみれるはず。
最新版のcrashをコンパイルする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://people.redhat.com/anderson/crash-7.1.7.tar.gz
apt-get install libncurses5-dev
make -j &lt;span class="m"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/libvmi/libvmi"&gt;GitHub - libvmi/libvmi: The official home of the LibVMI project is at https://github.com/libvmi/libvmi.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://libvmi.com/docs/gcode-install.html"&gt;LibVMI Installation Instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="仮想化"></category></entry><entry><title>apschedulerでPythonの関数を非同期実行する</title><link href="http://blog.calcurio.com/apscheduler.html" rel="alternate"></link><published>2016-12-08T00:06:53+09:00</published><updated>2017-04-09T22:26:50+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-12-08:/apscheduler.html</id><summary type="html">&lt;p&gt;Pythonで非同期実行を実現する方法はいくつかある。その中で &lt;a class="reference external" href="https://apscheduler.readthedocs.io/en/latest/index.html"&gt;APScheduler&lt;/a&gt; は学習コストの低さと，ジョブリストを外部DBに記録しておける点で優れている。仮にスケジューラプロセスが異常終了しても，DBからジョブリストを読み出して再開できるわけだ。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Pythonで非同期実行を実現する方法はいくつかある。その中で &lt;a class="reference external" href="https://apscheduler.readthedocs.io/en/latest/index.html"&gt;APScheduler&lt;/a&gt; は学習コストの低さと，ジョブリストを外部DBに記録しておける点で優れている。仮にスケジューラプロセスが異常終了しても，DBからジョブリストを読み出して再開できるわけだ。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install apscheduler
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;サンプルコード&lt;/h2&gt;
&lt;p&gt;DB連携はしてないけど，
以下のように記述しておけば，2秒ごとに最大10個のスレッドを実行できる。
簡単。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#from apscheduler.schedulers.background import BackgroundScheduler&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;apscheduler.schedulers.blocking&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BlockingScheduler&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;job_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#sc = BackgroundScheduler()&lt;/span&gt;
    &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BlockingScheduler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;interval&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_instances&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://apscheduler.readthedocs.io/en/latest/index.html"&gt;Advanced Python Scheduler — APScheduler 3.3.0.post4 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Python"></category></entry><entry><title>jqコマンドで数値のキーをパースする</title><link href="http://blog.calcurio.com/jq-numeric-key.html" rel="alternate"></link><published>2016-11-22T22:42:49+09:00</published><updated>2016-11-22T22:52:37+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-11-22:/jq-numeric-key.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, Screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;jqコマンドはjsonを標準入力から受け付けていろいろやってくれるコマンド。
指定したキーの値を取り出すこともできる。しかし，数値がキーとなっている場合は
ちょっとコツが必要であったのでやり方を記録しておく。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, Screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;jqコマンドはjsonを標準入力から受け付けていろいろやってくれるコマンド。
指定したキーの値を取り出すこともできる。しかし，数値がキーとなっている場合は
ちょっとコツが必要であったのでやり方を記録しておく。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;次のようなJsonテキストをパースして &lt;tt class="docutils literal"&gt;test1&lt;/tt&gt; を取り出したいとする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;test&amp;quot;: {&amp;quot;1&amp;quot;: &amp;quot;test1&amp;quot;, &amp;quot;hoge&amp;quot;: 2}}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;2&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;jq&lt;/tt&gt; コマンドでは &lt;tt class="docutils literal"&gt;.&lt;/tt&gt; でキー名を連結することで値を取り出せる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;test&amp;quot;: {&amp;quot;1&amp;quot;: &amp;quot;test1&amp;quot;, &amp;quot;hoge&amp;quot;: 2}}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.test&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし，数値がキーとなっている場合はエラーとなる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;test&amp;quot;: {&amp;quot;1&amp;quot;: &amp;quot;test1&amp;quot;, &amp;quot;hoge&amp;quot;: 2}}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.test.1&amp;#39;&lt;/span&gt;
jq: error: syntax error, unexpected LITERAL, expecting &lt;span class="nv"&gt;$end&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Unix shell quoting issues?&lt;span class="o"&gt;)&lt;/span&gt; at &amp;lt;top-level&amp;gt;, line &lt;span class="m"&gt;1&lt;/span&gt;:
.test.1
jq: &lt;span class="m"&gt;1&lt;/span&gt; compile error
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この場合， &lt;tt class="docutils literal"&gt;[&amp;quot;1&amp;quot;]&lt;/tt&gt; という形式で指定してやることで数値をキーとして指定できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{&amp;quot;test&amp;quot;: {&amp;quot;1&amp;quot;: &amp;quot;test1&amp;quot;, &amp;quot;hoge&amp;quot;: 2}}&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.test[&amp;quot;1&amp;quot;]&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;test1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上。&lt;/p&gt;
</content><category term="Software"></category><category term="CLI"></category><category term="CUI"></category><category term="Linux"></category></entry><entry><title>pythonでsshtunnelする</title><link href="http://blog.calcurio.com/python-sshtunnel.html" rel="alternate"></link><published>2016-11-21T23:56:32+09:00</published><updated>2016-11-22T00:51:57+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-11-21:/python-sshtunnel.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;SSHトンネリングは便利。便利すぎてpythonから制御したくなることもある。
ということで今回はpythonの &lt;cite&gt;sshtunnel&lt;/cite&gt; パッケージを使ってみた。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;SSHトンネリングは便利。便利すぎてpythonから制御したくなることもある。
ということで今回はpythonの &lt;cite&gt;sshtunnel&lt;/cite&gt; パッケージを使ってみた。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install python3-openssl libssl-dev
$ sudo pip3 install sshtunnel
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;テスト環境構築&lt;/h2&gt;
&lt;p&gt;DockerでプライベートネットワークにWebサーバを立てる。
同時にユーザpiyo，パスワードeggでsshにログインできるようにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run --rm -it ubuntu:14.04 /bin/bash
$ apt update
$ apt install -y nginx openssh-server
$ service nginx start
$ service ssh start

$ useradd piyo
$ &lt;span class="nb"&gt;echo&lt;/span&gt; piyo:egg &lt;span class="p"&gt;|&lt;/span&gt; chpasswd
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="web"&gt;
&lt;h2&gt;テストコード1: Webサーバのトンネリング&lt;/h2&gt;
&lt;p&gt;次のコードを &lt;cite&gt;tunnel.py&lt;/cite&gt; として保存する。
ただし， &lt;cite&gt;172.17.0.3&lt;/cite&gt; はDockerコンテナのIPアドレスだ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sshtunnel&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SSHTunnelForwarder&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SSHTunnelForwarder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;172.17.0.3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;ssh_username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;piyo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ssh_password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;egg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;remote_bind_address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;local_bind_address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してアクセスしてみる。
nginxのWelcomeページが帰ってくるはずだ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 tunnel.py
$ curl localhost:80
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;テストコード2:多段接続&lt;/h2&gt;
&lt;p&gt;次はssh proxyを使って多段接続する。
接続環境は以下を想定する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
localhost -&amp;gt; container2 -&amp;gt; container1
             172.17.0.2  172.17.0.3
              hoge:huga   piyo:egg
&lt;/pre&gt;
&lt;p&gt;次のコードを実行する。
localhost:80 でnginxのWelcomeページが帰ってくる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sshtunnel&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SSHTunnelForwarder&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;paramiko&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SSHTunnelForwarder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;172.17.0.3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;ssh_username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;piyo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ssh_password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;egg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;remote_bind_address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;local_bind_address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;ssh_proxy_enabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ssh_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sshpass -p &amp;#39;huga&amp;#39; ssh -o StrictHostKeyChecking=no hoge@172.17.0.2 nc 172.17.0.3 22&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pahaz/sshtunnel/"&gt;pahaz/sshtunnel: SSH tunnels to remote server.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gist.github.com/tell-k/4943359"&gt;paramikoのProxyCommandのサンプル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Python"></category></entry><entry><title>IBM Bluemixの無料枠でdockerコンテナホスティングサービスを利用する</title><link href="http://blog.calcurio.com/bluemix-docker.html" rel="alternate"></link><published>2016-11-16T22:05:48+09:00</published><updated>2016-11-16T22:06:42+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-11-16:/bluemix-docker.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
</content><category term="Software"></category><category term="Docker"></category></entry><entry><title>dockerfileに引き数を渡してイメージをbuildする</title><link href="http://blog.calcurio.com/arg-in-dockerfile.html" rel="alternate"></link><published>2016-10-17T01:31:18+09:00</published><updated>2016-10-17T01:32:59+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-10-17:/arg-in-dockerfile.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;IPアドレスの指定だけ異なるdockerfileを1つにまとめられないかと思っていたら，
docker buildの引き数を渡すことができるようだ。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://qiita.com/muddydixon/items/15e5fe8f04a0c325eb8e"&gt;Docker ARG がimage量産に便利 - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これは試してみなくては。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;IPアドレスの指定だけ異なるdockerfileを1つにまとめられないかと思っていたら，
docker buildの引き数を渡すことができるようだ。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://qiita.com/muddydixon/items/15e5fe8f04a0c325eb8e"&gt;Docker ARG がimage量産に便利 - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これは試してみなくては。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;試してみたら追記する。&lt;/p&gt;
</content><category term="Software"></category><category term="Docker"></category></entry><entry><title>OVSの仮想ブリッジにIPアドレスを付与する方法</title><link href="http://blog.calcurio.com/assign-ipadress-to-ovs-vswitch.html" rel="alternate"></link><published>2016-10-17T01:16:44+09:00</published><updated>2016-10-17T01:29:34+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-10-17:/assign-ipadress-to-ovs-vswitch.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;物理NICが1つしかないデスクトップPCで，OVSを使ってデスクトップPCと，その上で動作するdockerコンテナ
を同じL2ネットワークに所属させることを考える。&lt;/p&gt;
&lt;p&gt;図示すれば以下の通り。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
物理構成

    router --- eth0:desktop-pc

論理構成

    router [192.168.1.1] --- ovs-bridge -- desktop-pc [192.168.1.2]
                                |
                                +--------- docker-container [192.168.1.3]
&lt;/pre&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;物理NICが1つしかないデスクトップPCで，OVSを使ってデスクトップPCと，その上で動作するdockerコンテナ
を同じL2ネットワークに所属させることを考える。&lt;/p&gt;
&lt;p&gt;図示すれば以下の通り。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
物理構成

    router --- eth0:desktop-pc

論理構成

    router [192.168.1.1] --- ovs-bridge -- desktop-pc [192.168.1.2]
                                |
                                +--------- docker-container [192.168.1.3]
&lt;/pre&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;単純にデスクトップPCで以下の操作を行い，
ovs-bridgeに直接eth0を接続すると
デスクトップPCからはルータへ繋がらなくなる。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo ovs-vsctl add-br ovs-bridge
$ sudo ovs-vsctl add-port eth0
&lt;/pre&gt;
&lt;p&gt;このようなときは，&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo ifconfig ovs-bridge 192.168.1.2
&lt;/pre&gt;
&lt;p&gt;として，IPアドレスをovs-bridgeへ付与することで，
このIPアドレスを使ってデスクトップPCがネットワークへ接続できるようになる。&lt;/p&gt;
&lt;p&gt;ifconfigで行った設定は再起動すると初期化されてしまう。&lt;/p&gt;
&lt;p&gt;これを &lt;cite&gt;/etc/network/interface&lt;/cite&gt; に記述して永続化させる方法もきっとある
と思うが現在調査中だ。&lt;/p&gt;
</content><category term="Software"></category><category term="Ubuntu"></category><category term="Networking"></category></entry><entry><title>dokcerコンテナでDHCPを使ってIPアドレスを割り当てる方法</title><link href="http://blog.calcurio.com/use-dhcp-client-in-docker-container.html" rel="alternate"></link><published>2016-10-17T00:58:54+09:00</published><updated>2016-10-17T01:15:23+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-10-17:/use-dhcp-client-in-docker-container.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;&lt;cite&gt;ovs-docker&lt;/cite&gt; をつかえば，Dockerコンテナをovsの仮想ブリッジへ接続できる。
接続したNICにDHCPでIPアドレスを割り当てる方法をメモ。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;&lt;cite&gt;ovs-docker&lt;/cite&gt; をつかえば，Dockerコンテナをovsの仮想ブリッジへ接続できる。
接続したNICにDHCPでIPアドレスを割り当てる方法をメモ。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;Ubuntu 14.04のDockerコンテナを作成し，DHCPの設定を加える。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ docker run --privileged --net=none --name=dhcpclient -itd ubuntu:14.04 /bin/bash
$ docker exec dhcpclient echo 'auto eth1 \niface eth1 inet dhcp' &amp;gt; /etc/network/interfaces
&lt;/pre&gt;
&lt;p&gt;ovsの仮想ブリッジを作成し，コンテナを接続する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo ovs-vsctl add-br ovs01
$ sudo ovs-docker add-port ovs01 eth1 dhcpclient
&lt;/pre&gt;
&lt;p&gt;念のために設定ファイルを確認する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ docker exec dhcpclient cat /etc/network/interfaces

auto eth1
iface eth1 inet dhcp
&lt;/pre&gt;
&lt;p&gt;ここで，いつもどおりにifupしてもエラーがでてIPアドレスを取得できない。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ docker exec dhcpclient ifup eth1
dhclient: error while loading shared libraries: libc.so.6: cannot open shared object file: Permission denied
Failed to bring up eth1.
&lt;/pre&gt;
&lt;p&gt;理由はわからないが，以下のように操作するとDHCPでIPアドレスが割り当てられる。
原理を理解したいが... よくわからない。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ docker exec dhcpclient mv /sbin/dhclient /usr/sbin/dhclient
$ docker exec dhcpclient /usr/sbin/dhclient eth1
mv: cannot move '/etc/resolv.conf.dhclient-new.29' to '/etc/resolv.conf': Device or resource busy
&lt;/pre&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://unix.stackexchange.com/questions/155990/docker-bridges-dhcp"&gt;Docker + Bridges + DHCP - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Ubuntu"></category><category term="Docker"></category><category term="Networking"></category></entry><entry><title>自宅のルータをlinuxに置き換える計画</title><link href="http://blog.calcurio.com/linux-router-plan.html" rel="alternate"></link><published>2016-10-14T01:21:10+09:00</published><updated>2016-10-17T00:58:19+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-10-14:/linux-router-plan.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;ネットワーキングの勉強を兼ねて，自作のルータを
Linuxで構築したい。どうやったらできるのか，計画をする。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;ネットワーキングの勉強を兼ねて，自作のルータを
Linuxで構築したい。どうやったらできるのか，計画をする。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;
目的:自宅のBuffaloのルータをLinuxサーバで置換する
構成:[インターネット] --- eth0:[linuxルータ]:eth1 --- [LANハブ] --- [自宅PC]
                                    |
                                    +----- :eth2 --- [無線LAN] --- [ノートPC]
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;物理構成&lt;/h2&gt;
&lt;p&gt;ルータ: thinkpad x61
NIC0 (eth0): 組み込みNIC
NIC1 (eth1): cardbusあるいはUSB経由のNIC
NIC2 (eth2): mini pcie接続の無線NIC&lt;/p&gt;
&lt;div class="section" id="eth0"&gt;
&lt;h3&gt;eth0:  インターネット &amp;lt;-&amp;gt; ルータ&lt;/h3&gt;
&lt;p&gt;集合住宅であるので，部屋の壁にあるLANケーブルの穴に
接続するとDHCPでIPアドレスが割り当てられる。&lt;/p&gt;
&lt;p&gt;したがって， eth0は単にDHCPでIPアドレスを取得するだけでよい。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="eth1-lan"&gt;
&lt;h3&gt;eth1:  ルータ &amp;lt;-&amp;gt; 自宅LAN&lt;/h3&gt;
&lt;p&gt;ルータ上ではeth1に固定IPとして 192.168.12.1/24 を割り当てる。
その上で，自宅LANが機能するように&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;ルータにDHCPサーバを立てて， 192.168.12.2-254/24 をリースする&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;ルータにNATを設定して， 192.168.12.2-254/24 からインターネットへ接続できるようにする&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;NATはiptablesの設定で実施&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DHCPサーバとNATはDockerで構築する。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;インターネット側はdokcerのデフォルトbridge設定である docker0 を使う&lt;/li&gt;
&lt;li&gt;LAN側はルータのeth1に直結したブリッジ ovs-vbr1 に接続する&lt;/li&gt;
&lt;li&gt;LAN側からルータに接続できるように，可能であればルータの物理ホストにも192.168.12.0/24のIPアドレスを割り当てたい&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
eth0 -- docker0 -- [DHCP_NAT-docker] -- ovs-vbr1 -- eth1
&lt;/pre&gt;
&lt;p&gt;IPアドレスの割当予定は以下の通り。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
192.168.12.1 : DHCPサーバ,NAT用 dockerコンテナ
192.168.12.2 : ルータ物理ホスト
192.168.12.3-49 : ルータ物理ホスト上のdockerコンテナ(WebサービスやNAS等)
192.168.12.50-99 : DHCPで払い出す。MACに対して固定のIPアドレス
192.168.12.100-254 : DHCPで払い出す。可変のIPアドレス
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="eth2-lan"&gt;
&lt;h3&gt;eth2: 無線LANアクセスポイント&lt;/h3&gt;
&lt;p&gt;eth1と同じ 192.168.12.1/24 をDHCPで配布する。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;付加的な機能&lt;/h2&gt;
&lt;p&gt;せっかくLinuxでルータを立てるのだから，付加的な機能を付けたい。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;DHCPでMACに応じた固定IPアドレスを配布する&lt;/li&gt;
&lt;li&gt;NAS: USBでHDDを接続し，sambaで共有&lt;/li&gt;
&lt;li&gt;sshサーバ&lt;ul&gt;
&lt;li&gt;外部からのアクセスは，EC2のsshポートフォワーディング経由で行う。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Webサーバ (wordpress)&lt;ul&gt;
&lt;li&gt;dockerコンテナとして起動&lt;/li&gt;
&lt;li&gt;外部からのアクセスは，EC2のsshポートフォワーディング経由で行う。&lt;ul&gt;
&lt;li&gt;常にルータからEC2インスタンスへsshを貼る&lt;/li&gt;
&lt;li&gt;独自ドメインのDNSはEC2へ向ける&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNSサーバ (nginxのリバースプロキシかも)&lt;/li&gt;
&lt;li&gt;Mailサーバ&lt;/li&gt;
&lt;li&gt;owncloudサーバ&lt;/li&gt;
&lt;li&gt;webdavサーバ&lt;/li&gt;
&lt;li&gt;vpnサーバ&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;作業予定&lt;/h2&gt;
&lt;ol class="arabic simple" start="0"&gt;
&lt;li&gt;OK: インターネット -- 既存ルータ --- eth0:[linuxルータ]:eth1 -- LANハブ    として接続&lt;/li&gt;
&lt;li&gt;OK: eth0でDHCPクライアント化。既存ルータから 192.168.11.0/24 のIPアドレスを取得する&lt;/li&gt;
&lt;li&gt;OK: eth1でDHCPサーバを立てる。192.168.12.0/24の払い出しを可能にする&lt;/li&gt;
&lt;li&gt;OK: linuxルータ物理マシンとコンテナ &amp;lt;--&amp;gt; 192.168.12.0/24 の物理マシン の疎通を確認&lt;/li&gt;
&lt;li&gt;eth2で無線LANアクセスポイント化&lt;/li&gt;
&lt;li&gt;インターネット -- eth0:[linuxルータ]:eth1 -- LANハブ    として接続。実運用開始&lt;/li&gt;
&lt;li&gt;web,nas,sshサーバを実装&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;課題&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Thinkpad x61を利用すると，ファンの音と消費電力に難がある&lt;ul&gt;
&lt;li&gt;とはいえ他に良いハードウェアがあるわけでもない&lt;/li&gt;
&lt;li&gt;raspberry pi系ではNICもHDDも遅い。ARM系なので仮想化も不十分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;録画サーバも統一したい
- pt3を別途購入する必要がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Networking"></category><category term="Linux"></category><category term="Ubuntu"></category></entry><entry><title>pythonでthreading</title><link href="http://blog.calcurio.com/python-threading.html" rel="alternate"></link><published>2016-10-11T22:32:32+09:00</published><updated>2016-11-22T01:32:59+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-10-11:/python-threading.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;Pythonでコードを非同期実行したかった。
&lt;cite&gt;threading&lt;/cite&gt; モジュールが一番お手軽にこれを実現できるようだ。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;Pythonでコードを非同期実行したかった。
&lt;cite&gt;threading&lt;/cite&gt; モジュールが一番お手軽にこれを実現できるようだ。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;次のコードを実行するとスレッド数は2に抑えながら，現在時刻をUnixtimeで表示する。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;テストコード&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;th&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;max_semaphore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Semaphore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_semaphore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lazy_counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active_count&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lazy_counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;counter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;実行結果&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;
0 3 1479745771
1 3 1479745771
2 3 1479745772
3 3 1479745772
4 3 1479745773
5 3 1479745773
6 3 1479745774
7 3 1479745774
8 3 1479745775
9 3 1479745775
10 3 1479745776
11 3 1479745776
12 3 1479745777
13 3 1479745777
14 3 1479745778
15 3 1479745778
16 3 1479745779
17 3 1479745780
18 3 1479745781
19 2 1479745781
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;参考サイト&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python.jp/2/library/threading.html"&gt;16.2. threading — 高水準のスレッドインタフェース — Python 2.7.x ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ja.pymotw.com/2/threading/"&gt;threading – スレッドによる並列処理を管理する - Python Module of the Week&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Python"></category></entry><entry><title>libvirt+pythonで仮想マシンのリソース消費情報を取得する</title><link href="http://blog.calcurio.com/libvirt.html" rel="alternate"></link><published>2016-10-06T01:34:38+09:00</published><updated>2016-11-22T00:55:43+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-10-06:/libvirt.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;libvirtを使ってpythonからホストとkmvのドメイン情報を取得するスクリプトを作成した。
書きかけだが，ここにメモしておく。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿, 統計 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, theory, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;libvirtを使ってpythonからホストとkmvのドメイン情報を取得するスクリプトを作成した。
書きかけだが，ここにメモしておく。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;libvirt&lt;/span&gt;



&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;host_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;nodeinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;host_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hostname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getHostname&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                 &lt;span class="s1"&gt;&amp;#39;Maximum_support_virtual_CPUs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getMaxVcpus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="s1"&gt;&amp;#39;Model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nodeinfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                 &lt;span class="s1"&gt;&amp;#39;Max_Memory_size_in_MB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nodeinfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                 &lt;span class="s1"&gt;&amp;#39;Number_of_CPUs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nodeinfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                 &lt;span class="s1"&gt;&amp;#39;MHz_of_CPUs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nodeinfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                 &lt;span class="s1"&gt;&amp;#39;Number_of_CPU_sockets&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nodeinfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                 &lt;span class="s1"&gt;&amp;#39;Number_of_CPU_cores_per_socket&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nodeinfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                 &lt;span class="s1"&gt;&amp;#39;Number_of_CPU_threads_per_core&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nodeinfo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                 &lt;span class="s1"&gt;&amp;#39;Free_Memory_in_bytes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFreeMemory&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;

    &lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCPUStats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIR_NODE_CPU_STATS_ALL_CPUS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;host_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CPU_Kernel_time_in_ns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kernel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;host_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CPU_Idle_time_in_ns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;idle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;host_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CPU_User_time_in_ns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;host_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CPU_Iowait_time_in_ns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iowait&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Number_of_CPUs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCPUStats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;host_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CPU&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_Kernel_time_in_ns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kernel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;host_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CPU&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_Idle_time_in_ns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;idle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;host_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CPU&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_User_time_in_ns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;host_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CPU&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_Iowait_time_in_ns&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iowait&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;host_dict&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;domain_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# loop for all domains&lt;/span&gt;
    &lt;span class="n"&gt;domains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listAllDomains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domains&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;domain_dicts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;domains&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;domain_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Domain_Hostname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                           &lt;span class="s1"&gt;&amp;#39;Domain_OS_Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OSType&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                           &lt;span class="s1"&gt;&amp;#39;Domain_UUID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UUIDString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                           &lt;span class="s1"&gt;&amp;#39;Domain_ID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                           &lt;span class="s1"&gt;&amp;#39;Domain_Max_Memory_size_in_MB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxMemory&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                           &lt;span class="s1"&gt;&amp;#39;Domain_Max_Number_of_vCPUs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxVcpus&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                           &lt;span class="s1"&gt;&amp;#39;Domain_Time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
            &lt;span class="c1"&gt;# struct = dom.getTime()&lt;/span&gt;
            &lt;span class="c1"&gt;# timestamp = time.ctime(float(struct[&amp;#39;seconds&amp;#39;]))&lt;/span&gt;
            &lt;span class="c1"&gt;# dom.getCPUStats(False)&lt;/span&gt;
            &lt;span class="c1"&gt;# dom.memoryStats()&lt;/span&gt;
            &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIR_DOMAIN_NOSTATE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;domain_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Domain_State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nostate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIR_DOMAIN_RUNNING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;domain_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Domain_State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIR_DOMAIN_BLOCKED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;domain_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Domain_State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blocked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIR_DOMAIN_PAUSED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;domain_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Domain_State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;paused&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIR_DOMAIN_SHUTDOWN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;domain_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Domain_State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;shutdown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIR_DOMAIN_SHUTOFF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;domain_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Domain_State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;shutoff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIR_DOMAIN_CRASHED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;domain_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Domain_State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;crashed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VIR_DOMAIN_PMSUSPENDED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;domain_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Domain_State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pmsuspended&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;domain_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Domain_State&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unknown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="n"&gt;domain_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Domain_State_Reason_Code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="n"&gt;domain_dicts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;domain_dicts&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aggregate_domains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain_dicts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;states&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;state&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;domain_dicts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;agregate_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Number_of_Domains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain_dicts&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;Number_of_Nostate_Domains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nostate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;Number_of_Running_Domains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;Number_of_Blocked_Domains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blocked&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;Number_of_Paused_Domains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;paused&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;Number_of_Shutdown_Domains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;shutdown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;Number_of_Shutoff_Domains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;shutoff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;Number_of_Crashed_Domains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;crashed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;Number_of_Pmsuspended_Domains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pmsuspended&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;Number_of_Unknown_Domains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;states&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;unknown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;Domain_UUIDs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Domain_UUID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;domain_dicts&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;aggregate_dict&lt;/span&gt;


&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;qemu:///system&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Failed to open connection to qemu:///system&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;host_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;host_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;instance_dicts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;domain_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;instance_dicts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance_dicts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;instance_dicts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read_libvirtxml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance_dicts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Software"></category><category term="Python"></category></entry><entry><title>virt-topコマンドでKVMの仮想マシンの内部CPU使用率をJson形式で出力する</title><link href="http://blog.calcurio.com/virt-top.html" rel="alternate"></link><published>2016-10-01T01:52:40+09:00</published><updated>2016-10-01T02:24:47+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-10-01:/virt-top.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;virt-topコマンドは仮想マシンに対するtopコマンドを提供する。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, fluentd, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 日報, 未分類 --&gt;
&lt;p&gt;virt-topコマンドは仮想マシンに対するtopコマンドを提供する。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;インストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install virt-top
sudo apt install libguestfs-tools
sudo virt-df
sudo virt-top
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;csvからjsonに変換し，加工するためにパッケージをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install csvkit
sudo apt install jq
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;virt-系コマンドはcsv形式の出力に対応している事が多い。
これを扱いやすいようにjson形式に変換する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;virt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;csvjson&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;jq&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.[1]&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Hostname&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xenial&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Time&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;01:12:04&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Arch&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x86_64&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Physical CPUs&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Count&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Running&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Blocked&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Paused&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Shutdown&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Shutoff&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Crashed&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Active&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Inactive&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;%CPU&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.579699165877&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Total hardware memory (KB)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8448556&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Total memory (KB)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2097152&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Total guest memory (KB)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2097152&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Total CPU time (ns)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;70000000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Domain ID&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Domain name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;CPU (ns)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;70000000.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Mem (bytes)&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2097152&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;%Mem&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;24&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Block RDRQ&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Block WRRQ&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Net RXBY&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Net TXBY&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考のために，その他のvirt-系で便利そうなコマンドを列挙する。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;virt-cat : 仮想マシン内部のファイルを表示&lt;/li&gt;
&lt;li&gt;virt-copy-in : 仮想マシンへファイルを書き込む&lt;/li&gt;
&lt;li&gt;virt-copy-out : 仮想マシンからファイルを取り出す&lt;/li&gt;
&lt;li&gt;virt-df : 仮想マシン内部のdfコマンド&lt;/li&gt;
&lt;li&gt;virt-diff : 仮想マシン間のファイルのdiffを取る&lt;/li&gt;
&lt;li&gt;virt-edit : 仮想マシンのファイルを編集する&lt;/li&gt;
&lt;li&gt;virt-filesystems : 仮想マシンのファイルシステムを表示&lt;/li&gt;
&lt;li&gt;virt-log : 仮想マシンのログファイルを表示&lt;/li&gt;
&lt;li&gt;virt-ls : 仮想マシンのログファイルを表示&lt;/li&gt;
&lt;li&gt;virt-inspector : ディスクの内容からOS等の情報を取得する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://people.redhat.com/~rjones/virt-top/faq.html"&gt;Virt-top documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://people.redhat.com/~rjones/virt-top/screenshots.html"&gt;Virt-top screenshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://y0m0r.hateblo.jp/entry/20130929/1380433142"&gt;csvkitでcsvとjsonを相互に変換する - Misc Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://y0m0r.hateblo.jp/entry/20130928/1380378398"&gt;Python製のcsvファイルを処理するためのコマンドラインツール「csvkit」 - Misc Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://think-t.hatenablog.com/entry/20111114/p2"&gt;virt-*** コマンドをいくつか試す - think-t の晴耕雨読&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="CUI"></category><category term="Ubuntu"></category><category term="Linux"></category><category term="OpenStack"></category></entry><entry><title>fluentdにzabbix agentからデータを送る</title><link href="http://blog.calcurio.com/fluentd-zabbix.html" rel="alternate"></link><published>2016-09-27T23:58:43+09:00</published><updated>2016-09-28T00:12:07+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-09-27:/fluentd-zabbix.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;fluentdにzabbix agentから情報を収集するプラグインがあることに気づいてしまった。
Docker上で動作確認をしたのでメモ。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;fluentdにzabbix agentから情報を収集するプラグインがあることに気づいてしまった。
Docker上で動作確認をしたのでメモ。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;ubuntu:xenial&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt; apt update

&lt;span class="c"&gt;# install fluentd&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; apt install vim curl wget sudo -y
&lt;span class="k"&gt;RUN&lt;/span&gt; curl -L https://toolbelt.treasuredata.com/sh/install-ubuntu-xenial-td-agent2.sh &lt;span class="p"&gt;|&lt;/span&gt; sh

&lt;span class="c"&gt;# install zabbix agent&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; apt install libcurl3 -y
&lt;span class="k"&gt;RUN&lt;/span&gt; wget http://repo.zabbix.com/zabbix/3.2/ubuntu/pool/main/z/zabbix/zabbix-agent_3.2.0-1+xenial_amd64.deb
&lt;span class="k"&gt;RUN&lt;/span&gt; dpkg -i zabbix-agent_3.2.0-1+xenial_amd64.deb

&lt;span class="c"&gt;# install fluentd zabbix agent plugin&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; apt install ruby-full gcc make -y
&lt;span class="k"&gt;RUN&lt;/span&gt; /usr/sbin/td-agent-gem install fluent-plugin-zabbix-agent
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;設定&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;/etc/td-agent/td-agent.conf&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;zabbix_agent&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;agent_host&lt;/span&gt; &lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;agent_port&lt;/span&gt; &lt;span class="mi"&gt;10050&lt;/span&gt;
  &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="nx"&gt;zabbix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;item_key_key&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;item_value_key&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;extra&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;bulk&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;allow_items_empty&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;include_hostname&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;hostname_key&lt;/span&gt; &lt;span class="nx"&gt;hostname&lt;/span&gt;
  &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;system.localtime[utc]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;boottime&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/source&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="nx"&gt;zabbix&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;**&amp;gt;&lt;/span&gt;
  &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;
&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="err"&gt;/log/td-agent/zabbix&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/match&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;動作確認&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# tail -f /var/log/td-agent/zabbix.*&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-09-27T14:53:35+00:00       zabbix.item     &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;boottime&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;:1474988015&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-09-27T14:53:40+00:00       zabbix.item     &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;boottime&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;:1474988020&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-09-27T14:53:45+00:00       zabbix.item     &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;boottime&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;:1474988025&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-09-27T14:53:50+00:00       zabbix.item     &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;boottime&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;:1474988030&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-09-27T14:53:55+00:00       zabbix.item     &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;boottime&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;:1474988035&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hivecolor.com/id/37"&gt;fluentdの簡単な使い方、設定方法一覧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/winebarrel/fluent-plugin-zabbix-agent"&gt;winebarrel/fluent-plugin-zabbix-agent: Fluentd input plugin for Zabbix agent.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.fluentd.org/articles/install-by-deb"&gt;Installing Fluentd Using deb Package | Fluentd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.fluentd.org/articles/faq#i-installed-td-agent-and-want-to-add-custom-plugins-how-do-i-do-it"&gt;FAQ | Fluentd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Docker"></category><category term="fluentd"></category><category term="zabbix"></category></entry><entry><title>今日のお勉強</title><link href="http://blog.calcurio.com/r-and-bn.html" rel="alternate"></link><published>2016-09-26T01:20:44+09:00</published><updated>2016-09-27T07:47:31+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-09-26:/r-and-bn.html</id><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vagrant, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://media.accel-brain.com/r-arules-sequences/"&gt;R言語でシーケンシャル・パタン・マイニング（系列パタン・マイニング）を実行する | Welcome to Singularity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://d.hatena.ne.jp/sfchaos/20110630/p1"&gt;Rで系列パターンマイニング - sfchaos blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.bnlearn.com/documentation/networks/"&gt;bnlearn - Reference Bayesian networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://d.hatena.ne.jp/yokkuns/20110928/1317164851"&gt;ネットワーク分析 - ベイジアン・ネットワーク　 - yokkunsの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://logics-of-blue.com/%E5%AD%A3%E7%AF%80%E3%81%A8%E3%83%88%E3%83%AC%E3%83%B3%E3%83%89/"&gt;季節とトレンド | 状態空間モデル | Logics of Blue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Software"></category><category term="機械学習"></category></entry><entry><title>DockerでJupyterを簡単に動作させる</title><link href="http://blog.calcurio.com/2016-09-21-074006.html" rel="alternate"></link><published>2016-09-21T07:40:08+09:00</published><updated>2016-09-21T07:52:49+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-09-21:/2016-09-21-074006.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;DockerでJupyterを動かしたときのメモ&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 機械学習, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;DockerでJupyterを動かしたときのメモ&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;Dockerfile&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM jupyter/datascience-notebook
USER root
RUN apt update
RUN apt install -y jq
RUN pip2 install mpld3
RUN pip3 install mpld3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Makefile&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;build:
    docker build -t myjupyter .
run:
    docker run -d &lt;span class="se"&gt;\&lt;/span&gt;
                -p &lt;span class="m"&gt;8888&lt;/span&gt;:8888 &lt;span class="se"&gt;\&lt;/span&gt;
                -v &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;/notebooks:/home/jovyan/work &lt;span class="se"&gt;\&lt;/span&gt;
                -e &lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                -e &lt;span class="nv"&gt;GRANT_SUDO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes &lt;span class="se"&gt;\&lt;/span&gt;
                --user root &lt;span class="se"&gt;\&lt;/span&gt;
                --name myjupyter &lt;span class="se"&gt;\&lt;/span&gt;
                myjupyter
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Software"></category><category term="Python"></category><category term="Docker"></category></entry><entry><title>VirtualboxのVM上でVagrantとKVMの連携をテストする</title><link href="http://blog.calcurio.com/install-vagrant-kvm.html" rel="alternate"></link><published>2016-08-14T16:58:21+09:00</published><updated>2016-08-14T19:31:14+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-08-14:/install-vagrant-kvm.html</id><summary type="html">&lt;p&gt;Dockerの使い方は覚えたので，今度はVagrantの使い方を覚えて
仮想マシンを手軽に扱えるようになりたい。&lt;/p&gt;
&lt;p&gt;そこで，今回はVirtualboxの仮想マシン上でVagrantとKVMの組み合わせを
テストしてみることにした。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Dockerの使い方は覚えたので，今度はVagrantの使い方を覚えて
仮想マシンを手軽に扱えるようになりたい。&lt;/p&gt;
&lt;p&gt;そこで，今回はVirtualboxの仮想マシン上でVagrantとKVMの組み合わせを
テストしてみることにした。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;p&gt;ホスト：Windows 7 64bit
仮想化：Virtualbox 4.2.20 r90983
ゲスト：Ubuntu 16.04 Xenial&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-kvm"&gt;
&lt;h2&gt;install kvm&lt;/h2&gt;
&lt;p&gt;KVMをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install kvm libvirt-bin virtinst bridge-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-vagrant"&gt;
&lt;h2&gt;install vagrant&lt;/h2&gt;
&lt;p&gt;vagrantを公式サイトからダウンロードしてインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://releases.hashicorp.com/vagrant/1.8.5/vagrant_1.8.5_x86_64.deb
sudo dpkg -i vagrant_1.8.5_x86_64.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-vagrant-libvibrt-plugin"&gt;
&lt;h2&gt;install vagrant-libvibrt plugin&lt;/h2&gt;
&lt;p&gt;vagrant-libvibrtはKVMを操作できるようにするプラグインである。
これをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libxslt-dev libxml2-dev libvirt-dev zlib1g-dev
vagrant plugin install vagrant-libvirt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-vagrant-mutate-plugin"&gt;
&lt;h2&gt;install vagrant-mutate plugin&lt;/h2&gt;
&lt;p&gt;vagrant-mutateはVirtualbox用のBoxファイルを
KVM用に変換してくれるプラグインである。
もともとKMV用に作られているboxファイルは少ないため，これを使う。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant plugin install vagrant-mutate
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="kvmbox"&gt;
&lt;h2&gt;kvm用のboxファイルを作成して起動する&lt;/h2&gt;
&lt;p&gt;Ubuntu14.04 trsutyのboxファイルを用意する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant box add ubuntu14.04 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
vagrant mutate ubuntu14.04 --input-provider virtualbox libvirt
vagrant box list
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# set libvirt as default provider&lt;/span&gt;
&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;VAGRANT_DEFAULT_PROVIDER&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;libvirt&amp;#39;&lt;/span&gt;

&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="ss"&gt;:my_vm_name&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

    &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu14.04&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;#machine.vm.network :public_network, ip: &amp;#39;192.168.48.193&amp;#39;, :dev =&amp;gt; &amp;quot;br0&amp;quot;, :mode =&amp;gt; &amp;#39;bridge&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="ss"&gt;:libvirt&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;
      &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
      &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;qemu&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/vagrant-libvirt/vagrant-libvirt/issues/539"&gt;Can't get fedora 23 working with libvirt · Issue #539 · vagrant-libvirt/vagrant-libvirt&lt;/a&gt;
に書いてあるように，Vagrantfileで &lt;cite&gt;domain.driver = 'qemu'&lt;/cite&gt; としないと
以下のエラーが生じて &lt;tt class="docutils literal"&gt;vagrant up&lt;/tt&gt; できない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Error &lt;span class="k"&gt;while&lt;/span&gt; creating domain: Error saving the server: Call to virDomainDefineXML failed: 無 効な引数: could not find capabilities &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;domaintype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;kvm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは，Virtualboxの下ではkvmによる仮想化支援機能が使えないからである。
他追撃しているかどうかは &lt;cite&gt;kvm-ok&lt;/cite&gt; コマンドで簡単に確認できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo kvm-ok
INFO: Your CPU does not support KVM extensions
KVM acceleration can NOT be used
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;qemuでソフトウェアエミュレーションすることで，
かなり遅くはなるが起動はできるようになるということだ。&lt;/p&gt;
&lt;p&gt;Vagrantfileを作成できたら後は &lt;cite&gt;vagrant up&lt;/cite&gt; するだけ。
&lt;cite&gt;vagrant up --provider=libvirt&lt;/cite&gt; で明示的にプロバイダを指定することもできるが，
Vagrantfile内部で指定しているのでその必要はない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vagrant up
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.lucainvernizzi.net/blog/2014/12/03/vagrant-and-libvirt-kvm-qemu-setting-up-boxes-the-easy-way/"&gt;Luca Invernizzi | Vagrant and libVirt(KVM/Qemu) - Setting up boxes the easy way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/vagrant-libvirt/vagrant-libvirt"&gt;vagrant-libvirt/vagrant-libvirt: Vagrant provider for libvirt.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/vagrant-libvirt/vagrant-libvirt/issues/539"&gt;Can't get fedora 23 working with libvirt · Issue #539 · vagrant-libvirt/vagrant-libvirt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Ubuntu"></category><category term="Linux"></category><category term="Vagrant"></category></entry><entry><title>cygwinでsshdを起動する</title><link href="http://blog.calcurio.com/cygwin-sshd.html" rel="alternate"></link><published>2016-08-12T22:07:52+09:00</published><updated>2016-08-12T22:10:27+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-08-12:/cygwin-sshd.html</id><summary type="html">&lt;p&gt;Cgywin環境下でsshサーバを動作させる方法をメモしておく。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Cgywin環境下でsshサーバを動作させる方法をメモしておく。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;パッケージをインストールして設定し，サービスを起動する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-cyg install cygrunsrv  autossh  openssh
ssh-host-config
net start sshd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはファイアーウォールの設定を変更してポート開放するだけ。&lt;/p&gt;
</content><category term="Software"></category><category term="Cygwin"></category><category term="CUI"></category></entry><entry><title>runCをインストールして，Dockerコンテナのスナップショットを取る</title><link href="http://blog.calcurio.com/install_runC.html" rel="alternate"></link><published>2016-08-12T22:05:29+09:00</published><updated>2016-09-28T00:14:16+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-08-12:/install_runC.html</id><summary type="html">&lt;p&gt;CRIUを使ってコンテナのチェックポイントを作成したい。
ここでは，docker engineではなくruncに統合されているcheckpointサブコマンドを使って
コンテナのチェックポイントを作成する方法を示す。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;CRIUを使ってコンテナのチェックポイントを作成したい。
ここでは，docker engineではなくruncに統合されているcheckpointサブコマンドを使って
コンテナのチェックポイントを作成する方法を示す。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;p&gt;Ubuntu &lt;a class="reference external" href="mailto:16.04&amp;#64;virtualbox"&gt;16.04&amp;#64;virtualbox&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="runc"&gt;
&lt;h2&gt;runCのコンパイルとインストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install golang golang-github-seccomp-libseccomp-golang-dev
git clone https://github.com/opencontainers/runc.git
&lt;span class="nb"&gt;cd&lt;/span&gt; runc
make
make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="docker"&gt;
&lt;h2&gt;dockerのインストール&lt;/h2&gt;
&lt;p&gt;runCの動作確認に使うdockerをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install docker.io
usermod -aG docker ubuntu
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;runCの動作確認&lt;/h2&gt;
&lt;p&gt;runCのコンテナを作成して動作させる。
以下の例では， &lt;tt class="docutils literal"&gt;ubuntu:14.04&lt;/tt&gt; の &lt;tt class="docutils literal"&gt;sh&lt;/tt&gt; が動作する。
なお， &lt;tt class="docutils literal"&gt;&amp;lt;CONTAINERID&amp;gt;&lt;/tt&gt; は適当な数字でよい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/ubuntu/rootfs
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/ubuntu
docker &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;docker create ubuntu:14.04&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tar -C rootfs -xvf -
runc spec
sudo runc run &amp;lt;CONTAINERID&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="criucheckpoint"&gt;
&lt;h2&gt;CRIUでcheckpointを取る&lt;/h2&gt;
&lt;p&gt;CRIUをインストールする。
ここではaptでCRIU Ver2.0をインストールした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install criu
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次にチェックポイントの動作確認のため，config.jsonを書き換える。
CRIUでチェックポイントを取るには以下の設定が必須である。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;readonly&amp;quot;&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;process&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;terminal&amp;quot;&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;チェックポイントの動作確認用にカウントアップを指定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
               &lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;,
               &lt;span class="s2"&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;,
               &lt;span class="s2"&gt;&amp;quot; for i in `seq 1 10000` ; do echo &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt; ; sleep 1s ; done&amp;quot;&lt;/span&gt;
       &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際にチェックポイント・リストアを確認する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo runc run &amp;lt;CONTAINERID&amp;gt;

&lt;span class="c1"&gt;# 別のシェルで&lt;/span&gt;
sudo runc checkpoint &amp;lt;CONTAINERID&amp;gt;
sudo runc restore &amp;lt;CONTAINERID&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;カウントアップが再開されれば，めでたく終了である。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;参考サイト&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/opencontainers/runc"&gt;opencontainers/runc: runc container cli tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://qiita.com/syoyo/items/c8ef01113e972ceb7647"&gt;runC で aobench を動かす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://fstn.hateblo.jp/entry/2015/08/01/231302"&gt;runCをひと通り使ってみた - log.fstn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Docker"></category><category term="Ubuntu"></category><category term="Linux"></category><category term="CUI"></category></entry><entry><title>Ubuntuへのgensimのinstall</title><link href="http://blog.calcurio.com/gensim-install.html" rel="alternate"></link><published>2016-08-09T00:02:25+09:00</published><updated>2016-08-09T01:06:04+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-08-09:/gensim-install.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;2年ぐらい前に話題になった &lt;tt class="docutils literal"&gt;word2vec&lt;/tt&gt; はpythonのパッケージ &lt;tt class="docutils literal"&gt;gensim&lt;/tt&gt; から利用できるようだ。
とりあえずインストールして動作させてみるところまでやったのでメモしておく。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, bot, CLI, CUI, Cygwin, Docker, EC2, Firefox, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, Tmux, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;2年ぐらい前に話題になった &lt;tt class="docutils literal"&gt;word2vec&lt;/tt&gt; はpythonのパッケージ &lt;tt class="docutils literal"&gt;gensim&lt;/tt&gt; から利用できるようだ。
とりあえずインストールして動作させてみるところまでやったのでメモしておく。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;p&gt;Ubuntu 14.04&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install gfortan  libblas-dev liblapack-dev python3-dev python3-pip
pip3 install numy scipy
pip3 install gensim
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;高速化のためのoption&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install cython
apt-get install ipython3
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;動作確認&lt;/h2&gt;
&lt;p&gt;テストデータを用意する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/gensim/linux-man
cp /usr/local/share/man*/* ~/gensim/linux-man
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/gensim/linux-man
gunzip *
&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="sb"&gt;`&lt;/span&gt;ls&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; man &lt;span class="nv"&gt;$i&lt;/span&gt; &amp;gt;&amp;gt; ../data.txt &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gensimで連想させてみる。
ちょっとそれっぽい結果がでてきた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;gensim.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;word2vec&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word2vec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text8Corpus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word2vec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Word2Vec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_similar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6987332701683044&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6851752400398254&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;query&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6693227291107178&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ref&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.666474461555481&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DNS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.657109260559082&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;proxy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6469401121139526&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6330630779266357&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6281474828720093&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LDAP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6277490258216858&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6260156035423279&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;単語の引き算もしてみよう。
私からvimを取り除くとどうなるか。
performanceがimproveするらしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_similar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;me&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;negative&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;performance&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5619370341300964&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;improve&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.525520384311676&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nonportable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5212193727493286&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;problem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5203309059143066&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;we&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4995456337928772&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.49954187870025635&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;impossible&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4874926805496216&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;problems&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4870745837688446&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.48381394147872925&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;completely&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.4764089286327362&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;私からemacsを取り除くとどうなるか。
performanceにproblemが生じるらしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_similar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;positive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;me&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;negative&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;emacs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;problems&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6155756115913391&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;problem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.6104066371917725&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;performance&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.609570324420929&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;people&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5899459719657898&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nonportable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5552759766578674&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;software&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5306791067123413&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;easily&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5256898999214172&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;problems,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5255173444747925&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sometimes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5150910019874573&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;I&amp;#39;ve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5115109086036682&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;つまり，word2vecは私にvimを捨ててemacsを伴侶とせよと言っているのか。
これは信用ならないライブラリだ。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Python"></category><category term="Ubuntu"></category><category term="機械学習"></category></entry><entry><title>HubotをインストールしてRocketChatで動作させる</title><link href="http://blog.calcurio.com/install-hubot.html" rel="alternate"></link><published>2016-08-05T21:46:33+09:00</published><updated>2016-08-08T06:42:35+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-08-05:/install-hubot.html</id><summary type="html">&lt;p&gt;はやりのbotopsを目指してHubotの使い方を覚えてみる。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;はやりのbotopsを目指してHubotの使い方を覚えてみる。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;p&gt;Amazon EC2
Ubuntu Server 14.04 LTS&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hubot"&gt;
&lt;h2&gt;Hubotのインストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install npm -y
npm install -g yo generator-hubot
mkdir myhubot
&lt;span class="nb"&gt;cd&lt;/span&gt; myhubot
yo hubot --owner&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OWNER &amp;lt;owner@example.com&amp;gt;&amp;quot;&lt;/span&gt; --name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mybot&amp;quot;&lt;/span&gt; --description&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my Bot&amp;quot;&lt;/span&gt; --adapter&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rocketchat&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;参考サイト&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hubot.github.com/docs/"&gt;HUBOT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Ubuntu"></category><category term="bot"></category></entry><entry><title>CRIUを使ってDockerのsnapshotを取る</title><link href="http://blog.calcurio.com/Docker-snapshot.html" rel="alternate"></link><published>2016-08-05T20:18:30+09:00</published><updated>2016-08-12T22:02:57+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-08-05:/Docker-snapshot.html</id><summary type="html">&lt;p&gt;&lt;tt class="docutils literal"&gt;CRIU&lt;/tt&gt; はプロセスのスナップショットを取れるツールであり，
これを使えばDockerのコンテナのスナップショットも取れるという。&lt;/p&gt;
&lt;p&gt;スナップショット機能を使えば起動後のコンテナの状態をイメージ化して保存できるため，
コンテナの起動時間短縮や，ライブマイグレーションに役立つ。&lt;/p&gt;
&lt;p&gt;この記事では &lt;tt class="docutils literal"&gt;CRIU&lt;/tt&gt; を統合した開発版Dockerをコンパイルして
&lt;tt class="docutils literal"&gt;docker snapshot&lt;/tt&gt; サブコマンドを使えるようにすることを目指す。
現時点では成功していないが，近いところまでは来ている。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;tt class="docutils literal"&gt;CRIU&lt;/tt&gt; はプロセスのスナップショットを取れるツールであり，
これを使えばDockerのコンテナのスナップショットも取れるという。&lt;/p&gt;
&lt;p&gt;スナップショット機能を使えば起動後のコンテナの状態をイメージ化して保存できるため，
コンテナの起動時間短縮や，ライブマイグレーションに役立つ。&lt;/p&gt;
&lt;p&gt;この記事では &lt;tt class="docutils literal"&gt;CRIU&lt;/tt&gt; を統合した開発版Dockerをコンパイルして
&lt;tt class="docutils literal"&gt;docker snapshot&lt;/tt&gt; サブコマンドを使えるようにすることを目指す。
現時点では成功していないが，近いところまでは来ている。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;p&gt;Amazon EC2
Ubuntu Server 14.04 LTS
Kernel 3.11&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="criu"&gt;
&lt;h2&gt;CRIUのインストール&lt;/h2&gt;
&lt;p&gt;Ubuntu 14.04(trusty)ではapt-getでcriuをインストールできない。
そこでソースからコンパイルする。
ちなみに，Ubuntu 16.04(xenial)ならapt-getでcriuをインストールでるので，xenialを使うほうが楽。&lt;/p&gt;
&lt;p&gt;まずはCRIUが必要とする機能を有効にして，カーネルを再コンパイルする。
詳細は下記サイトを参照すること。
&lt;a class="reference external" href="http://kimh.github.io/blog/jp/criu/experiment-to-suspend-and-resume-docker-container-with-criu-jp/"&gt;CRIUを使ってDockerコンテナの停止/再開に挑戦 | kim hirokuni&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -s
apt-get -y install libncurses-dev build-essential libncurses-dev build-essential fakeroot kernel-package linux-source bc libssl-dev
&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/src/linux-source-&amp;lt;kernel version&amp;gt;
tar xvjf linux-source-&amp;lt;kernel version&amp;gt;.tar.bz2
&lt;span class="nb"&gt;cd&lt;/span&gt; ./linux-source-&amp;lt;kernel version&amp;gt;
curl https://gist.githubusercontent.com/kimh/c93f42981d14a33c63c0/raw/a73af0f7f745c2538253ef153a62a8ba1a2d97be/.config -o .config
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LC_CTYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C
make-kpkg clean
&lt;span class="nv"&gt;CONCURRENCY_LEVEL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; make-kpkg --rootcmd fakeroot --initrd --revision&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;date +%Y%m%d&lt;span class="sb"&gt;`&lt;/span&gt; kernel_image kernel_headers
&lt;span class="nb"&gt;cd&lt;/span&gt; ../
dpkg -i linux-headers-&amp;lt;kernel version&amp;gt;_amd64.deb
dpkg -i linux-image-&amp;lt;kernel version&amp;gt;_amd64.deb
reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CRIUをコンパイルしてインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://download.openvz.org/criu/criu-2.4.tar.bz2 &lt;span class="p"&gt;|&lt;/span&gt; tar -jxf-
&lt;span class="nb"&gt;cd&lt;/span&gt; criu
sudo apt-get install -y bsdmainutils build-essential linux-headers-generic libprotobuf-dev libprotobuf-c0-dev protobuf-c-compiler protobuf-compiler python-protobuf libnl-3-dev libcap-dev asciidoc
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;CRIUの動作確認&lt;/h2&gt;
&lt;p&gt;criuには動作確認用にcheckサブコマンドがある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo criu check --all
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;checkすると以下のように細かいエラーは出るが，Looks good と表示されれば動作には十分である。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Info  prctl: PR_SET_MM_MAP_SIZE is not supported
Warn  &lt;span class="o"&gt;(&lt;/span&gt;cr-check.c:227&lt;span class="o"&gt;)&lt;/span&gt;: prctl: PR_SET_MM_MAP_SIZE is not supported
Error &lt;span class="o"&gt;(&lt;/span&gt;cr-check.c:640&lt;span class="o"&gt;)&lt;/span&gt;: Kernel doesn&lt;span class="s1"&gt;&amp;#39;t support PTRACE_O_SUSPEND_SECCOMP&lt;/span&gt;
&lt;span class="s1"&gt;Error (cr-check.c:684): Dumping seccomp filters not supported: Input/output error&lt;/span&gt;
&lt;span class="s1"&gt;Error (timerfd.c:52): timerfd: No timerfd support for c/r: Inappropriate ioctl for device&lt;/span&gt;
&lt;span class="s1"&gt;Error (cr-check.c:318): fdinfo doesn&amp;#39;&lt;/span&gt;t contain the mnt_id field
Error &lt;span class="o"&gt;(&lt;/span&gt;cr-check.c:782&lt;span class="o"&gt;)&lt;/span&gt;: AIO remap doesn&lt;span class="s1"&gt;&amp;#39;t work properly: Invalid argument&lt;/span&gt;
&lt;span class="s1"&gt;Error (cr-check.c:795): fdinfo doesn&amp;#39;&lt;/span&gt;t contain the lock field
Error &lt;span class="o"&gt;(&lt;/span&gt;cr-check.c:913&lt;span class="o"&gt;)&lt;/span&gt;: cgroupns not supported. This is not fatal.
Error &lt;span class="o"&gt;(&lt;/span&gt;cr-check.c:846&lt;span class="o"&gt;)&lt;/span&gt;: autofs not supported.
Looks good but some kernel features are missing
which, depending on your process tree, may cause
dump or restore failure.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試しに適当なプロセスのsnapshot作成とrestoreを行ってみる。
まずは適当にカウントアップするシェルスクリプトを作成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/tmp/test
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/tmp/test
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;for i in `seq 1 1000` ; do echo $i ; sleep 1s ; done &amp;#39;&lt;/span&gt; &amp;gt; test.sh
bash test.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;snapshotを作成する。lsしてみるといろいろなファイルが作成されていることがわかる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;pgrep -f &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
sudo criu dump -t &lt;span class="nv"&gt;$PID&lt;/span&gt; --images-dir ~/tmp/test --shell-job
ls
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;作成したsnapshotから再開してみる。
先ほど中断した値からカウントアップが始まれば成功だ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo criu restore -t &lt;span class="nv"&gt;$PID&lt;/span&gt; --images-dir ~/tmp/test  --shell-job
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="docker"&gt;
&lt;h2&gt;dockerのインストール&lt;/h2&gt;
&lt;p&gt;開発版Dockerはコンテナ内でコンパイルするようになっている。
まずはコンパイル用にDockerをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo wget -qO- https://get.docker.com/ &lt;span class="p"&gt;|&lt;/span&gt; sh
sudo usermod -aG docker ubuntu
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;開発版Dockerのコンパイル&lt;/h2&gt;
&lt;p&gt;開発版Dockerをgithubからダウンロードしてコンパイルする。
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;docker-checkpoint-restore&lt;/span&gt;&lt;/tt&gt; ブランチがCRIUの統合されたコードである。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install git make golang lvm2 -y
git clone https://github.com/boucher/docker.git
&lt;span class="nb"&gt;cd&lt;/span&gt; docker
git checkout docker-checkpoint-restore
sed -i &lt;span class="s1"&gt;&amp;#39;s/DOCKER_EXPERIMENTAL/DOCKER_EXPERIMENTAL=1/&amp;#39;&lt;/span&gt; Makefile
make all
sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;開発版Dockerのインストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;AUTO_GOPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
sudo -E make install
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- sudo apt-get purge docker.io --&gt;
&lt;/div&gt;
&lt;div class="section" id="docker-snapshot"&gt;
&lt;h2&gt;Docker snapshotの動作確認&lt;/h2&gt;
&lt;p&gt;dockerのdaemonを起動する。
devicemapperが動作しない場合は，aufsを使う。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service docker stop
sudo /usr/local/bin/dockerd -s aufs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;違うシェルでコンテナを実行する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run --security-opt seccomp:unconfined --name counter ubuntu:14.04 /bin/bash -c &lt;span class="s1"&gt;&amp;#39;for i in `seq 0 10000`; do echo $i ; sleep 1 ; done&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;違うシェルでスナップショットの作成と起動を試す。
私の環境では &lt;tt class="docutils literal"&gt;criu&lt;/tt&gt; のエラーでcheckpointの作成がうまくいかない。
解決できたら追記する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker checkpoint create counter counter_checkpoint
docker start --checkpoint counter_checkpoint counter2
docker attach counter2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;参考サイト&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://qiita.com/kimh/items/7d95db0c53f4efdf1945"&gt;CRIUを使ってDockerコンテナのCR (一時停止/再開)をしてみる (コンテナのマイグレーションもあり) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://kimh.github.io/blog/jp/criu/experiment-to-suspend-and-resume-docker-container-with-criu-jp/"&gt;CRIUを使ってDockerコンテナの停止/再開に挑戦 | kim hirokuni&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://criu.org/Installation#Kernel_configuration"&gt;Installation - CRIU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://criu.org/Docker"&gt;Docker - CRIU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.docker.com/v1.5/contributing/devenvironment/"&gt;Development environment - Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/docker/docker/issues/18946"&gt;seccomp: config provided but seccomp not supported. · Issue #18946 · docker/docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.docker.com/engine/reference/commandline/dockerd/"&gt;dockerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://oyvindsk.com/writing/docker-build-from-source"&gt;How-to build Docker from source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.docker.com/v1.5/contributing/devenvironment/"&gt;Development environment - Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://fstn.hateblo.jp/entry/2015/08/01/231302"&gt;runCをひと通り使ってみた - log.fstn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Docker"></category><category term="Ubuntu"></category><category term="Linux"></category><category term="CUI"></category><category term="AWS"></category></entry><entry><title>最新版tmuxをコンパイルしてpaneごとににpaneタイトルを表示する</title><link href="http://blog.calcurio.com/tmux-compile.html" rel="alternate"></link><published>2016-07-28T03:11:52+09:00</published><updated>2016-08-08T06:43:36+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-07-28:/tmux-compile.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, Blog, CLI, CUI, Cygwin, Docker, EC2, Firefox, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;Tmuxの開発版ではGNU Screenのようにpaneのタイトルをpaneの最下部に表示できる。
コンパイルして有効化する方法を書いておく。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, Blog, CLI, CUI, Cygwin, Docker, EC2, Firefox, git, Git, Github, Hardware, HTML, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;Tmuxの開発版ではGNU Screenのようにpaneのタイトルをpaneの最下部に表示できる。
コンパイルして有効化する方法を書いておく。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;依存関係の解決&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://github.com/libevent/libevent/releases/download/release-2.0.22-stable/libevent-2.0.22-stable.tar.gz
tar zxf libevent-2.0.22-stable.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; libevent-2.0.22-stable
./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr
make
make install
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-cyg install libncurses-devel ncurses
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tmux"&gt;
&lt;h2&gt;Tmuxのコンパイル&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/tmux/tmux.git
apt-cyg install automake
sh autogen.sh
./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr &lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-D_GNU_SOURCE&amp;#39;&lt;/span&gt;
make
make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;Tmuxの動作確認&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pane下部にstatus lineを表示する設定&lt;/span&gt;
tmux &lt;span class="nb"&gt;set&lt;/span&gt; -g pane-border-status bottom
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- tmux list-windows -F '#{window_name}' -a --&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gist.github.com/zlalanne/8188248"&gt;tmux on Cygwin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://proglab.blog.fc2.com/blog-entry-45.html"&gt;Cygwin と MSYS2 環境で tmux のコンパイルが失敗する - はまったり、はまらなかったりする日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Tmux"></category><category term="CUI"></category><category term="Ubuntu"></category><category term="Cygwin"></category></entry><entry><title>Adblock PlusでHTML要素を消すフィルタを簡単に追加する方法</title><link href="http://blog.calcurio.com/adblock-element.html" rel="alternate"></link><published>2016-07-28T00:57:01+09:00</published><updated>2016-07-28T01:06:35+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-07-28:/adblock-element.html</id><summary type="html">&lt;p&gt;マニュアル &lt;a class="reference external" href="https://adblockplus.org/filters#elemhide"&gt;Writing Adblock Plus filters&lt;/a&gt; に従えば，
Adblock Plusのフィルタリングルールは自分で定義できる。&lt;/p&gt;
&lt;p&gt;例えば，HTMLのタグもID指定やアトリビュートを指摘して削除できる。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;マニュアル &lt;a class="reference external" href="https://adblockplus.org/filters#elemhide"&gt;Writing Adblock Plus filters&lt;/a&gt; に従えば，
Adblock Plusのフィルタリングルールは自分で定義できる。&lt;/p&gt;
&lt;p&gt;例えば，HTMLのタグもID指定やアトリビュートを指摘して削除できる。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;ここで，Firefoxの右クリック -&amp;gt; Inspect Element で呼び出せるDeveloper Tools
を使えば，HTMLタグを右クリックして Copy Unique Selector を選択するだけで
特定のタグを削除するフィルタとして使える文字列をクリップボードへコピーできる。&lt;/p&gt;
&lt;p&gt;あとはAdblock Plusにコピペするだけでフィルタを作成できる。
非常に楽。&lt;/p&gt;
</content><category term="Software"></category><category term="HTML"></category><category term="Firefox"></category></entry><entry><title>Githubで管理されているコードをブログへ埋め込む</title><link href="http://blog.calcurio.com/gist-embed-code.html" rel="alternate"></link><published>2016-07-27T02:09:38+09:00</published><updated>2016-07-27T02:45:11+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-07-27:/gist-embed-code.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, CLI, CUI, Cygwin, Docker, EC2, Firefox, git, Github, Hardware, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;良くブログにコードを埋め込むが，時間とともにそのコードのバージョンが古くなることがある。
場合によっては書いた当時のまま残ってくれたほうが良い場合もあるのだろうが，
最新版の変更を反映させるのも面倒だ。&lt;/p&gt;
&lt;p&gt;そこで，Githubでバージョン管理されているコードをブログへ埋め込む方法を検討した。
方法は2つあり，Gistか，gist-itという外部サービスを利用できる。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, CLI, CUI, Cygwin, Docker, EC2, Firefox, git, Github, Hardware, job, keyboard, Linux, Makefile, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;良くブログにコードを埋め込むが，時間とともにそのコードのバージョンが古くなることがある。
場合によっては書いた当時のまま残ってくれたほうが良い場合もあるのだろうが，
最新版の変更を反映させるのも面倒だ。&lt;/p&gt;
&lt;p&gt;そこで，Githubでバージョン管理されているコードをブログへ埋め込む方法を検討した。
方法は2つあり，Gistか，gist-itという外部サービスを利用できる。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="gist"&gt;
&lt;h2&gt;Gistを使う&lt;/h2&gt;
&lt;p&gt;Gistならば，公式でJavascirptのコードを配布しているため下記のようなコード1行で埋め込める。ちなみに埋め込んだコード自体は &lt;a class="reference external" href="http://blog.calcurio.com/awscli-makefile.html"&gt;awscliを使って楽にEC2へSSHできるMakefileを書いてみた | 電脳手帳&lt;/a&gt; で書いたMakefileだ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://gist.github.com/tsuyukusa/72f18c85cb80a57f7058df05300de803.js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;script src="https://gist.github.com/tsuyukusa/72f18c85cb80a57f7058df05300de803.js"&gt;&lt;/script&gt;&lt;p&gt;もし横幅等のスタイルを改変しようと思ったら，CSSで指定すればいいだろう。
HTMLのタグ等の情報は直接 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://gist.github.com/tsuyukusa/72f18c85cb80a57f7058df05300de803.js&lt;/span&gt;&lt;/tt&gt; を開いてみればわかる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;document.write(&amp;#39;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://assets-cdn.github.com/assets/gist-embed-ff99cd9ef334f32a3abd8cb08a3fe7caaae2a9a365b37fb0b498799afc3a8867.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&amp;#39;)
document.write(&amp;#39;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;\&amp;quot;gist38190916\&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;\&amp;quot;gist\&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;\&amp;quot;gist-file\&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;\n      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;\&amp;quot;gist-data\&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;\&amp;quot;js-gist-file-update-container&lt;/span&gt; &lt;span class="na"&gt;js-task-list-container&lt;/span&gt; &lt;span class="na"&gt;file-box&lt;/span&gt;&lt;span class="err"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;\n
....以下略
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gist-it"&gt;
&lt;h2&gt;gist-itを使う&lt;/h2&gt;
&lt;p&gt;GistではなくGithubのファイルを参照するには， &lt;a class="reference external" href="http://gist-it.appspot.com"&gt;gist-itというサービス&lt;/a&gt; を使えば良いようだ。&lt;/p&gt;
&lt;p&gt;使い方は簡単で， &lt;tt class="docutils literal"&gt;&amp;lt;script &lt;span class="pre"&gt;src=&amp;quot;http://gist-it.appspot.com/http://github.com/$file&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/tt&gt; というコードを埋め込むだけ。&lt;/p&gt;
&lt;script src="http://gist-it.appspot.com/http://github.com/tsuyukusa/aws-tools/blob/master/Makefile"&gt;&lt;/script&gt;&lt;p&gt;その他のオプションについては以下のサイトがわかりやすい。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://taturou.hatenablog.com/entry/2015/06/26/gist-it%E3%81%A7github%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AB%E5%9F%8B%E3%82%81%E8%BE%BC%E3%82%80"&gt;gist-itでgithubのコードをブログに埋め込む - T time&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ちなみにgist-itのサーバサイドのコードはGithubで公開されている。
外部サービスの永続性に不安があるなら自分でホストできるだろう。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/robertkrimen/gist-it"&gt;robertkrimen/gist-it: An AppEngine app to embed files from a github repository like a gist&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Git"></category><category term="Blog"></category></entry><entry><title>awscliを使って楽にEC2へSSHできるMakefileを書いてみた</title><link href="http://blog.calcurio.com/awscli-makefile.html" rel="alternate"></link><published>2016-07-27T01:47:12+09:00</published><updated>2016-07-28T00:31:11+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-07-27:/awscli-makefile.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, CUI, Cygwin, Docker, EC2, Firefox, git, Github, Hardware, job, keyboard, Linux, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;AWSをコマンドiで操作する &lt;tt class="docutils literal"&gt;awscli&lt;/tt&gt; というものがあるらしい。
その使い方の練習を兼ねて，EC2でインスタンスを簡単に起動，停止，ssh接続できる &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; を作成した。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, CUI, Cygwin, Docker, EC2, Firefox, git, Github, Hardware, job, keyboard, Linux, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;AWSをコマンドiで操作する &lt;tt class="docutils literal"&gt;awscli&lt;/tt&gt; というものがあるらしい。
その使い方の練習を兼ねて，EC2でインスタンスを簡単に起動，停止，ssh接続できる &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; を作成した。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;まずはインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install awscli
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に認証等を設定する。設定に必要なアクセスキー等の情報はAWSでユーザアカウント管理を担っているIAMサービスで登録したユーザの情報を使う。
IAMは無料サービスなので気兼ねなく登録できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aws configure
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;動作確認も兼ねて，EC2のインスタンス情報を取得してみよう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aws ec2 describe-instances
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に &lt;tt class="docutils literal"&gt;インスタンス起動 &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; ssh接続 &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; インスタンス停止&lt;/tt&gt; までの操作を楽できるように
Makefileに落とし込む。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;INSTANCE-ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;YOUR EC2 INSTANCE ID&amp;gt;
&lt;span class="nv"&gt;IDENTITYFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/.ssh/aws-ec2.pem
&lt;span class="nv"&gt;SSH-USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ubuntu
&lt;span class="nv"&gt;OPEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cygstart
&lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10080&lt;/span&gt;
&lt;span class="nv"&gt;protocol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http

&lt;span class="c"&gt;# show infomation of the instance&lt;/span&gt;
&lt;span class="nf"&gt;describe&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @aws ec2 describe-instances --output table --instance-ids &lt;span class="k"&gt;$(&lt;/span&gt;INSTANCE-ID&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# start the instance&lt;/span&gt;
&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    -aws ec2 start-instances --output text --instance-ids &lt;span class="k"&gt;$(&lt;/span&gt;INSTANCE-ID&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# stop the instance&lt;/span&gt;
&lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    -aws ec2 stop-instances --output text --instance-ids &lt;span class="k"&gt;$(&lt;/span&gt;INSTANCE-ID&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# wait and print current status until the instance running&lt;/span&gt;
&lt;span class="nf"&gt;wait-start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @while :&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;STATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;aws ec2 describe-instances --output text --instance-ids &lt;span class="k"&gt;$(&lt;/span&gt;INSTANCE-ID&lt;span class="k"&gt;)&lt;/span&gt; --query &lt;span class="s2"&gt;&amp;quot;Reservations[0].Instances[0].State.Name&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$$STATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;running&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$$&lt;/span&gt;STATE &lt;span class="p"&gt;;&lt;/span&gt; sleep 2s&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="c"&gt;#wait-start:&lt;/span&gt;
&lt;span class="c"&gt;#   aws ec2 wait instance-status-ok --instance-ids $(INSTANCE-ID)&lt;/span&gt;

&lt;span class="c"&gt;# ssh connection&lt;/span&gt;
&lt;span class="nf"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;-&lt;span class="n"&gt;start&lt;/span&gt;
    ssh -i &lt;span class="k"&gt;$(&lt;/span&gt;IDENTITYFILE&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;SSH-USER&lt;span class="k"&gt;)&lt;/span&gt;@&lt;span class="sb"&gt;`&lt;/span&gt;aws ec2 describe-instances --output text --instance-ids &lt;span class="k"&gt;$(&lt;/span&gt;INSTANCE-ID&lt;span class="k"&gt;)&lt;/span&gt; --query &lt;span class="s2"&gt;&amp;quot;Reservations[0].Instances[0].PublicDnsName&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c"&gt;# update .ssh/config for ssh, scp, etc.&lt;/span&gt;
&lt;span class="nf"&gt;update-ssh-config&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nv"&gt;DNSNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;aws ec2 describe-instances --output text --instance-ids &lt;span class="k"&gt;$(&lt;/span&gt;INSTANCE-ID&lt;span class="k"&gt;)&lt;/span&gt; --query &lt;span class="s2"&gt;&amp;quot;Reservations[0].Instances[0].PublicDnsName&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; sed -i &lt;span class="s2"&gt;&amp;quot;s/Hostname ec2.*.compute.amazonaws.com\$&lt;/span&gt;$&lt;span class="s2"&gt;/Hostname &lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;DNSNAME/&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$$&lt;/span&gt;HOME/.ssh/config

&lt;span class="c"&gt;# show Public DNS name&lt;/span&gt;
&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    @aws ec2 describe-instances --output text --instance-ids &lt;span class="k"&gt;$(&lt;/span&gt;INSTANCE-ID&lt;span class="k"&gt;)&lt;/span&gt; --query &lt;span class="s2"&gt;&amp;quot;Reservations[0].Instances[0].PublicDnsName&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# open web site in local browser&lt;/span&gt;
&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;OPEN&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;protocol&lt;span class="k"&gt;)&lt;/span&gt;://&lt;span class="sb"&gt;`&lt;/span&gt;aws ec2 describe-instances --output text --instance-ids &lt;span class="k"&gt;$(&lt;/span&gt;INSTANCE-ID&lt;span class="k"&gt;)&lt;/span&gt; --query &lt;span class="s2"&gt;&amp;quot;Reservations[0].Instances[0].PublicDnsName&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;:&lt;span class="k"&gt;$(&lt;/span&gt;port&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今更だけど &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; よりも &lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt; やら &lt;tt class="docutils literal"&gt;.zshrc&lt;/tt&gt; で定義するシェル関数にしたほうが便利だったかな。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;参考サイト&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://aws.amazon.com/jp/documentation/cli/"&gt;AWS コマンドラインインターフェイスのドキュメント| AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dev.classmethod.jp/cloud/aws/aws-cli-filter-and-query-howto/"&gt;AWS CLIのフィルターとクエリーの使い方についてまとめてみた ｜ Developers.IO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="AWS"></category><category term="EC2"></category><category term="Makefile"></category><category term="CLI"></category><category term="Cygwin"></category><category term="Linux"></category></entry><entry><title>cygwinでwatchコマンドはprocpsパッケージでインストールする</title><link href="http://blog.calcurio.com/cygwin-procps.html" rel="alternate"></link><published>2016-07-27T01:00:26+09:00</published><updated>2016-07-27T01:15:24+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-07-27:/cygwin-procps.html</id><summary type="html">&lt;!-- tags: AWS, bash, blog, CUI, Cygwin, Docker, EC2, Firefox, git, Github, Hardware, job, keyboard, Linux, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;Cygwinでは最初からWtachコマンドは実装されていない。
これをインストールするためには，procpsパッケージをインストールする。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: AWS, bash, blog, CUI, Cygwin, Docker, EC2, Firefox, git, Github, Hardware, job, keyboard, Linux, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;Cygwinでは最初からWtachコマンドは実装されていない。
これをインストールするためには，procpsパッケージをインストールする。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-cyg install procps
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://sourceforge.net/projects/procps/"&gt;procps&lt;/a&gt; はLinuxにおける &lt;tt class="docutils literal"&gt;/proc&lt;/tt&gt; 以下を利用するコマンドをまとめたパッケージである。実際に &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-cyg&lt;/span&gt; install procps&lt;/tt&gt; でインストールされるのは &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;procps-ng&lt;/span&gt;&lt;/tt&gt; パッケージであり，以下のコマンドが含まれる。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
free pidof pmap procps tload uptime w pgrep pkill prockill pwdx top vmstat watch
&lt;/pre&gt;
</content><category term="Software"></category><category term="Cygwin"></category><category term="CUI"></category><category term="Windows"></category></entry><entry><title>EC2の無料枠にこだわるならば，Elastic IPを使う意味はない</title><link href="http://blog.calcurio.com/aws-cost-elastic-ip.html" rel="alternate"></link><published>2016-07-26T22:36:35+09:00</published><updated>2016-07-26T23:34:41+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-07-26:/aws-cost-elastic-ip.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Docker, Firefox, git, Github, Hardware, job, keyboard, Linux, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;AmazonのAWSは，新規登録から一年間無料期間がある。
無料枠を越えないように気をつけながら試用を初めてみたが，
いきなり無料枠を越えてしまったのでメモ。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Docker, Firefox, git, Github, Hardware, job, keyboard, Linux, math, Networking, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;AmazonのAWSは，新規登録から一年間無料期間がある。
無料枠を越えないように気をつけながら試用を初めてみたが，
いきなり無料枠を越えてしまったのでメモ。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;タイトルにあるとおり，原因はElastic IPにある。
Elastic IPは，再起動するたびに変化するEC2のインスタンスのIPアドレスを
固定するために，手動でインスタンスに割り当てるIPアドレスである。&lt;/p&gt;
&lt;p&gt;ちょっと違うかもしれないけど，OpenStackの場合は
Floating IPが対応する概念になるだろうか。&lt;/p&gt;
&lt;p&gt;Elastic IPアドレスは取得したままインスタンスに
割り当てない，すなわちIPアドレスを無駄に確保したままにすると
その時間に応じて課金される。&lt;/p&gt;
&lt;p&gt;これは割り当てたインスタンスをシャットダウンした場合も
該当する。したがって，インスタンスを停止したら
同時にElastic IPも開放しなければならないという罠があったのだ。&lt;/p&gt;
&lt;p&gt;頻繁にElastic IPを開放すれば，当然
頻繁にIPアドレスが変化する。
無料枠でつかう限りは，
インスタンスにElastic IPを
割り当てる意味がないということになる。&lt;/p&gt;
</content><category term="Software"></category><category term="AWS"></category><category term="EC2"></category><category term="Linux"></category></entry><entry><title>sshのport forwarding機能を使って公開されていないポートへアクセスする</title><link href="http://blog.calcurio.com/ssh_port_forwarding.html" rel="alternate"></link><published>2016-07-24T17:57:36+09:00</published><updated>2016-07-24T18:39:53+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-07-24:/ssh_port_forwarding.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Docker, Firefox, git, Github, Hardware, job, keyboard, Linux, math, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;外部ネットワークのPC &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;client-pc&lt;/span&gt;&lt;/tt&gt; からプライベートLANの中のサーバ &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; へのアクセスは，踏み台サーバ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ssh-gateway&lt;/span&gt;&lt;/tt&gt; を経由したSSH接続しか許可されていないというのはよくあるシチュエーション。&lt;/p&gt;
note-pc  --ssh--&amp;gt; ssh-gateway  --ssh--&amp;gt; target
&lt;/pre&gt;
&lt;p&gt;そんな状況下で，一時的にWebサーバを立てるため， &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; のポートを外に露出させたくなるのも良くあること。
これにsshのポートフォワーディングで対応する方法をメモしておく。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Docker, Firefox, git, Github, Hardware, job, keyboard, Linux, math, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;外部ネットワークのPC &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;client-pc&lt;/span&gt;&lt;/tt&gt; からプライベートLANの中のサーバ &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; へのアクセスは，踏み台サーバ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ssh-gateway&lt;/span&gt;&lt;/tt&gt; を経由したSSH接続しか許可されていないというのはよくあるシチュエーション。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;note-pc  --ssh--&amp;gt; ssh-gateway  --ssh--&amp;gt; target
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そんな状況下で，一時的にWebサーバを立てるため， &lt;tt class="docutils literal"&gt;target&lt;/tt&gt; のポートを外に露出させたくなるのも良くあること。
これにsshのポートフォワーディングで対応する方法をメモしておく。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;target&lt;/tt&gt; の8000番ポートを &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;note-pc&lt;/span&gt;&lt;/tt&gt; の80番ポートからアクセスできるようにするには
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;note-pc&lt;/span&gt;&lt;/tt&gt; から以下のオプションでssh接続する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -R &lt;span class="m"&gt;80&lt;/span&gt;:target:8000 user@ssh-gateway
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のオプションでは， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;note-pc&lt;/span&gt;&lt;/tt&gt; からのlocalhost:80へのアクセスのみtarget:8000へ転送される。
他のPCからnote-pc:80へのアクセスも転送するには &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-g&lt;/span&gt;&lt;/tt&gt; オプションを付加してssh接続する。&lt;/p&gt;
&lt;p&gt;実用を考えると，バックグラウンドで実行するためのオプションを幾つかつけて，以下のコマンドが有用だろう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -t -f -N -g -R &lt;span class="m"&gt;80&lt;/span&gt;:target:8000 user@ssh-gateway
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;余談だが，動作確認のためにwgetを使うときは， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-O&lt;/span&gt; -&lt;/tt&gt; オプションを付けて標準出力へ吐き出すようにすると便利。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://notepc:80 -O -
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Software"></category><category term="Linux"></category><category term="CUI"></category><category term="Ubuntu"></category><category term="Networking"></category></entry><entry><title>bashでpythonの if __name__ == '__main__': っぽいことをする方法</title><link href="http://blog.calcurio.com/bash_if_main.html" rel="alternate"></link><published>2016-07-24T17:45:29+09:00</published><updated>2016-07-24T18:31:47+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-07-24:/bash_if_main.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Docker, Firefox, git, Github, Hardware, job, keyboard, Linux, math, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;pythonならば，スクリプトを直接実行にのみ実行するコードは&lt;/p&gt;

&lt;/pre&gt;
&lt;p&gt;の後に記述すれば良い。ここに書かれたコードはimportされた場合には実行されないようにできる。&lt;/p&gt;
&lt;p&gt;同様にシェルスクリプトで，すなわちbashで &lt;tt class="docutils literal"&gt;source&lt;/tt&gt; した場合には実行されないようにする方法を調べたのでメモ。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Docker, Firefox, git, Github, Hardware, job, keyboard, Linux, math, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;pythonならば，スクリプトを直接実行にのみ実行するコードは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;の後に記述すれば良い。ここに書かれたコードはimportされた場合には実行されないようにできる。&lt;/p&gt;
&lt;p&gt;同様にシェルスクリプトで，すなわちbashで &lt;tt class="docutils literal"&gt;source&lt;/tt&gt; した場合には実行されないようにする方法を調べたのでメモ。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;bashでは， &lt;tt class="docutils literal"&gt;if __name__ == '__main__':&lt;/tt&gt; の代わりに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[0]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を記述しておくと， &lt;tt class="docutils literal"&gt;source&lt;/tt&gt; しても後の行は実行されなくなる。&lt;/p&gt;
&lt;p&gt;テストするために以下のサンプルシェルスクリプト &lt;tt class="docutils literal"&gt;test.sh&lt;/tt&gt; を作成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; something_good&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;function something_good(){&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;${BASH_SOURCE} =&amp;#39;&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$0 =&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;before&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;${BASH_SOURCE} =&amp;#39;&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$0 =&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;

&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[0]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;after&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;${BASH_SOURCE} =&amp;#39;&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$0 =&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行例を以下に示す。確かに， &lt;tt class="docutils literal"&gt;[[ ${0} != &lt;span class="pre"&gt;&amp;quot;${BASH_SOURCE[0]}&amp;quot;&lt;/span&gt; ]] &amp;amp;&amp;amp; return 0&lt;/tt&gt; 以下の行は &lt;tt class="docutils literal"&gt;source&lt;/tt&gt; 時には実行されていないことがわかる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# bash test.sh&lt;/span&gt;
before
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; test.sh
&lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; test.sh
after
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; test.sh
&lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; test.sh

&lt;span class="c1"&gt;# source test.sh&lt;/span&gt;
before
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; test.sh

&lt;span class="c1"&gt;# something_good&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; something_good&lt;span class="o"&gt;(){&lt;/span&gt;
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; something_good

&lt;span class="c1"&gt;# ./test.sh&lt;/span&gt;
before
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ./test.sh
&lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ./test.sh
after
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ./test.sh
&lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ./test.sh

&lt;span class="c1"&gt;# . ./test.sh&lt;/span&gt;
before
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; ./test.sh
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Software"></category><category term="bash"></category><category term="CUI"></category></entry><entry><title>Dockerの操作をMakefileで楽にする</title><link href="http://blog.calcurio.com/docker-make.html" rel="alternate"></link><published>2016-07-19T07:43:02+09:00</published><updated>2016-07-24T18:35:50+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-07-19:/docker-make.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Docker, Firefox, git, Github, Hardware, job, keyboard, Linux, math, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;コンテナのシェルに入るためにいちいち &lt;tt class="docutils literal"&gt;docker ps&lt;/tt&gt; して &lt;tt class="docutils literal"&gt;docker exec &lt;span class="pre"&gt;-it&lt;/span&gt; hoge /bin/bash&lt;/tt&gt; を打つのに疲れてきた。
定形作業は &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; に書いて自動化することにした。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; を以下に示す。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Docker, Firefox, git, Github, Hardware, job, keyboard, Linux, math, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zabbix, zsh, テスト, 原稿 --&gt;
&lt;!-- category: blog, Hardware/ノートPC, IDEA, software, Software, Software/Blog, Software/CUI, Software/Linux, 原稿, 未分類 --&gt;
&lt;p&gt;コンテナのシェルに入るためにいちいち &lt;tt class="docutils literal"&gt;docker ps&lt;/tt&gt; して &lt;tt class="docutils literal"&gt;docker exec &lt;span class="pre"&gt;-it&lt;/span&gt; hoge /bin/bash&lt;/tt&gt; を打つのに疲れてきた。
定形作業は &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; に書いて自動化することにした。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; を以下に示す。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;IMAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hoge-image
&lt;span class="nv"&gt;CONTAINER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hoge

&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        docker build -t &lt;span class="k"&gt;$(&lt;/span&gt;IMAGE&lt;span class="k"&gt;)&lt;/span&gt; .
&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        docker run -it &lt;span class="se"&gt;\&lt;/span&gt;
                -v &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;/mountpoint:/backup &lt;span class="se"&gt;\&lt;/span&gt;
                -p &lt;span class="m"&gt;8888&lt;/span&gt;:8888 &lt;span class="se"&gt;\&lt;/span&gt;
                --name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CONTAINER&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                &lt;span class="k"&gt;$(&lt;/span&gt;IMAGE&lt;span class="k"&gt;)&lt;/span&gt; /bin/bash
&lt;span class="nf"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it &lt;span class="k"&gt;$(&lt;/span&gt;CONTAINER&lt;span class="k"&gt;)&lt;/span&gt; /bin/bash
&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt;
        docker rmi &lt;span class="k"&gt;$(&lt;/span&gt;IMAGE&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;rm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        docker rm -f &lt;span class="k"&gt;$(&lt;/span&gt;CONTAINER&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;rerun&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;
&lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        docker stop &lt;span class="k"&gt;$(&lt;/span&gt;CONTAINER&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        docker start &lt;span class="k"&gt;$(&lt;/span&gt;CONTAINER&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;runの引き数をちゃんと書いておくと，デバッグも簡単になる。
以前はシェルスクリプト化して行っていたが，makeのほうが断然扱いやすい。&lt;/p&gt;
</content><category term="Software"></category><category term="Docker"></category><category term="Linux"></category><category term="Ubuntu"></category></entry><entry><title>Github Pagesを独自のサブドメインで公開する</title><link href="http://blog.calcurio.com/github-pages-subdomain.html" rel="alternate"></link><published>2016-06-25T20:12:54+09:00</published><updated>2016-06-25T20:53:02+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-06-25:/github-pages-subdomain.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Docker, Firefox, git, Hardware, keyboard, Linux, math, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh, テスト --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux, 未分類 --&gt;
&lt;p&gt;以前，
&lt;a class="reference external" href="http://blog.calcurio.com/pelican-github-pages.html"&gt;ブログをgithub pagesに移行した | 電脳手帳&lt;/a&gt;
で書いたように，このブログはGithub Pagesでホストされている。
しかし，過去に自作サーバで公開していたときのURL &lt;tt class="docutils literal"&gt;calcurio.com/blog&lt;/tt&gt; を保持するために，
Apacheのリバースプロキシを使っていたため，URL解決は自宅サーバに依存する形になっていた。&lt;/p&gt;
&lt;p&gt;Github Pagesだけでホストするように，サブドメイン &lt;tt class="docutils literal"&gt;blog.calcurio.com&lt;/tt&gt; を割り当てることにする。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Docker, Firefox, git, Hardware, keyboard, Linux, math, OpenStack, PC自作, pelican, Pelican, percol, Preseed, python, Rally, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh, テスト --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux, 未分類 --&gt;
&lt;p&gt;以前，
&lt;a class="reference external" href="http://blog.calcurio.com/pelican-github-pages.html"&gt;ブログをgithub pagesに移行した | 電脳手帳&lt;/a&gt;
で書いたように，このブログはGithub Pagesでホストされている。
しかし，過去に自作サーバで公開していたときのURL &lt;tt class="docutils literal"&gt;calcurio.com/blog&lt;/tt&gt; を保持するために，
Apacheのリバースプロキシを使っていたため，URL解決は自宅サーバに依存する形になっていた。&lt;/p&gt;
&lt;p&gt;Github Pagesだけでホストするように，サブドメイン &lt;tt class="docutils literal"&gt;blog.calcurio.com&lt;/tt&gt; を割り当てることにする。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="valuedomain-dns"&gt;
&lt;h2&gt;Valuedomain: DNSの設定&lt;/h2&gt;
&lt;p&gt;独自ドメイン &lt;tt class="docutils literal"&gt;calcurio.com&lt;/tt&gt; はValuedomainから取得している。
サブドメインをGithub PagesのURL &lt;tt class="docutils literal"&gt;tsuyukusa.github.io&lt;/tt&gt; へ向けるDNS設定を行う。&lt;/p&gt;
&lt;p&gt;ValuedomainのWebサイトから以下のようにDNS設定を記述した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cname blog tsuyukusa.github.io.
a * 125.15.58.237
a @ 125.15.58.237
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回追記した &lt;tt class="docutils literal"&gt;cname blog tsuyukusa.github.io.&lt;/tt&gt; はCNAME設定であり，外部URLをサブドメインとして
エイリアス設定するようなもの。次の行の
&lt;tt class="docutils literal"&gt;a * 125.15.58.237&lt;/tt&gt; は &lt;tt class="docutils literal"&gt;calcurio.com&lt;/tt&gt; に対するすべてのサブドメインを自宅サーバへ向ける設定である。
これはCNAMEの記述よりも下にないと，CNAMEを上書きしてしまうので注意すること。
最後の &lt;tt class="docutils literal"&gt;a &amp;#64; 125.15.58.237&lt;/tt&gt; はサブドメインの無い &lt;tt class="docutils literal"&gt;calcurio.com&lt;/tt&gt; を自宅サーバへ向ける設定。&lt;/p&gt;
&lt;p&gt;数十分もすれば変更が反映される。しばらく待つ。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="github-pages-cname"&gt;
&lt;h2&gt;Github Pages: CNAMEファイルの設置&lt;/h2&gt;
&lt;p&gt;DNS設定が浸透したら，Github Pages側にも設定する。
一番上のディレクトリに CNAME という名前のファイルを作成する。
CNAMEファイルの中身は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog.calcurio.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とサブドメインの名前だけを記述すれば良い。&lt;/p&gt;
&lt;p&gt;Pelicanでこのようなファイルを生成するには，以前行った &lt;a class="reference external" href="http://blog.calcurio.com/pelican-robots.html"&gt;robot.txtの生成&lt;/a&gt;
と全く同じ考え方でできる。そちらを参照していただきたい。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;以上の設定で， &lt;tt class="docutils literal"&gt;blog.calcurio.com&lt;/tt&gt; でこのブログを公開できるようになった。
SEO的な意味でURL変更は怖かったのだが，どうやらCNAMEファイルの指定により，
Github Pagesへのアクセスを自動的に &lt;tt class="docutils literal"&gt;blog.calcurio.com&lt;/tt&gt; へリダイレクトできるようである。&lt;/p&gt;
&lt;p&gt;HTMLの
&lt;a class="reference external" href="http://blog.calcurio.com/pelican-github-pages.html"&gt;rel=&amp;quot;canonical&amp;quot;&lt;/a&gt;
を使って &lt;tt class="docutils literal"&gt;blog.calcurio.com&lt;/tt&gt; を正しいURLと指定しておいたし，多分大丈夫だろう。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="blog"></category><category term="Pelican"></category><category term="Github"></category></entry><entry><title>OpenStack(DevStack)をRallyでベンチマークする</title><link href="http://blog.calcurio.com/rally-openstack.html" rel="alternate"></link><published>2016-06-20T20:27:48+09:00</published><updated>2016-06-21T01:05:09+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-06-20:/rally-openstack.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Docker, Firefox, git, Hardware, keyboard, Linux, math, PC自作, pelican, Pelican, percol, Preseed, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux, 未分類 --&gt;
&lt;p&gt;OpenStack環境のテスト・ベンチマークツールとしてRallyがある。
今回は，Rallyの使い方を学習するため，1つのコンテナ上で
RallyとDevStackでデプロイしたOpenStackを共存させることを目指す。&lt;/p&gt;
&lt;p&gt;なお，以下ではコマンドを実行するマシンを &lt;tt class="docutils literal"&gt;user&amp;#64;host&lt;/tt&gt; の形式で明示する。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Docker, Firefox, git, Hardware, keyboard, Linux, math, PC自作, pelican, Pelican, percol, Preseed, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux, 未分類 --&gt;
&lt;p&gt;OpenStack環境のテスト・ベンチマークツールとしてRallyがある。
今回は，Rallyの使い方を学習するため，1つのコンテナ上で
RallyとDevStackでデプロイしたOpenStackを共存させることを目指す。&lt;/p&gt;
&lt;p&gt;なお，以下ではコマンドを実行するマシンを &lt;tt class="docutils literal"&gt;user&amp;#64;host&lt;/tt&gt; の形式で明示する。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="dockerrally"&gt;
&lt;h2&gt;DockerコンテナとしてRallyをインストールする&lt;/h2&gt;
&lt;p&gt;DockerのホストマシンにDockerコンテナとしてRallyをインストールする。
ここで， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--privileged=true&lt;/span&gt;&lt;/tt&gt; がないと，iptablesの操作ができずに後のdevstackが
エラー終了する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@host $ docker pull rallyforge/rally
user@host $ mkdir ~/rally_home
user@host $ sudo chgrp docker ~/rally_home
user@host $ docker run --privileged&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; -v ~/rally_home:/home/rally -u root --name rally -itd rallyforge/rally /bin/bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;homeディレクトリをボリュームとしてマウントすると，所有者がrootになる。
rallyユーザに戻しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@host $ docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it rally /bin/bash
root@container $ chown rally:rally /home/rally
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;rallyユーザのパスワード変更とsudoの有効化をする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@container $ passwd rally
root@container $ visudo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;rallyユーザでログインしてDBの初期化をする。念のため。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@container $ su rally
rally@container $ rally-manage db recreate
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="devstackopenstack"&gt;
&lt;h2&gt;DevStackでOpenStackをデプロイ&lt;/h2&gt;
&lt;p&gt;次にDevStackでRallyのDockerコンテナにOpenStackをインストールする。
テスト用途なのでパフォーマンスは気にしない。&lt;/p&gt;
&lt;p&gt;gitからcloneしてきたdevstackの設定ファイル
&lt;tt class="docutils literal"&gt;local.conf&lt;/tt&gt; の &lt;tt class="docutils literal"&gt;[[local|localrc]]&lt;/tt&gt; セクションに
&lt;tt class="docutils literal"&gt;enable_plugin rally &lt;span class="pre"&gt;https://github.com/openstack/rally&lt;/span&gt; master&lt;/tt&gt; を追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rally@container $ git clone https://git.openstack.org/openstack-dev/devstack
rally@container $ &lt;span class="nb"&gt;cd&lt;/span&gt; devstack
rally@container $ cp samples/local.conf local.conf
rally@container $ sed -i &lt;span class="s1"&gt;&amp;#39;s,\[\[local|localrc\]\],\[\[local|localrc\]\]\nenable_plugin rally https://github.com/openstack/rally master,&amp;#39;&lt;/span&gt; local.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そのまま &lt;tt class="docutils literal"&gt;stack.sh&lt;/tt&gt; を実行すると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./stack.sh: line &lt;span class="m"&gt;494&lt;/span&gt;: generate-subunit: &lt;span class="nb"&gt;command&lt;/span&gt; not found
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とエラーがでる。先に必要なパッケージをインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rally@container $ sudo pip install -U os-testr
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また，以下のようなエラーが生じる場合は，対応するバージョンの &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;linux-image&lt;/span&gt;&lt;/tt&gt; を &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt; でインストールする。
なお，同時にインストールされるgrubを/dev/sda等に設定する必要はない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;2016&lt;/span&gt;-06-20 &lt;span class="m"&gt;14&lt;/span&gt;:41:15.172 &lt;span class="p"&gt;|&lt;/span&gt; modprobe: ERROR: ../libkmod/libkmod.c:556 kmod_search_moddep&lt;span class="o"&gt;()&lt;/span&gt; could not open moddep file &lt;span class="s1"&gt;&amp;#39;/lib/modules/3.13.0-88-generic/modules.dep.bin&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-06-20 &lt;span class="m"&gt;14&lt;/span&gt;:41:15.172 &lt;span class="p"&gt;|&lt;/span&gt; The kernel doesn&lt;span class="s1"&gt;&amp;#39;t support the ebtables &amp;#39;&lt;/span&gt;filter&lt;span class="s1"&gt;&amp;#39; table.&lt;/span&gt;
&lt;span class="s1"&gt;2016-06-20 14:41:15.203 | modprobe: ERROR: ../libkmod/libkmod.c:556 kmod_search_moddep() could not open moddep file &amp;#39;&lt;/span&gt;/lib/modules/3.13.0-88-generic/modules.dep.bin&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;2016-06-20 14:41:15.203 | The kernel doesn&amp;#39;&lt;/span&gt;t support the ebtables &lt;span class="s1"&gt;&amp;#39;nat&amp;#39;&lt;/span&gt; table.
&lt;span class="m"&gt;2016&lt;/span&gt;-06-20 &lt;span class="m"&gt;14&lt;/span&gt;:41:15.232 &lt;span class="p"&gt;|&lt;/span&gt; modprobe: ERROR: ../libkmod/libkmod.c:556 kmod_search_moddep&lt;span class="o"&gt;()&lt;/span&gt; could not open moddep file &lt;span class="s1"&gt;&amp;#39;/lib/modules/3.13.0-88-generic/modules.dep.bin&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-06-20 &lt;span class="m"&gt;14&lt;/span&gt;:41:15.232 &lt;span class="p"&gt;|&lt;/span&gt; The kernel doesn&lt;span class="s1"&gt;&amp;#39;t support the ebtables &amp;#39;&lt;/span&gt;broute&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; table.
&lt;span class="m"&gt;2016&lt;/span&gt;-06-20 &lt;span class="m"&gt;14&lt;/span&gt;:41:16.224 &lt;span class="p"&gt;|&lt;/span&gt; +./stack.sh:exit_trap:504                  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rally@container $ sudo apt-get install linux-image-&lt;span class="sb"&gt;`&lt;/span&gt;uname -r&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のようなエラーに遭遇した場合は， &lt;tt class="docutils literal"&gt;docker run &lt;span class="pre"&gt;--privileged=true&lt;/span&gt;&lt;/tt&gt; としているかチェックすること。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;2016&lt;/span&gt;-06-20 &lt;span class="m"&gt;14&lt;/span&gt;:17:23.506 &lt;span class="p"&gt;|&lt;/span&gt; iptables v1.4.21: can&lt;span class="s1"&gt;&amp;#39;t initialize iptables table `filter&amp;#39;&lt;/span&gt;: Permission denied &lt;span class="o"&gt;(&lt;/span&gt;you must be root&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-06-20 &lt;span class="m"&gt;14&lt;/span&gt;:17:23.506 &lt;span class="p"&gt;|&lt;/span&gt; Perhaps iptables or your kernel needs to be upgraded.
&lt;span class="m"&gt;2016&lt;/span&gt;-06-20 &lt;span class="m"&gt;14&lt;/span&gt;:17:23.524 &lt;span class="p"&gt;|&lt;/span&gt; iptables v1.4.21: can&lt;span class="s1"&gt;&amp;#39;t initialize iptables table `nat&amp;#39;&lt;/span&gt;: Permission denied &lt;span class="o"&gt;(&lt;/span&gt;you must be root&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-06-20 &lt;span class="m"&gt;14&lt;/span&gt;:17:23.524 &lt;span class="p"&gt;|&lt;/span&gt; Perhaps iptables or your kernel needs to be upgraded.
&lt;span class="m"&gt;2016&lt;/span&gt;-06-20 &lt;span class="m"&gt;14&lt;/span&gt;:17:23.543 &lt;span class="p"&gt;|&lt;/span&gt; iptables v1.4.21: can&lt;span class="s1"&gt;&amp;#39;t initialize iptables table `mangle&amp;#39;&lt;/span&gt;: Permission denied &lt;span class="o"&gt;(&lt;/span&gt;you must be root&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2016&lt;/span&gt;-06-20 &lt;span class="m"&gt;14&lt;/span&gt;:17:23.543 &lt;span class="p"&gt;|&lt;/span&gt; Perhaps iptables or your kernel needs to be upgraded.
&lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまでやれば，DevStackでOpenStackをデプロイできる...はずだがまだtox
の実行エラーが発生するようだ。要調査。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rally@container $ ./stack.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;DevStackによるOpenStackのデプロイには時間がかかる。
完了したら念のためコミットしてイメージ化しておこう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@host $ docker commit rally rally-devstack
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- dockerfile --&gt;
&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
&lt;!--  --&gt;
&lt;!-- Dockerファイルにもしてみた。 --&gt;
&lt;!--  --&gt;
&lt;!--  --&gt;
&lt;!-- Rallyの実行 --&gt;
&lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
&lt;!--  --&gt;
&lt;!-- OpenRCファイルを用意する。 --&gt;
&lt;!--  --&gt;
&lt;!-- .. code-block:: bash --&gt;
&lt;!--  --&gt;
&lt;!-- rally@container $ --&gt;
&lt;!-- rally@container $ --&gt;
&lt;!--  --&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Rally"></category><category term="OpenStack"></category><category term="テスト"></category></entry><entry><title>Dockerイメージをダウンロードしてコンテナを起動するまでの手順</title><link href="http://blog.calcurio.com/docker_usage.html" rel="alternate"></link><published>2016-06-20T19:15:40+09:00</published><updated>2016-06-20T20:17:52+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-06-20:/docker_usage.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, Linux, math, PC自作, pelican, Pelican, percol, Preseed, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux, 未分類 --&gt;
&lt;p&gt;Dockerを初めて使ってみているのでわからないことだらけである。
今回はインストールからUbuntuイメージをダウンロードし，
良く言われるデータの永続性に注意しながらコンテナを起動するところまで
書き残しておく。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, Linux, math, PC自作, pelican, Pelican, percol, Preseed, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux, 未分類 --&gt;
&lt;p&gt;Dockerを初めて使ってみているのでわからないことだらけである。
今回はインストールからUbuntuイメージをダウンロードし，
良く言われるデータの永続性に注意しながらコンテナを起動するところまで
書き残しておく。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install docker.io
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インストールしたままではdockerコマンドは実行できない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker ps
FATA&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0000&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Get http:///var/run/docker.sock/v1.18/containers/json: dial unix /var/run/docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ユーザ権限でDockerを操作できるように，Dockerグループに追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo usermod -aG docker &amp;lt;USER&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Docker imageの検索&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker search ubuntu
NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
ubuntu                            Ubuntu is a Debian-based Linux operating s...   &lt;span class="m"&gt;4122&lt;/span&gt;      &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
ubuntu-upstart                    Upstart is an event-based replacement &lt;span class="k"&gt;for&lt;/span&gt; ...   &lt;span class="m"&gt;64&lt;/span&gt;        &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
rastasheep/ubuntu-sshd            Dockerized SSH service, built on top of of...   &lt;span class="m"&gt;29&lt;/span&gt;                   &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
torusware/speedus-ubuntu          Always updated official Ubuntu docker imag...   &lt;span class="m"&gt;26&lt;/span&gt;                   &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
ubuntu-debootstrap                debootstrap --variant&lt;span class="o"&gt;=&lt;/span&gt;minbase --components...   &lt;span class="m"&gt;25&lt;/span&gt;        &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
consol/ubuntu-xfce-vnc            Ubuntu container with &lt;span class="s2"&gt;&amp;quot;headless&amp;quot;&lt;/span&gt; VNC sessi...   &lt;span class="m"&gt;14&lt;/span&gt;                   &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
ioft/armhf-ubuntu                 &lt;span class="o"&gt;[&lt;/span&gt;ABR&lt;span class="o"&gt;]&lt;/span&gt; Ubuntu Docker images &lt;span class="k"&gt;for&lt;/span&gt; the ARMv7&lt;span class="o"&gt;(&lt;/span&gt;a...   &lt;span class="m"&gt;14&lt;/span&gt;                   &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
nickistre/ubuntu-lamp             LAMP server on Ubuntu                           &lt;span class="m"&gt;8&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
nickistre/ubuntu-lamp-wordpress   LAMP on Ubuntu with wp-cli installed            &lt;span class="m"&gt;5&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
nimmis/ubuntu                     This is a docker images different LTS vers...   &lt;span class="m"&gt;5&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
nuagebec/ubuntu                   Simple always updated Ubuntu docker images...   &lt;span class="m"&gt;5&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
maxexcloo/ubuntu                  Docker base image built on Ubuntu with Sup...   &lt;span class="m"&gt;2&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
jordi/ubuntu                      Ubuntu Base Image                               &lt;span class="m"&gt;1&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
darksheer/ubuntu                  Base Ubuntu Image -- Updated hourly             &lt;span class="m"&gt;1&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
admiringworm/ubuntu               Base ubuntu images based on the official u...   &lt;span class="m"&gt;1&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
esycat/ubuntu                     Ubuntu LTS                                      &lt;span class="m"&gt;0&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
webhippie/ubuntu                  Docker images &lt;span class="k"&gt;for&lt;/span&gt; ubuntu                        &lt;span class="m"&gt;0&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
lynxtp/ubuntu                     https://github.com/lynxtp/docker-ubuntu         &lt;span class="m"&gt;0&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
datenbetrieb/ubuntu               custom flavor of the official ubuntu base ...   &lt;span class="m"&gt;0&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
ustclug/ubuntu                    ubuntu image &lt;span class="k"&gt;for&lt;/span&gt; docker with USTC mirror        &lt;span class="m"&gt;0&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
rallias/ubuntu                    Ubuntu with the needful                         &lt;span class="m"&gt;0&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
konstruktoid/ubuntu               Ubuntu base image                               &lt;span class="m"&gt;0&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
widerplan/ubuntu                  Our basic Ubuntu images.                        &lt;span class="m"&gt;0&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
teamrock/ubuntu                   TeamRock&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s Ubuntu image configured with AW...   &lt;span class="m"&gt;0&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
life360/ubuntu                    Ubuntu is a Debian-based Linux operating s...   &lt;span class="m"&gt;0&lt;/span&gt;                    &lt;span class="o"&gt;[&lt;/span&gt;OK&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker imageのダウンロード&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker pull ubuntu
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dockerコンテナの起動&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -it ubuntu /bin/bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このままでは &lt;tt class="docutils literal"&gt;exit&lt;/tt&gt; したらコンテナも停止する。
通常の仮想マシンのように，コンテナを起動したままにしたいなら，
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-d&lt;/span&gt;&lt;/tt&gt; オプションでバックグラウンド起動する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run --name ubuntu-container -d -it ubuntu /bin/bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker attach ubuntu-container
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;してから &lt;tt class="docutils literal"&gt;exit&lt;/tt&gt; するとDockerコンテナは停止する。
不意の事故を防ぎたいなら，インタラクティブシェルの代わりに
ではなくてwhile無限ループを回しておくのも1つの方法である。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run --name ubuntu-container -d -it ubuntu /bin/sh -c &lt;span class="s2"&gt;&amp;quot;while true; do sleep 100000; done&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このとき，コンテナを停止するには明示的にstopサブコマンドを発行する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker stop  ubuntu-container
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお，停止したコンテナ内にあるイメージからの差分データは
すべて破棄される &lt;cite&gt;ということはない&lt;/cite&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;exit&lt;/tt&gt; あるいは &lt;tt class="docutils literal"&gt;docker stop&lt;/tt&gt; した時点では
コンテナの差分データは保存されている。
&lt;tt class="docutils literal"&gt;docker start&lt;/tt&gt; してやれば，再びコンテナ内のデータに
アクセスできる。&lt;/p&gt;
&lt;p&gt;差分データが消えるのは &lt;tt class="docutils literal"&gt;dokcer rm&lt;/tt&gt; してコンテナを削除した時点である。&lt;/p&gt;
&lt;p&gt;とにかく，コンテナ内のデータは揮発性だと常に意識するに越したことはない。
作業データを永続化したい場合は，ボリュームを追加する。
ここでは，コンテナの &lt;tt class="docutils literal"&gt;/home/ubuntu/&lt;/tt&gt; をホストの &lt;tt class="docutils literal"&gt;~/docker_home&lt;/tt&gt; に接続する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir ~/docker_home
$ chgrp docker ~/docker_home
$ docker run -v ~/docker_home:/home/ubuntu --name ubuntu-container -d -it ubuntu /bin/bash
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ボリューム外のデータもコンテナをコミットすれば，
Dockerイメージ化して保存できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker commit ubuntu-container ubuntu-container-image
$ docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu-container-image   latest              174981ce6dc8        &lt;span class="m"&gt;11&lt;/span&gt; seconds ago      &lt;span class="m"&gt;188&lt;/span&gt;.9 MB
ubuntu                   latest              594b6e305389        &lt;span class="m"&gt;3&lt;/span&gt; weeks ago         &lt;span class="m"&gt;122&lt;/span&gt; MB
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Docker"></category><category term="Linux"></category><category term="CUI"></category><category term="Ubuntu"></category></entry><entry><title>ipmitoolのintervalを長くしてSOL接続をタイムアウトさせないようにする</title><link href="http://blog.calcurio.com/ipmitool-interval.html" rel="alternate"></link><published>2016-06-19T23:34:53+09:00</published><updated>2016-06-19T23:43:16+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-06-19:/ipmitool-interval.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, Linux, math, PC自作, pelican, Pelican, percol, Preseed, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux, 未分類 --&gt;

&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;遠隔地のサーバを操作するために，IPMIを使って電源ONなり，Serial Over Lan (SOL)でコンソール接続をしたい。
しかし，ipmitoolの応答は不安定でSOL接続がすぐに切れることもある。
そこで，タイムアウトのインターバルを長くする。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, Linux, math, PC自作, pelican, Pelican, percol, Preseed, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux, 未分類 --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;問題&lt;/h2&gt;
&lt;p&gt;遠隔地のサーバを操作するために，IPMIを使って電源ONなり，Serial Over Lan (SOL)でコンソール接続をしたい。
しかし，ipmitoolの応答は不安定でSOL接続がすぐに切れることもある。
そこで，タイムアウトのインターバルを長くする。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;対策&lt;/h2&gt;
&lt;p&gt;デフォルトでは100ms間隔で7回の接続を試す。
1000msの間隔に設定するには，以下のコマンドを打つ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ipmitool -I lanplus -H &amp;lt;HOST&amp;gt; -P &amp;lt;PASSWORD&amp;gt; sol &lt;span class="nb"&gt;set&lt;/span&gt; retry-interval &lt;span class="m"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;参考サイト&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://linux.die.net/man/1/ipmitool"&gt;ipmitool(1) - Linux man page&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Linux"></category><category term="CUI"></category></entry><entry><title>UbuntuのPreseed.cfgのexpert_recipeにおけるパーティションのサイズ指定方法</title><link href="http://blog.calcurio.com/preseed-partitioning.html" rel="alternate"></link><published>2016-06-13T23:25:53+09:00</published><updated>2016-06-14T01:44:21+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-06-13:/preseed-partitioning.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, Linux, math, PC自作, pelican, Pelican, percol, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;UbuntuやDebianのインストールを自動化するには，Preseedファイルが必要である。
その書式の一番面倒なのはおそらくパーティションの設定ではないだろうか。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, Linux, math, PC自作, pelican, Pelican, percol, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;UbuntuやDebianのインストールを自動化するには，Preseedファイルが必要である。
その書式の一番面倒なのはおそらくパーティションの設定ではないだろうか。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;preseedでパーティションのサイスを任意指定するには &lt;tt class="docutils literal"&gt;expoer_recipe&lt;/tt&gt; を書かなくてはならない。
その書式を ` &amp;lt;&lt;a class="reference external" href="https://help.ubuntu.com/lts/installation-guide/example-preseed.txt"&gt;https://help.ubuntu.com/lts/installation-guide/example-preseed.txt&lt;/a&gt;&amp;gt;`_
から引用する。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# If not, you can put an entire recipe into the preconfiguration file in one
# (logical) line. This example creates a small /boot partition, suitable
# swap, and uses the rest of the space for the root partition:
d-i partman-auto/expert_recipe string                         \
      boot-root ::                                            \
              40 50 100 ext3                                  \
                      $primary{ } $bootable{ }                \
                      method{ format } format{ }              \
                      use_filesystem{ } filesystem{ ext3 }    \
                      mountpoint{ /boot }                     \
              .                                               \
              500 10000 1000000000 ext3                       \
                      method{ format } format{ }              \
                      use_filesystem{ } filesystem{ ext3 }    \
                      mountpoint{ / }                         \
              .                                               \
              64 512 300% linux-swap                          \
                      method{ swap } format{ }                \
              .
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;ここでは3つのパーティションを作成している。
例えば，/boot パーティションののサイズ指定は6行目の&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;40 50 100 ext3                                  \
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で指定されている。ここでは，最小40MB・最大100MBのext3パーティションを
優先度50で作成せよと命令している。優先度は小さいほど高いようだ。&lt;/p&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://cptyesterday.wordpress.com/2012/06/17/notes-on-using-expert_recipe-in-debianubuntu-preseed-files/"&gt;Notes on using expert_recipe in Debian/Ubuntu Preseed Files | Semi-Empirical Shenanigans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://d.palmtb.net/2012/12/14/writing_preseed_for_gpt.html"&gt;GPT対応のpreseedの書き方 — ペンギンと愉快な機械の日々&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://help.ubuntu.com/lts/installation-guide/example-preseed.txt"&gt;https://help.ubuntu.com/lts/installation-guide/example-preseed.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/xobs/debian-installer/blob/master/doc/devel/partman-auto-recipe.txt"&gt;debian-installer/partman-auto-recipe.txt at master · xobs/debian-installer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Ubuntu"></category><category term="Preseed"></category></entry><entry><title>cygwinでclipboardlistenerを動作させる</title><link href="http://blog.calcurio.com/cygwin-clipboardlistener.html" rel="alternate"></link><published>2016-06-10T01:00:23+09:00</published><updated>2016-06-12T23:49:56+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-06-10:/cygwin-clipboardlistener.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, Linux, math, PC自作, pelican, Pelican, percol, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux, Software/Linux --&gt;
&lt;p&gt;SSH先のVimのyankやScreenのpaste bufferを，ローカルマシンのクリップボードへ書き込む方法には，&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;ncで適当なポートへ送信し，ホスト側で待ち受ける(clipboard_text_listener.pl)&lt;/li&gt;
&lt;li&gt;端末のクリップボード制御コード(OSC52)を使う&lt;/li&gt;
&lt;li&gt;ファイルへ保存し，sshコマンドでとってくる&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法があるようだ。一番楽なのは， &lt;tt class="docutils literal"&gt;clipboard_text_listener.pl&lt;/tt&gt; を使わせていただく方法。
Cygwinで動作させる方法をメモしておく。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, Linux, math, PC自作, pelican, Pelican, percol, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux, Software/Linux --&gt;
&lt;p&gt;SSH先のVimのyankやScreenのpaste bufferを，ローカルマシンのクリップボードへ書き込む方法には，&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;ncで適当なポートへ送信し，ホスト側で待ち受ける(clipboard_text_listener.pl)&lt;/li&gt;
&lt;li&gt;端末のクリップボード制御コード(OSC52)を使う&lt;/li&gt;
&lt;li&gt;ファイルへ保存し，sshコマンドでとってくる&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法があるようだ。一番楽なのは， &lt;tt class="docutils literal"&gt;clipboard_text_listener.pl&lt;/tt&gt; を使わせていただく方法。
Cygwinで動作させる方法をメモしておく。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;p&gt;まず作者サイトを見て &lt;tt class="docutils literal"&gt;clipboard_text_listener.pl&lt;/tt&gt; を保存。リモート先の設定をしておく。&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://yskwkzhr.blogspot.jp/2011/04/copying-remote-screen-paste-buffer.html"&gt;ssh先screenのペーストバッファをクリップボードに貼り付ける - Keep It Simple, Stupid&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;最近のCygiwnでは &lt;tt class="docutils literal"&gt;putclip&lt;/tt&gt; コマンドが使えない。
(2016-06-12追記： &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-cyg&lt;/span&gt; install &lt;span class="pre"&gt;cygutils-extra&lt;/span&gt;&lt;/tt&gt; で putclipやgetclipが使えるようになる)
以下のシェルスクリプトを &lt;tt class="docutils literal"&gt;putclip&lt;/tt&gt; という名前でpathの通ったディレクトリにおいておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
cat - &amp;gt; /dev/clipboard
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは実行するだけ。ちゃんと動作するか確かめる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;perl&lt;/span&gt; &lt;span class="sr"&gt;/path/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;clipboard_text_listener&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt; &lt;span class="n"&gt;utf8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="windows"&gt;
&lt;h2&gt;Windows起動時自動実行&lt;/h2&gt;
&lt;p&gt;なお，Windowsのスタートアップに登録しておくなら，まずclipboardlistener.batを以下の内容で作成して，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;CD&lt;/span&gt; C:\cygwin64\bin
bash  --login -i -c &lt;span class="s2"&gt;&amp;quot;perl /path/to/clipboard_text_listener.pl -encoding utf8&amp;quot;&lt;/span&gt;%
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同じディレクトリに &lt;tt class="docutils literal"&gt;clipboardlistener.vbs&lt;/tt&gt; を以下の内容で作成する。
スタートアップフォルダには， &lt;tt class="docutils literal"&gt;clipboardlistener.vbs&lt;/tt&gt; へのショートカットを作成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Set ws = CreateObject(&amp;quot;Wscript.Shell&amp;quot;)
ws.run &amp;quot;cmd /c clipboardlistener.bat&amp;quot;, vbhide
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Cygwin"></category><category term="Linux"></category></entry><entry><title>autoexpectコマンドでexpectのスクリプトを自動生成する</title><link href="http://blog.calcurio.com/autoexpect.html" rel="alternate"></link><published>2016-06-09T23:48:09+09:00</published><updated>2016-06-10T01:40:38+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-06-09:/autoexpect.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, Linux, math, PC自作, pelican, Pelican, percol, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;SSHのログインなど，対話型の動作を自動化するツールとして &lt;tt class="docutils literal"&gt;expect&lt;/tt&gt; コマンドがある。
これはもはや言語に近く，いちいち &lt;tt class="docutils literal"&gt;expect&lt;/tt&gt; 用のスクリプトを作成するのは手間である。
そこで，ターミナルの入出力をキャプチャして &lt;tt class="docutils literal"&gt;expect&lt;/tt&gt; 用のスクリプトを自動生成してくれる，
&lt;tt class="docutils literal"&gt;autoexpect&lt;/tt&gt; コマンドを使うと少し楽になる。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, Linux, math, PC自作, pelican, Pelican, percol, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;SSHのログインなど，対話型の動作を自動化するツールとして &lt;tt class="docutils literal"&gt;expect&lt;/tt&gt; コマンドがある。
これはもはや言語に近く，いちいち &lt;tt class="docutils literal"&gt;expect&lt;/tt&gt; 用のスクリプトを作成するのは手間である。
そこで，ターミナルの入出力をキャプチャして &lt;tt class="docutils literal"&gt;expect&lt;/tt&gt; 用のスクリプトを自動生成してくれる，
&lt;tt class="docutils literal"&gt;autoexpect&lt;/tt&gt; コマンドを使うと少し楽になる。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;install&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-get install expect-dev
$ yum install expect-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;usage&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ autoexpect ssh hoge@huga.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記コマンドでスクリプトファイル &lt;tt class="docutils literal"&gt;script.exp&lt;/tt&gt; を生成してくれるが，本当に機械的に生成しただけなので自分で手直しをする必要が生じるだろう。しかし，かなり楽にはなるはず。&lt;/p&gt;
&lt;p&gt;参考： &lt;a class="reference external" href="http://expect.sourceforge.net/example/autoexpect.man.html"&gt;AUTOEXPECT(1) manual page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://qiita.com/ine1127/items/cd6bc91174635016db9b"&gt;Linuxの対話がめんどくさい?そんな時こそ自動化だ！-expect編- - Qiita&lt;/a&gt; によると， &lt;tt class="docutils literal"&gt;expect&lt;/tt&gt; コマンドは変数や引き数，条件分岐，正規表現にも対応しているようなので，思っていたよりもずっと柔軟なスクリプトを作成できそうだ。必要に迫られたときのために，覚えておくと良いかもしれない。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="CUI"></category><category term="Cygwin"></category><category term="Ubuntu"></category><category term="Linux"></category></entry><entry><title>linuxやcygwinでhttpプロキシを指定する方法</title><link href="http://blog.calcurio.com/linux-proxy.html" rel="alternate"></link><published>2016-06-09T18:15:09+09:00</published><updated>2016-06-09T18:32:38+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-06-09:/linux-proxy.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, math, PC自作, pelican, Pelican, percol, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;Linuxやcygiwnのターミナル環境下で，httpやhttpsのプロキシを有効にするには，環境変数を設定する必要がある。 &lt;tt class="docutils literal"&gt;wget&lt;/tt&gt; などは，独自の設定ファイルで指定することもできるが，システム全体へ指定するなら環境変数が良い。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, math, PC自作, pelican, Pelican, percol, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, Hardware/ノートPC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;Linuxやcygiwnのターミナル環境下で，httpやhttpsのプロキシを有効にするには，環境変数を設定する必要がある。 &lt;tt class="docutils literal"&gt;wget&lt;/tt&gt; などは，独自の設定ファイルで指定することもできるが，システム全体へ指定するなら環境変数が良い。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;/etc/profile/proxy.sh&lt;/tt&gt; に以下の内容のファイルを作成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;porxy_user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;USERNAME&amp;gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;porxy_pass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;PASSWORD&amp;gt;

&lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;PORT_NUMBER&amp;gt;
&lt;span class="nv"&gt;proxyhost&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;HOST&amp;gt;
&lt;span class="nv"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$porxy_user&lt;/span&gt;:&lt;span class="nv"&gt;$proxy_pass&lt;/span&gt;@&lt;span class="nv"&gt;$proxyhost&lt;/span&gt;:&lt;span class="nv"&gt;$port&lt;/span&gt;

&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;use_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;http_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://&lt;span class="nv"&gt;$proxy&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;http_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://&lt;span class="nv"&gt;$proxy&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;ftp_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ftp://&lt;span class="nv"&gt;$proxy&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;HTTP_PROXY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://&lt;span class="nv"&gt;$proxy&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;HTTPS_PROXY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://&lt;span class="nv"&gt;$proxy&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;FTP_PROXY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ftp://&lt;span class="nv"&gt;$proxy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再度ログインしなおすと有効になる。
もしかしたら，プロトコルは揃える必要ないかも。&lt;/p&gt;
&lt;p&gt;なお， &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt; すると環境変数は引き継がれないので注意。
引き継ぎたいなら， &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;-E&lt;/span&gt;&lt;/tt&gt; とする。&lt;/p&gt;
</content><category term="Software"></category><category term="Cygwin"></category><category term="Ubuntu"></category><category term="Linux"></category><category term="CUI"></category></entry><entry><title>CygwinのターミナルminttyでIMEの状態に応じてカーソル色を変える</title><link href="http://blog.calcurio.com/mintty-ime-color.html" rel="alternate"></link><published>2016-06-06T22:36:53+09:00</published><updated>2016-06-06T22:52:23+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-06-06:/mintty-ime-color.html</id><summary type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, math, PC自作, pelican, Pelican, percol, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh, 未解決問題 --&gt;
&lt;!-- category: blog, Hardware, PC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;CygwinのターミナルminttyにはIMEのOn，OFFによってカーソル色を変更させる隠しオプションがある。これは右クリックで開くオプションウィンドウから設定できない項目であり， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$HOME/.mintty&lt;/span&gt;&lt;/tt&gt; を直接書き換えることで有効化する。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, blog, CUI, Cygwin, Firefox, git, Hardware, keyboard, math, PC自作, pelican, Pelican, percol, python, reStructuredText, screen, ThinkPad, ThinkPadHelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh, 未解決問題 --&gt;
&lt;!-- category: blog, Hardware, PC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;CygwinのターミナルminttyにはIMEのOn，OFFによってカーソル色を変更させる隠しオプションがある。これは右クリックで開くオプションウィンドウから設定できない項目であり， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$HOME/.mintty&lt;/span&gt;&lt;/tt&gt; を直接書き換えることで有効化する。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;例えば，IMEが有効の場合のみカーソルを赤色にするには次のように書く。
日本語入力を大量にする場合は便利。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;IMECursorColour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;,0,0
&lt;/pre&gt;&lt;/div&gt;
</content><category term="Software"></category><category term="Cygwin"></category><category term="CUI"></category></entry><entry><title>QFixHowmでPelicanのブログ記事を書く</title><link href="http://blog.calcurio.com/qfixhowm-pelican.html" rel="alternate"></link><published>2016-06-01T00:35:17+09:00</published><updated>2016-07-19T01:58:42+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-06-01:/qfixhowm-pelican.html</id><summary type="html">&lt;p&gt;QFixHowmで記事を書いて，PelicanでWebに公開する。
このフローを簡単に実現したい。&lt;/p&gt;
&lt;p&gt;ちなみにOctpressとの連携ならWeb上に例があるが，Pelicanと連携した記事はない。
reStructuredTextなPelicanとMarkdownなQFixHowmの相性が悪いからだろうか。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;QFixHowmで記事を書いて，PelicanでWebに公開する。
このフローを簡単に実現したい。&lt;/p&gt;
&lt;p&gt;ちなみにOctpressとの連携ならWeb上に例があるが，Pelicanと連携した記事はない。
reStructuredTextなPelicanとMarkdownなQFixHowmの相性が悪いからだろうか。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="qfixhowm-g-c-pelicandraft"&gt;
&lt;h2&gt;目的：QFixHowmで &lt;tt class="docutils literal"&gt;g,c&lt;/tt&gt; するPelicanのdraftとして新しいページを作成する&lt;/h2&gt;
&lt;p&gt;QFixHowmで &lt;tt class="docutils literal"&gt;g,C&lt;/tt&gt; としてファイル名を指定してメモを作成するときは，最初から清書としてHTML変換したい。
一方で， &lt;tt class="docutils literal"&gt;g,c&lt;/tt&gt; で日付でファイル名を自動作成する場合は，下書きとしてHTML化しないようにする。&lt;/p&gt;
&lt;p&gt;まず， &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; に以下の記述をし，パス名にdraftを含むファイルを
&lt;tt class="docutils literal"&gt;make html&lt;/tt&gt; などで無視させる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;IGNORE_FILES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.#*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*draft*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;QFixHowmの下書きファイルを保存するディレクトリを作成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir &lt;span class="nv"&gt;$HOME&lt;/span&gt;/pelican/content/draft-howm
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt; で &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$HOME/pelican/content/draft-howm&lt;/span&gt;&lt;/tt&gt; をhowmのメモの保存先として設定する。
ポイントは &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;draft-howm/&lt;/span&gt;&lt;/tt&gt; は &lt;tt class="docutils literal"&gt;howm_filename&lt;/tt&gt; オプションの一部としてに記述すること。
これにより，QFixHowmのgrep検索で &lt;tt class="docutils literal"&gt;howm_dir&lt;/tt&gt; 以下にある清書と下書きの両方を
検索対象にしてくれる。
それと同時に， &lt;tt class="docutils literal"&gt;g,c&lt;/tt&gt; のキー入力でPelicanの下書きファイルとしてQFixHowmのメモを保存できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ベースディレクトリ&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; howm_dir &lt;span class="p"&gt;=&lt;/span&gt; $HOME.&lt;span class="s1"&gt;&amp;#39;/pelican/content/&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; g,cで開くメモ&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; howm_filename &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draft-howm/%Y-%m/%Y-%m-%d-%H%M%S.rst&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; g,Cで開くファイル名の初期値&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; qfixmemo_misc_file &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%Y-%m/&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; g,&amp;lt;Space&amp;gt;で開く日記&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; qfixmemo_diary &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draft-howm/%Y-%m/%Y-%m-%d-DailyReport.rst&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; TODOと予定&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_ScheduleSearchDir &lt;span class="p"&gt;=&lt;/span&gt; howm_dir.&lt;span class="s1"&gt;&amp;#39;/draft-howm/schedule&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; メニューファイルディレクトリ&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_MenuDir &lt;span class="p"&gt;=&lt;/span&gt; howm_dir.&lt;span class="s2"&gt;&amp;quot;/draft-howm/&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;目的：新規エントリのテンプレートを作成する&lt;/h2&gt;
&lt;p&gt;1つの方法はQFixHowmのテンプレートを以下のように &lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt; で指定すること。
これではslug，category，tagsの入力が面倒なので，何らかの形で支援したい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_Template &lt;span class="p"&gt;=&lt;/span&gt; [
  \&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \&lt;span class="s2"&gt;&amp;quot;###########################################&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \&lt;span class="s2"&gt;&amp;quot;:date: %Y-%m-%d %H:%M:%S&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
  \&lt;span class="s2"&gt;&amp;quot;:modified: %Y-%m-%d %H:%M:%S&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
  \&lt;span class="s2"&gt;&amp;quot;:category:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \&lt;span class="s2"&gt;&amp;quot;:tags:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \&lt;span class="s2"&gt;&amp;quot;:slug:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \&lt;span class="s2"&gt;&amp;quot;:authors: M\. Tsuyuki&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \&lt;span class="s2"&gt;&amp;quot;.. PELICAN_END_SUMMARY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  \]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そう考えると，結局は以前書いた記事： &lt;a class="reference external" href="http://blog.calcurio.com/pelican-vim.html"&gt;Pelicanの記事をVimで楽々編集する | 電脳手帳&lt;/a&gt;
と同じようにシェルスクリプトを呼び出すしかない。
このシェルスクリプト中で
タグやカテゴリをGrepしてSortしてUniqすれば，
現在使用中のカテゴリやタグの一覧が作れる。
入力支援といってもこれぐらいで十分だろう。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qfixhowmrestructuredtext"&gt;
&lt;h2&gt;目的：QFixHowmをreStructuredTextのタイトル行に対応させる&lt;/h2&gt;
&lt;p&gt;QFixHowmはMarkdownが前提となっている。
Markdownの見出しは1行だが，reSTの見出しは2行である。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Markdown

&lt;span class="gh"&gt;reStrucutruedText&lt;/span&gt;
&lt;span class="gh"&gt;#######################&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;reSTの見出しをQFixGrepで扱えるようにしたいが，
外部シェルスクリプトに任せる泥臭いやり方しか思いつかなかった。
とりあえずは期待通りに動いているが何となく気持ち悪い。&lt;/p&gt;
&lt;p&gt;まず，ファイル保存時に勝手にタイトル行を追加されても迷惑なだけなので
OFFにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; qfixmemo_alt_title_regxp &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に正規表現で &lt;tt class="docutils literal"&gt;#&lt;/tt&gt; が文頭から文末まで続く行をタイトル行として指定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; タイトル行検索の正規表現&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixMRU_Title &lt;span class="p"&gt;=&lt;/span&gt; {}
&lt;span class="k"&gt;let&lt;/span&gt; QFixMRU_Title[&lt;span class="s1"&gt;&amp;#39;rst&amp;#39;&lt;/span&gt;] &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^##*$&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixMRU_Title[&lt;span class="s1"&gt;&amp;#39;rst_regxp&amp;#39;&lt;/span&gt;] &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^##*$&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このままでは， &lt;tt class="docutils literal"&gt;g,g&lt;/tt&gt; で検索した結果がすべて &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;###############&lt;/span&gt;&lt;/tt&gt;
となる無意味な表示になってしまう。そこで &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;###############&lt;/span&gt;&lt;/tt&gt; の1つ
上の行をGrep形式の検索結果として整形し，標準出力で返す
外部シェルスクリプト &lt;tt class="docutils literal"&gt;mygrepprg.sh&lt;/tt&gt; をGrepコマンドとして登録する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; QFixHowmでrst対応させるためのgrep&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; mygrepprg &lt;span class="p"&gt;=&lt;/span&gt; $HOME.&lt;span class="s1"&gt;&amp;#39;/.vim/mygrepprg.sh&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;mygrepprg.sh&lt;/tt&gt; の中身は以下の通り。
読めば分かる通り，正規表現 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;^##*$&lt;/span&gt;&lt;/tt&gt; を使った検索時のみ，1行前の検索結果
を整形して返すようにしている。これを設定しておけば，
今のところは特に問題なくreSTのタイトル行に対応できている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# custom grep command for  qfixgrep and qfixhowm&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; grep  -F &lt;span class="s1"&gt;&amp;#39;^##*$&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$8&lt;/span&gt; &amp;gt; /dev/null &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    grep -B1 -Z &lt;span class="nv"&gt;$@&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt; sed  -e &lt;span class="s1"&gt;&amp;#39;/\#.*$/d&amp;#39;&lt;/span&gt; -e &lt;span class="s1"&gt;&amp;#39;s/\x0\([0-9]\)-/:\1:/&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    grep  &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="vimpelicanmakefile"&gt;
&lt;h2&gt;VimからPelicanのMakefileを呼び出すコマンドを作成&lt;/h2&gt;
&lt;p&gt;ここまで来たら，VimからPelicanブログのデプロイまでしてしまいたい。
PelicanのMakefileをVimから呼び出すのが一番楽かな。
単なるエイリアスになるけど。&lt;/p&gt;
&lt;p&gt;ちなみに，以下の記事でMakefileを使って自動的にgithub pagesにデプロイする方法を書いた。&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://blog.calcurio.com/pelican-github-pages.html"&gt;ブログをgithub pagesに移行した | 電脳手帳&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="vimrc"&gt;
&lt;h2&gt;.vimrcまとめ&lt;/h2&gt;
&lt;p&gt;最後に今のところの &lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt; を載せておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot;---------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; QFixHowm&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;---------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; キーマップリーダー&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_Key &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; howm_dirはファイルを保存したいディレクトリを設定&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; howm_dir&lt;span class="p"&gt;=&lt;/span&gt; $HOME.&lt;span class="s1"&gt;&amp;#39;/git_projects/pelican-blog/tech_content&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; pelican_dir&lt;span class="p"&gt;=&lt;/span&gt; $HOME.&lt;span class="s1"&gt;&amp;#39;/git_projects/pelican-blog&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; howm_filename &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draft-howm/%Y-%m/%Y-%m-%d-%H%M%S.rst&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; qfixmemo_diary &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draft-howm/%Y-%m/%Y-%m-%d-DailyReport.rst&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; qfixmemo_misc_file &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%Y-%m/&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; howm_fileencoding &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; howm_fileformat &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unix&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_FileType &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rst&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;予定・TODOの検索場所指定&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_ScheduleSearchDir &lt;span class="p"&gt;=&lt;/span&gt; howm_dir.&lt;span class="s1"&gt;&amp;#39;/draft-howm/schedule&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;予定・TODOでのプレビュー表示ON/OFF&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_SchedulePreview &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;予定やTODOに現在日付行や現在時刻行、境界行を表示する&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_ShowTodayLine &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c"&gt;&amp;quot;0にすると一部の予定が表示されなくなる？&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; タイトル行検索の正規表現&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixMRU_Title &lt;span class="p"&gt;=&lt;/span&gt; {}
&lt;span class="k"&gt;let&lt;/span&gt; QFixMRU_Title[&lt;span class="s1"&gt;&amp;#39;rst&amp;#39;&lt;/span&gt;] &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^##*$&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixMRU_Title[&lt;span class="s1"&gt;&amp;#39;rst_regxp&amp;#39;&lt;/span&gt;] &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;^##*$&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; 擬似タイトル行とみなす正規表現(Vim)&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; ファイルの一行目が特定の文字列で始まっていたらタイトル行やタイムスタンプの付&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 加を行いたくない場合に使用する&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; qfixmemo_alt_title_regxp &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; 表示するファイルリストの指定&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_FileList &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;**/*&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot;新規エントリのテンプレート&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_Template &lt;span class="p"&gt;=&lt;/span&gt; []
&lt;span class="c"&gt;&amp;quot; let QFixHowm_Template = [&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \&amp;quot;&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \&amp;quot;###########################################&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \&amp;quot;&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \&amp;quot;:date: %Y-%m-%d %H:%M:%S&amp;quot; ,&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \&amp;quot;:modified: %Y-%m-%d %H:%M:%S&amp;quot; ,&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \&amp;quot;:category:&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \&amp;quot;:tags:&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \&amp;quot;:slug:&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \&amp;quot;:authors: M\. Tsuyuki&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \&amp;quot;&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \&amp;quot;.. PELICAN_END_SUMMARY&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \&amp;quot;&amp;quot;,&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;   \]&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; テンプレートに挿入されるタグ&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; 時間関係&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 更新時間管理モード&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_RecentMode &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; タイムスタンプ付加&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; qfixmemo_use_addtime &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; タイムスタンプアップデート&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_SaveTime &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; qfixmemo_use_updatetime &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;QFixGrepの検索時にカーソル位置の単語を拾う/拾わない&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; MyGrep_DefaultSearchWord &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;QFixHowmの検索時にカーソル位置の単語を拾う/拾わない&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_DefaultSearchWord &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; メニューファイルディレクトリ&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_MenuDir &lt;span class="p"&gt;=&lt;/span&gt; howm_dir.&lt;span class="s2"&gt;&amp;quot;/draft-howm/&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; メニューファイル&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_Menufile &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Menu-00-00-000000.howm&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;カレンダー表示の分割指定(vertical topleft, vertical botright,  rightbelow, leftabove)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixHowm_CalendarWinCmd &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rightbelow&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;---------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; QFixGrep&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;---------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; QFixHowmでrst対応させるためのgrep&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; mygrepprg &lt;span class="p"&gt;=&lt;/span&gt; $HOME.&lt;span class="s1"&gt;&amp;#39;/.vim/mygrepprg.sh&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 外部grep(shell)のエンコーディング(Unix)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; MyGrep_ShellEncoding &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; QuickFixウィンドウでもプレビューや絞り込みを有効化&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFixWin_EnableMode &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; QFixHowm/QFixGrepの結果表示にロケーションリストを使用する/しない&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFix_UseLocationList &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; QuickFixウィンドウから開いた後ウィンドウを閉じる&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; QFix_CloseOnJump &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; ------------ Pelican ---------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; スケルトンを作成&lt;/span&gt;
autocmd &lt;span class="nb"&gt;BufNewFile&lt;/span&gt; $HOME&lt;span class="sr"&gt;/git_projects/&lt;/span&gt;pelican&lt;span class="p"&gt;-&lt;/span&gt;blog&lt;span class="sr"&gt;/*_content/&lt;/span&gt;*.md &lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; exe &lt;span class="s2"&gt;&amp;quot;0r! sh $HOME/git_projects/pelican-blog/mkskel.sh  %&amp;quot;&lt;/span&gt;
autocmd &lt;span class="nb"&gt;BufNewFile&lt;/span&gt; $HOME&lt;span class="sr"&gt;/git_projects/&lt;/span&gt;pelican&lt;span class="p"&gt;-&lt;/span&gt;blog&lt;span class="sr"&gt;/*_content/&lt;/span&gt;*.rst &lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; exe &lt;span class="s2"&gt;&amp;quot;0r! sh $HOME/git_projects/pelican-blog/mkskel.sh  %&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 保存時に更新日時を書き換え&lt;/span&gt;
autocmd &lt;span class="nb"&gt;BufWrite&lt;/span&gt; $HOME&lt;span class="sr"&gt;/git_projects/&lt;/span&gt;pelican&lt;span class="p"&gt;-&lt;/span&gt;blog&lt;span class="sr"&gt;/*_content/&lt;/span&gt;*.md exe &lt;span class="s2"&gt;&amp;quot;%s/^Modified:.*/Modified: &amp;quot;&lt;/span&gt;.strftime&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%F %T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;/ | normal ``zz&amp;quot;&lt;/span&gt;
autocmd &lt;span class="nb"&gt;BufWrite&lt;/span&gt; $HOME&lt;span class="sr"&gt;/git_projects/&lt;/span&gt;pelican&lt;span class="p"&gt;-&lt;/span&gt;blog&lt;span class="sr"&gt;/*_content/&lt;/span&gt;*.rst exe &lt;span class="s2"&gt;&amp;quot;%s/^:modified:.*/:modified: &amp;quot;&lt;/span&gt;.strftime&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%F %T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;/ | normal ``zz&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Pelican"></category><category term="Vim"></category></entry><entry><title>cygiwnでrsyncの差分バックアップ</title><link href="http://blog.calcurio.com/cygiwn-rsync-network.html" rel="alternate"></link><published>2016-05-31T08:01:06+09:00</published><updated>2016-06-05T23:34:47+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-05-31:/cygiwn-rsync-network.html</id><summary type="html">&lt;p&gt;Cygwinを使ってrsyncの差分バックアップを利用しようとした。ネットワークフォルダへコピーするとき，更新時間がどうしても異なってしまうため，rsyncの差分バックアップが動作していなかった。仕方ないので，更新時間ではなくチェックサムをいちいち計算させてコピーすることにした。&lt;/p&gt;
&lt;p&gt;つまりは次のようなコマンドを打つ。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Cygwinを使ってrsyncの差分バックアップを利用しようとした。ネットワークフォルダへコピーするとき，更新時間がどうしても異なってしまうため，rsyncの差分バックアップが動作していなかった。仕方ないので，更新時間ではなくチェックサムをいちいち計算させてコピーすることにした。&lt;/p&gt;
&lt;p&gt;つまりは次のようなコマンドを打つ。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rsync -av --checksum --progress source/ dest/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あるいはファイルサイズのみ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--size-only&lt;/span&gt;&lt;/tt&gt; でバックアップ対象を判定することもできる。このほうが高速だ。&lt;/p&gt;
</content><category term="Software"></category><category term="Cygwin"></category><category term="CUI"></category><category term="Windows"></category></entry><entry><title>CygwinでNetwork Folderにアクセスする</title><link href="http://blog.calcurio.com/cygwin-networkfolder.html" rel="alternate"></link><published>2016-05-31T07:59:06+09:00</published><updated>2016-06-06T23:07:12+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-05-31:/cygwin-networkfolder.html</id><summary type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, blog, CUI, cygwin, cygwin, bash, zsh, firefox, Firefox, git, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, screen, thinkpad, ThinkPad, thinkpadhelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh, 未解決問題, zsh, cygwin, todo --&gt;
&lt;!-- category: blog, PC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;Cygwinではネットワークフォルダにアクセスできないと思っていたが，&lt;/p&gt;
$ ls //192.168.1.2
&lt;/pre&gt;
&lt;p&gt;といった形でダブルスラッシュにしてやればアクセスできた。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, blog, CUI, cygwin, cygwin, bash, zsh, firefox, Firefox, git, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, screen, thinkpad, ThinkPad, thinkpadhelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh, 未解決問題, zsh, cygwin, todo --&gt;
&lt;!-- category: blog, PC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;Cygwinではネットワークフォルダにアクセスできないと思っていたが，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls //192.168.1.2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;といった形でダブルスラッシュにしてやればアクセスできた。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;ちなみに，ホスト名の解決もちゃんとできる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls //HOSTNAME
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;思ったより賢い。&lt;/p&gt;
</content><category term="Software"></category><category term="Cygwin"></category><category term="Windows"></category><category term="CUI"></category></entry><entry><title>gitで上流(upstream)のリポジトリに追従する</title><link href="http://blog.calcurio.com/git-upstream.html" rel="alternate"></link><published>2016-05-30T21:18:11+09:00</published><updated>2016-05-30T22:00:16+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-05-30:/git-upstream.html</id><summary type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, blog, cygwin, cygwin, bash, zsh, firefox, Firefox, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, screen, thinkpad, ThinkPad, thinkpadhelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh, 未解決問題, zsh, cygwin, todo --&gt;
&lt;!-- category: blog, PC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;gitで &lt;tt class="docutils literal"&gt;clone&lt;/tt&gt; したリポジトリを改変しながら追従するが， &lt;tt class="docutils literal"&gt;push&lt;/tt&gt; はできない（しない）とき。常にclone元(上流)で行われた改変をclone先(下流)へ取り込まなくてはならない。そういうときは &lt;tt class="docutils literal"&gt;fetch&lt;/tt&gt; して &lt;tt class="docutils literal"&gt;merge&lt;/tt&gt; するようだ。つまり，以下の手順をとる。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, blog, cygwin, cygwin, bash, zsh, firefox, Firefox, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, screen, thinkpad, ThinkPad, thinkpadhelix, TODO, Ubuntu, Vim, Vimperator, Virtualbox, Windows, yoga_tablet2, zsh, 未解決問題, zsh, cygwin, todo --&gt;
&lt;!-- category: blog, PC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;gitで &lt;tt class="docutils literal"&gt;clone&lt;/tt&gt; したリポジトリを改変しながら追従するが， &lt;tt class="docutils literal"&gt;push&lt;/tt&gt; はできない（しない）とき。常にclone元(上流)で行われた改変をclone先(下流)へ取り込まなくてはならない。そういうときは &lt;tt class="docutils literal"&gt;fetch&lt;/tt&gt; して &lt;tt class="docutils literal"&gt;merge&lt;/tt&gt; するようだ。つまり，以下の手順をとる。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;まずは上流(upstream)から &lt;tt class="docutils literal"&gt;clone&lt;/tt&gt; する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone  git@github.com:user/upstream-project.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下流のリポジトリとして設定しなおす。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git remote set-url origin git@github.com:user/local-project.git
$ git remote add upstream git@github.com:user/upstream-project.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下流のリポジトリを更新するときはこんな良くある感じに。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add -A
$ git commit -m &lt;span class="s2"&gt;&amp;quot;update: local repository&amp;quot;&lt;/span&gt;
$ git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上流の更新を持ってくるときは &lt;tt class="docutils literal"&gt;fetch&lt;/tt&gt; して &lt;tt class="docutils literal"&gt;merge&lt;/tt&gt; する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git fetch upstream
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いちいち &lt;tt class="docutils literal"&gt;fetch&lt;/tt&gt; して &lt;tt class="docutils literal"&gt;merge&lt;/tt&gt; するのが面倒なら &lt;tt class="docutils literal"&gt;pull&lt;/tt&gt; しても良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git pull upstream master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし， &lt;tt class="docutils literal"&gt;pull&lt;/tt&gt; ≒ &lt;tt class="docutils literal"&gt;fetch&lt;/tt&gt; + &lt;tt class="docutils literal"&gt;merge&lt;/tt&gt; ではあるもののちょっと違うようだ。私はまだそこまで違いを気にするレベルにないが，  &lt;a class="reference external" href="http://dqn.sakusakutto.jp/2012/11/git_pull.html"&gt;Git pullを使うべきでない３つの理由 · DQNEO起業日記&lt;/a&gt;  という記事もあったので「git pull の落とし穴」にハマったらまた勉強したいと思う。一回ぐらいハマったほうが理解できるかもしれないからね。&lt;/p&gt;
</content><category term="Software"></category><category term="git"></category><category term="CUI"></category></entry><entry><title>VirtualboxがWindows7で動作しない場合はversion 4.2.20まで落とす</title><link href="http://blog.calcurio.com/virtualbox-version.html" rel="alternate"></link><published>2016-05-30T20:16:18+09:00</published><updated>2016-05-30T20:22:17+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-05-30:/virtualbox-version.html</id><summary type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, blog, cygwin, cygwin, bash, zsh, firefox, Firefox, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, screen, thinkpad, ThinkPad, thinkpadhelix, TODO, Ubuntu, Vim, Vimperator, yoga_tablet2, zsh, 未解決問題, zsh, cygwin, todo --&gt;
&lt;!-- category: blog, PC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;Virtualboxの最新版5.0.20だと，Windows7では仮想マシンを起動できない場合がある。
その場合は，適当な古いバージョンを利用すれば，とりあえず起動できるようになる。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, blog, cygwin, cygwin, bash, zsh, firefox, Firefox, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, screen, thinkpad, ThinkPad, thinkpadhelix, TODO, Ubuntu, Vim, Vimperator, yoga_tablet2, zsh, 未解決問題, zsh, cygwin, todo --&gt;
&lt;!-- category: blog, PC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;Virtualboxの最新版5.0.20だと，Windows7では仮想マシンを起動できない場合がある。
その場合は，適当な古いバージョンを利用すれば，とりあえず起動できるようになる。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;私の場合は，4.2.20まで落とせば動作した。もう少し新しいバージョンでも動作するかも知れない。原因は不明。&lt;/p&gt;
</content><category term="Software"></category><category term="Virtualbox"></category><category term="Windows"></category></entry><entry><title>入れ子になったscreenのプロセス間でペーストバッファを共有する</title><link href="http://blog.calcurio.com/screen-common-paste.html" rel="alternate"></link><published>2016-05-28T08:56:07+09:00</published><updated>2016-05-28T09:46:16+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-05-28:/screen-common-paste.html</id><summary type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, blog, cygwin, firefox, Firefox, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, thinkpad, ThinkPad, thinkpadhelix, TODO, Ubuntu, Vim, Vimperator, yoga_tablet2, zsh, 未解決問題, zsh, cygwin, todo --&gt;
&lt;!-- category: blog, PC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;Screenを入れ子構造で起動すると，デフォルト設定ではペーストバッファはそれぞれ独立したものになる。外観は統合されているのに，これは不自然なので共有する。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, blog, cygwin, firefox, Firefox, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, thinkpad, ThinkPad, thinkpadhelix, TODO, Ubuntu, Vim, Vimperator, yoga_tablet2, zsh, 未解決問題, zsh, cygwin, todo --&gt;
&lt;!-- category: blog, PC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;Screenを入れ子構造で起動すると，デフォルト設定ではペーストバッファはそれぞれ独立したものになる。外観は統合されているのに，これは不自然なので共有する。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;難しいことはなく， &lt;tt class="docutils literal"&gt;.screenrc&lt;/tt&gt; でファイルを通じてペーストバッファを読み書きするように設定するだけ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ペーストバッファを保存するファイル&lt;/span&gt;
bufferfile &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.screen_exchange
&lt;span class="c1"&gt;# ペーストコマンドを実行するまえにバッファファイルを読み込む&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;readbuf&amp;#39;&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;paste .&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上。&lt;/p&gt;
</content><category term="Software"></category><category term="screen"></category><category term="Cygwin"></category><category term="bash"></category><category term="zsh"></category></entry><entry><title>Vimperatorのmigemo_hint.jsを改変した</title><link href="http://blog.calcurio.com/vimperator-migemo_hint.html" rel="alternate"></link><published>2016-05-27T22:23:11+09:00</published><updated>2016-06-05T23:38:44+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-05-27:/vimperator-migemo_hint.html</id><summary type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, bash未解決問題zshcygwintodo, blog, cygwin, Firefox, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, thinkpad, ThinkPad, thinkpadhelix, TODO, Ubuntu, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;XUL/Migemoのアップデートに伴い，Vimperatorのmigemo_hint.jsが動作しなくなった。要はXUL/Migemoのクラスを呼び出せないことが原因。XUL/Migemoのchrome.manifestを見れば一目瞭然である。javascriptのことなど何もしらないが，ひとまず動作させるために改変した。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, bash未解決問題zshcygwintodo, blog, cygwin, Firefox, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, thinkpad, ThinkPad, thinkpadhelix, TODO, Ubuntu, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, software, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;XUL/Migemoのアップデートに伴い，Vimperatorのmigemo_hint.jsが動作しなくなった。要はXUL/Migemoのクラスを呼び出せないことが原因。XUL/Migemoのchrome.manifestを見れば一目瞭然である。javascriptのことなど何もしらないが，ひとまず動作させるために改変した。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;だいたい動いているのでとりあえずはこれで良しとする。作者様のgithubが更新されたらそちらを利用したい。&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://github.com/vimpr/vimperator-plugins/blob/master/migemo_hint.js"&gt;vimperator-plugins/migemo_hint.js at master · vimpr/vimperator-plugins&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Vimperator plugin: &amp;#39;Hint Matching with XUL/Migemo&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;// Last Change: 23-Mar-2011.&lt;/span&gt;
&lt;span class="c1"&gt;// License: Creative Commons&lt;/span&gt;
&lt;span class="c1"&gt;// Maintainer: Trapezoid &amp;lt;trapezoid.g@gmail.com&amp;gt; - http://unsigned.g.hatena.ne.jp/Trapezoid&lt;/span&gt;
&lt;span class="c1"&gt;// Require: XUL/Migemo add-on - https://addons.mozilla.org/firefox/addon/5239&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;// extended hint matching with migemo for Vimperator&lt;/span&gt;

&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hintmatching&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;custom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;liberator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customHintMatcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputString&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;XMigemoCore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;XMigemoTextUtils&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;resource://xulmigemo-modules/core/core.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;XMigemoCore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MigemoCoreFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ja&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;Components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;resource://xulmigemo-modules/core/textUtils.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;XMigemoTextUtils&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MigemoTextUtils&lt;/span&gt;
        &lt;span class="c1"&gt;//XMigemoCore = Cc[&amp;#39;@piro.sakura.ne.jp/xmigemo/factory;1&amp;#39;]&lt;/span&gt;
        &lt;span class="c1"&gt;//                        .getService(Components.interfaces.pIXMigemoFactory)&lt;/span&gt;
        &lt;span class="c1"&gt;//                        .getService(&amp;#39;ja&amp;#39;);&lt;/span&gt;
        &lt;span class="c1"&gt;//XMigemoTextUtils = Cc[&amp;#39;@piro.sakura.ne.jp/xmigemo/text-utility;1&amp;#39;]&lt;/span&gt;
        &lt;span class="c1"&gt;//                        .getService(Ci.pIXMigemoTextUtils);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ex&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;ex&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;){}&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;XMigemoTextUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getANDFindRegExpFromTerms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;XMigemoCore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRegExps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputString&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hintString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hintString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="software"></category><category term="Firefox"></category><category term="Vimperator"></category></entry><entry><title>Cygwinのforkが失敗する</title><link href="http://blog.calcurio.com/cygwin-fork-problem.html" rel="alternate"></link><published>2016-05-16T19:37:10+09:00</published><updated>2016-06-07T07:52:49+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-05-16:/cygwin-fork-problem.html</id><summary type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, blog, cygwin, Firefox, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, thinkpad, ThinkPad, thinkpadhelix, TODO, Ubuntu, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;最近，Cygwinでlsなりcdの応答が非常に遅いことがたまにある。
しばらく放置すると次のようなエラーメッセージがでてくるが，原因と解決方法は不明。
rebaseallしてみても効果がない。&lt;/p&gt;
&lt;p&gt;cygiwnのforkに関する問題というのはわかるが…どうしたらいいのだろうか。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, blog, cygwin, Firefox, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, thinkpad, ThinkPad, thinkpadhelix, TODO, Ubuntu, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI, Software/Linux --&gt;
&lt;p&gt;最近，Cygwinでlsなりcdの応答が非常に遅いことがたまにある。
しばらく放置すると次のようなエラーメッセージがでてくるが，原因と解決方法は不明。
rebaseallしてみても効果がない。&lt;/p&gt;
&lt;p&gt;cygiwnのforkに関する問題というのはわかるが…どうしたらいいのだろうか。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;もう面倒なので，再度Cygwinをインストールしなおしたらこの問題は発生しなくなった。
いろいろ試すより，やり直す方が楽だね。&lt;/p&gt;
&lt;!-- code-block: bash

zsh: fork failed: resource temporarily unavailable
VCS_INFO_detect_git:9: fork failed: resource temporarily unavailable --&gt;
</content><category term="Software"></category><category term="bash"></category><category term="zsh"></category><category term="Cygwin"></category></entry><entry><title>UbuntuをシリアルコンソールからPreseedで自動インストールする</title><link href="http://blog.calcurio.com/ubuntu-preseed.html" rel="alternate"></link><published>2016-05-16T01:43:38+09:00</published><updated>2016-06-07T07:50:12+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-05-16:/ubuntu-preseed.html</id><summary type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, blog, cygwin, Firefox, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, thinkpad, ThinkPad, thinkpadhelix, TODO, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI --&gt;
&lt;p&gt;UbuntuやDebianでは，予め設定ファイルを作成してインストーラーに
読み込ませることで自動的にインストールできる。この仕組みはPreseedと呼ばれる。&lt;/p&gt;
&lt;p&gt;似たものとしては，CentOSのkickstartがある。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, blog, cygwin, Firefox, keyboard, math, PC自作, pelican, Pelican, pelican, git, percol, python, python, reStructuredText, Vimperator, thinkpad, ThinkPad, thinkpadhelix, TODO, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI --&gt;
&lt;p&gt;UbuntuやDebianでは，予め設定ファイルを作成してインストーラーに
読み込ませることで自動的にインストールできる。この仕組みはPreseedと呼ばれる。&lt;/p&gt;
&lt;p&gt;似たものとしては，CentOSのkickstartがある。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="preseediso"&gt;
&lt;h2&gt;preseed用isoイメージの作成&lt;/h2&gt;
&lt;p&gt;ubuntu.comよりisoイメージをダウンロードする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://releases.ubuntu.com/14.04/ubuntu-14.04.4-server-amd64.iso
$ mkdir mountpoint-iso
$ sudo mount -t iso9660 ubuntu-14.04-server-amd64.iso mountpoint-iso
$ find mountpoint-iso ! -type l &lt;span class="p"&gt;|&lt;/span&gt; cpio -pdum updated-iso/
$ vim dvdr/isolinux/isolinux.cfg
   &lt;span class="c1"&gt;#  append行に console=tty0 console=ttyS0,115200n8 を追記する&lt;/span&gt;
   &lt;span class="c1"&gt;#  書き換えたappendのラベルを呼び出すように default &amp;lt;label name&amp;gt; と書き換える&lt;/span&gt;

    default linux
    timeout &lt;span class="m"&gt;600&lt;/span&gt;

    label linux
      menu label ^Install ubuntu
      kernel /install/vmlinuz
      append &lt;span class="nv"&gt;DEBCONF_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="nv"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nv"&gt;locale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8 console-setup/charmap&lt;span class="o"&gt;=&lt;/span&gt;UTF-8 console-setup/layoutcode&lt;span class="o"&gt;=&lt;/span&gt;us console-setup/ask_detect&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; pkgsel/language-pack-patterns&lt;span class="o"&gt;=&lt;/span&gt;pkgsel/install-language-support&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="nv"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;eth0 &lt;span class="nv"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;localhost &lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;localdomain &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/preseed.cfg &lt;span class="nv"&gt;vga&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;normal &lt;span class="nv"&gt;initrd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/install/initrd.gz noslpash nomodest &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tty0 &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ttyS0,115200n8 --

$ sudo genisoimage -N -J -R -D -V &lt;span class="s2"&gt;&amp;quot;ubuntu-14.04&amp;quot;&lt;/span&gt; -o ubuntu-14.04-server-amd64-preseed.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size &lt;span class="m"&gt;4&lt;/span&gt; -boot-info-table updated-iso
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cfgファイルはisoの中身に仕込むのが楽だろう。
同時にmacアドレスからhostnameを指定するスクリプトも仕込んでおく。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preseed-cfg"&gt;
&lt;h2&gt;preseed.cfgの作成&lt;/h2&gt;
&lt;p&gt;Ubuntuではrootログインを許可すると
一般ユーザをsudoersに追加しなくなる。
sudo を使いたいなら， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;d-i&lt;/span&gt; &lt;span class="pre"&gt;passwd/root-login&lt;/span&gt; boolean false&lt;/tt&gt; とするか，
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;post-installation&lt;/span&gt;&lt;/tt&gt; で自作スクリプトを実行する。&lt;/p&gt;
&lt;p&gt;Preseedの完成版はぐぐれば沢山でてくるので略&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://orebibou.com/2014/06/%E3%82%B5%E3%83%BC%E3%83%90%E5%A4%A7%E9%87%8F%E6%A7%8B%E7%AF%89%E6%99%82%E3%81%AE%E3%82%AD%E3%83%A2-%EF%BD%9Epreseed%E3%81%A7%E3%81%AElinux%E8%87%AA%E5%8B%95%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88/"&gt;サーバ大量構築時のキモ ～PreseedでのLinux自動インストールディスク作成～ | 俺的備忘録 〜なんかいろいろ〜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://d.hatena.ne.jp/fujisan3776/20100630/1277861431"&gt;preseedを使ってDebian GNU/Linux 5.0.4(netinst)のインストール自動化を行う手順 - 富士山は世界遺産&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://qiita.com/wnoguchi/items/9a9092dd23eea88d435f#3-2"&gt;PreseedによるUbuntuの自動インストール入門 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bugs.launchpad.net/ubuntu/+source/shadow/+bug/14561"&gt;Bug #14561 “preseed doesn't setup user in /etc/sudoers” : Bugs : shadow package : Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Ubuntu"></category></entry><entry><title>ブログをgithub pagesに移行した</title><link href="http://blog.calcurio.com/pelican-github-pages.html" rel="alternate"></link><published>2016-05-11T19:15:11+09:00</published><updated>2016-05-28T09:21:44+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-05-11:/pelican-github-pages.html</id><summary type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, cygwin, Firefox, keyboard, math, PC自宅, pelican, Pelican, percol, python, python, reStructuredText, Vimperator, thinkpad, ThinkPad, thinkpadhelix, TODO, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI --&gt;
&lt;p&gt;このブログはpython製の静的ブログエンジン &lt;tt class="docutils literal"&gt;pelican&lt;/tt&gt; でhtmlを作成している。
今までは自宅サーバのapache2でサイトを公開していたが，このたびgithub pagesでホスティングする
ようにした。その手順をメモする。&lt;/p&gt;
&lt;p&gt;背景は以下の通り。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;自宅サーバ廃止にむけて，Webサイトを外部サービスへ移行したい&lt;ul&gt;
&lt;li&gt;Wordpressの動的サイトもある&lt;/li&gt;
&lt;li&gt;まずはpelicanのブログだけ移行する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;github pages使ってみたい&lt;ul&gt;
&lt;li&gt;もともとpelicanのテーマやconfファイルはgitで管理してた&lt;/li&gt;
&lt;li&gt;htmlのデプロイ先もgitにしたい&lt;/li&gt;
&lt;li&gt;でもreSTファイルは非公開にしたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><content type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, cygwin, Firefox, keyboard, math, PC自宅, pelican, Pelican, percol, python, python, reStructuredText, Vimperator, thinkpad, ThinkPad, thinkpadhelix, TODO, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI --&gt;
&lt;p&gt;このブログはpython製の静的ブログエンジン &lt;tt class="docutils literal"&gt;pelican&lt;/tt&gt; でhtmlを作成している。
今までは自宅サーバのapache2でサイトを公開していたが，このたびgithub pagesでホスティングする
ようにした。その手順をメモする。&lt;/p&gt;
&lt;p&gt;背景は以下の通り。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;自宅サーバ廃止にむけて，Webサイトを外部サービスへ移行したい&lt;ul&gt;
&lt;li&gt;Wordpressの動的サイトもある&lt;/li&gt;
&lt;li&gt;まずはpelicanのブログだけ移行する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;github pages使ってみたい&lt;ul&gt;
&lt;li&gt;もともとpelicanのテーマやconfファイルはgitで管理してた&lt;/li&gt;
&lt;li&gt;htmlのデプロイ先もgitにしたい&lt;/li&gt;
&lt;li&gt;でもreSTファイルは非公開にしたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="github-pageshtml"&gt;
&lt;h2&gt;github pagesにhtmlを置く&lt;/h2&gt;
&lt;p&gt;github pagesは使いたい。でもhtmlの生成元になるreSTファイルは公開したくない。
以下の特徴を鑑み，masterブランチはBitbuketに，gh-pagesブランチはGithubにpushすることにした。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Github&lt;ul&gt;
&lt;li&gt;プライベードリポジトリは有料&lt;/li&gt;
&lt;li&gt;Github Pagesはリポジトリごとに作れる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bitbuket&lt;ul&gt;
&lt;li&gt;プライベードリポジトリは無料&lt;/li&gt;
&lt;li&gt;Bitbucket Pagesは1ユーザに1つしか作れない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="gh-pagesgithub-masterbitbuket"&gt;
&lt;h3&gt;gh-pagesブランチはGithub，masterブランチはBitbuketに&lt;/h3&gt;
&lt;p&gt;まず，リモートリポジトリを追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git remote add origin git@bitbucket.org:user/project.git
$ git remote add github git@github.com:user/project.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでmasterブランチをoriginへpushするときはBitbucketにuploadされる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add -A
$ git commit -m &lt;span class="s1"&gt;&amp;#39;hoge&amp;#39;&lt;/span&gt;
$ git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gh-pagesブランチへpushすれば，githubへアップロードされる。
pelicanの生成したHTMLだけpushしたいということもあるし，ブランチの切り替えがめんどくさい。
そこで，gh-pagesブランチへのpushはPelicanの &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; に以下のターゲットを作成しておこなう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
    ghp-import -m &lt;span class="s2"&gt;&amp;quot;Generate Pelican site&amp;quot;&lt;/span&gt; -b &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;
    git push -f github &lt;span class="k"&gt;$(&lt;/span&gt;GITHUB_PAGES_BRANCH&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make github
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どうせgh-pagesをpullすることはないので &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; では &lt;tt class="docutils literal"&gt;git push &lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt; として強制上書きする。
むしろ &lt;tt class="docutils literal"&gt;git push &lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt; にしておかないと内容の不一致によりエラーになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push github gh-pages
To git@github.com:user/project.git
 ! &lt;span class="o"&gt;[&lt;/span&gt;rejected&lt;span class="o"&gt;]&lt;/span&gt;        gh-pages -&amp;gt; gh-pages &lt;span class="o"&gt;(&lt;/span&gt;fetch first&lt;span class="o"&gt;)&lt;/span&gt;
error: failed to push some refs to &lt;span class="s1"&gt;&amp;#39;git@github.com:user/project.git&amp;#39;&lt;/span&gt;
hint: Updates were rejected because the remote contains work that you &lt;span class="k"&gt;do&lt;/span&gt;
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: &lt;span class="o"&gt;(&lt;/span&gt;e.g., &lt;span class="s1"&gt;&amp;#39;git pull ...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; before pushing again.
hint: See the &lt;span class="s1"&gt;&amp;#39;Note about fast-forwards&amp;#39;&lt;/span&gt; in &lt;span class="s1"&gt;&amp;#39;git push --help&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; details.
Makefile:154: ターゲット &lt;span class="s1"&gt;&amp;#39;github&amp;#39;&lt;/span&gt; のレシピで失敗しました
make: *** &lt;span class="o"&gt;[&lt;/span&gt;github&lt;span class="o"&gt;]&lt;/span&gt; エラー &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;URLを独自ドメインサイトの一部にする&lt;/h2&gt;
&lt;p&gt;Github pagesのURL &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://user.github.io/project&lt;/span&gt;&lt;/tt&gt; に
独自ドメインのURL &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://caucrio.com/blog&lt;/span&gt;&lt;/tt&gt; でアクセスできるようにする。&lt;/p&gt;
&lt;p&gt;apacheのProxyPass設定を利用する。httpd.confに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ProxyPass /blog https://user.github.io/project
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすれば良い。なお，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ProxyPass /blog/ https://user.github.io/project/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;では &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://calcurio.com/blog&lt;/span&gt;&lt;/tt&gt; にアクセスするとローカルのファイル &lt;tt class="docutils literal"&gt;&amp;lt;document &lt;span class="pre"&gt;root&amp;gt;/blog&lt;/span&gt;&lt;/tt&gt; が返されることになる。よろしくない。&lt;/p&gt;
&lt;div class="section" id="relative-url-true"&gt;
&lt;h3&gt;RELATIVE_URL = True でリンクの相対指定&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://user.github.io/project&lt;/span&gt;&lt;/tt&gt; と &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://calcurio.com/blog&lt;/span&gt;&lt;/tt&gt; に同時に
アクセスできるようにするには，pelicanの生成するhtmlは相対ディレクトリで
リンクが記述されていなくてはならない。 &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; あるいは
&lt;tt class="docutils literal"&gt;publishconf.py&lt;/tt&gt; に以下を設定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;RELATIVE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rel-canonical-url"&gt;
&lt;h3&gt;rel=&amp;quot;canonical&amp;quot; でカノニカルなURLを設定する&lt;/h3&gt;
&lt;p&gt;このままでは，2つのURLで同じ内容のWebサイトが存在することになる。
SEO的に良くないので, rel=&amp;quot;canonical&amp;quot;要素でGoogleにどちらかをcanonicalなURLとして通知する。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; に&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CANONICALURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://calcurio.com&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;としてから，Pelicanのthemeファイルに以下の行を挿入する。
ただし，以下の指定では， &lt;tt class="docutils literal"&gt;tags2.html&lt;/tt&gt; のcanonicalなURLは &lt;tt class="docutils literal"&gt;tags.html&lt;/tt&gt; になることに注意。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;base.html:         &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;canonical&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% block canonicalurl %}{{ CANONICALURL }}{%endblock%}&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grep canonical *.html

archives.html:     {% block canonicalurl %}{{ CANONICALURL }}/archives.html{%endblock%}
article.html:      {% block canonicalurl %}{{ CANONICALURL }}/{{ article.url}}{%endblock%}
author.html:       {% block canonicalurl %}{{ CANONICALURL }}/{{ author.url }}{%endblock%}
authors.html:      {% block canonicalurl %}{{ CANONICALURL }}/authors.html{%endblock%}
categories.html:   {% block canonicalurl %}{{ CANONICALURL }}/categories.html{%endblock%}
category.html:     {% block canonicalurl %}{{ CANONICALURL }}/{{ category.url }}{%endblock%}
index.html:        {% block canonicalurl %}{{ CANONICALURL }}{%endblock%}
page.html:         {% block canonicalurl %}{{ CANONICALURL }}/{{ page.url }}{%endblock%}
subcategory.html:  {% block canonicalurl %}{{ CANONICALURL }}/{{ subcategory.url }}{%endblock%}
tag.html:          {% block canonicalurl %}{{ CANONICALURL }}/{{ tag.url }}{%endblock%}
tags.html:         {% block canonicalurl %}{{ CANONICALURL }}/tags.html{%endblock%}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="blog"></category><category term="Pelican"></category><category term="git"></category></entry><entry><title>pelicanにrobots.txtを追加する</title><link href="http://blog.calcurio.com/pelican-robots.html" rel="alternate"></link><published>2016-05-11T07:25:17+09:00</published><updated>2016-06-25T17:47:43+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2016-05-11:/pelican-robots.html</id><summary type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, cygwin, Firefox, keyboard, math, PC自作, pelican, Pelican, percol, python, python, reStructuredText, Vimperator, thinkpad, ThinkPad, thinkpadhelix, TODO, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI --&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican/wiki/Tips-n-Tricks"&gt;Tips n Tricks · getpelican/pelican Wiki&lt;/a&gt;
にあるように，静的なファイルとしてrobots.txtを追加する方法は以下の2つがある。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Makefileを編集する&lt;/li&gt;
&lt;li&gt;pelicanconf.pyを編集する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;複数の &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; を管理している都合上，今回は &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; を編集することにした。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, bash, screen, cygwin, bash, zsh, cygwin, Firefox, keyboard, math, PC自作, pelican, Pelican, percol, python, python, reStructuredText, Vimperator, thinkpad, ThinkPad, thinkpadhelix, TODO, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI --&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican/wiki/Tips-n-Tricks"&gt;Tips n Tricks · getpelican/pelican Wiki&lt;/a&gt;
にあるように，静的なファイルとしてrobots.txtを追加する方法は以下の2つがある。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Makefileを編集する&lt;/li&gt;
&lt;li&gt;pelicanconf.pyを編集する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;複数の &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; を管理している都合上，今回は &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; を編集することにした。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;まず &lt;tt class="docutils literal"&gt;content&lt;/tt&gt; ディレクトリ以下に &lt;tt class="docutils literal"&gt;extra&lt;/tt&gt; ディレクトリを作成して &lt;tt class="docutils literal"&gt;robots.txt&lt;/tt&gt; を設置する。
今回は &lt;tt class="docutils literal"&gt;robots.txt&lt;/tt&gt; の中身は次のようにした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;User-agent: *
Disallow:

Sitemap: http://blog.calcurio.com/sitemap.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -d &lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/extra&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; cp &lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/extra/* &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;の一行を &lt;tt class="docutils literal"&gt;html&lt;/tt&gt; , &lt;tt class="docutils literal"&gt;regenerate&lt;/tt&gt; , &lt;tt class="docutils literal"&gt;republish&lt;/tt&gt; , &lt;tt class="docutils literal"&gt;publish&lt;/tt&gt; ターゲット等に挿入する。
その他のターゲットは依存関係で解決されているため，変更する必要はない。
私の場合は以下のようにMakefileを編集した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;html:
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;CONFFILE&lt;span class="k"&gt;)&lt;/span&gt; --cache-path &lt;span class="k"&gt;$(&lt;/span&gt;CACHEDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -d &lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_content/extra&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; cp &lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_content/extra/* &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;

regenerate:
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; -r &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;CONFFILE&lt;span class="k"&gt;)&lt;/span&gt; --cache-path &lt;span class="k"&gt;$(&lt;/span&gt;CACHEDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -d &lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_content/extra&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; cp &lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_content/extra/* &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;

republish:
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; -r &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;PUBLISHCONF&lt;span class="k"&gt;)&lt;/span&gt; --cache-path &lt;span class="k"&gt;$(&lt;/span&gt;CACHEDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -d &lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_content/extra&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; cp &lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_content/extra/* &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;

publish:
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;PUBLISHCONF&lt;span class="k"&gt;)&lt;/span&gt; --cache-path &lt;span class="k"&gt;$(&lt;/span&gt;CACHEDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; -d &lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_content/extra&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; cp &lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_content/extra/* &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican/wiki/Tips-n-Tricks"&gt;Tips n Tricks · getpelican/pelican Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Pelican"></category></entry><entry><title>stowでソースからmakeしたプログラムを管理する</title><link href="http://blog.calcurio.com/stow.html" rel="alternate"></link><published>2015-03-05T20:46:17+09:00</published><updated>2016-06-05T23:38:05+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-03-05:/stow.html</id><summary type="html">&lt;!-- tags: bash, bash, screen, cygwin, cygwin, Firefox, keyboard, math, pelican, Pelican, percol, python, python, reStructuredText, Vimperator, TODO, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI --&gt;
&lt;p&gt;aptやyumと違って，makeしたプログラムはアンインストールなど管理が面倒。そこで，ちょっと前に &lt;tt class="docutils literal"&gt;paco&lt;/tt&gt; でソースからコンパイルしたプログラムを管理するのが流行っていたように思う。しかし， &lt;tt class="docutils literal"&gt;paco&lt;/tt&gt; は開発終了しているので今から使うには難があるし，なによりもcygwinに対応していない。&lt;/p&gt;
&lt;p&gt;参考: &lt;a class="reference external" href="http://rcmdnk.github.io/blog/2013/08/04/computer-linux-mac/"&gt;pacoでmake installしたパッケージを管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;そこで，今回は &lt;tt class="docutils literal"&gt;stow&lt;/tt&gt; を使ってみることにした。stowはperlで動くかなーりシンプルなプログラムなので管理も楽だ。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, bash, screen, cygwin, cygwin, Firefox, keyboard, math, pelican, Pelican, percol, python, python, reStructuredText, Vimperator, TODO, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI --&gt;
&lt;p&gt;aptやyumと違って，makeしたプログラムはアンインストールなど管理が面倒。そこで，ちょっと前に &lt;tt class="docutils literal"&gt;paco&lt;/tt&gt; でソースからコンパイルしたプログラムを管理するのが流行っていたように思う。しかし， &lt;tt class="docutils literal"&gt;paco&lt;/tt&gt; は開発終了しているので今から使うには難があるし，なによりもcygwinに対応していない。&lt;/p&gt;
&lt;p&gt;参考: &lt;a class="reference external" href="http://rcmdnk.github.io/blog/2013/08/04/computer-linux-mac/"&gt;pacoでmake installしたパッケージを管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;そこで，今回は &lt;tt class="docutils literal"&gt;stow&lt;/tt&gt; を使ってみることにした。stowはperlで動くかなーりシンプルなプログラムなので管理も楽だ。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;stow自体のインストールはパッケージマネージャから。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aptitude install stow     &lt;span class="c1"&gt;# debian&lt;/span&gt;
$ apt-cyg install stow      &lt;span class="c1"&gt;# cygwin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まずは初期設定を済ませる。 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/stow&lt;/span&gt;&lt;/tt&gt; 以下にmakeしたプログラムをおいておきたい場合は次のようにする。いうまでもないことだが，新規シェルでも有効になるように &lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt; とかにも &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt; を追加しておくこと。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p ~/.local/stow           &lt;span class="c1"&gt;# stowの管理フォルダを作成&lt;/span&gt;
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PAHT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.local/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;   &lt;span class="c1"&gt;# stowがシンボリックリンクを貼るディレクトリにPATHを通しておく&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に，stowを使って &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;hoge-0.01&lt;/span&gt;&lt;/tt&gt; みたいなプログラムをインストールする流れは，次のようになる。こうするとstowは &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/tt&gt; や &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/share&lt;/span&gt;&lt;/tt&gt; などにシンボリックリンクを貼ってくれて，普通にプログラムが使えるようになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;~/.local/stow/hoge-0.01   &lt;span class="c1"&gt;# stow管理フォルダ以下にmakeする&lt;/span&gt;
$ make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/.local/stow
$ stow hoge-0.01                 &lt;span class="c1"&gt;# stowでシンボリックリンクを作る&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;その他の機能（アンインストールなど）はhelpを見てください。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ stow --help
stow &lt;span class="o"&gt;(&lt;/span&gt;GNU Stow&lt;span class="o"&gt;)&lt;/span&gt; version &lt;span class="m"&gt;2&lt;/span&gt;.2.0

SYNOPSIS:

    stow &lt;span class="o"&gt;[&lt;/span&gt;OPTION ...&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-D&lt;span class="p"&gt;|&lt;/span&gt;-S&lt;span class="p"&gt;|&lt;/span&gt;-R&lt;span class="o"&gt;]&lt;/span&gt; PACKAGE ... &lt;span class="o"&gt;[&lt;/span&gt;-D&lt;span class="p"&gt;|&lt;/span&gt;-S&lt;span class="p"&gt;|&lt;/span&gt;-R&lt;span class="o"&gt;]&lt;/span&gt; PACKAGE ...

OPTIONS:

    -d DIR, --dir&lt;span class="o"&gt;=&lt;/span&gt;DIR     Set stow dir to DIR &lt;span class="o"&gt;(&lt;/span&gt;default is current dir&lt;span class="o"&gt;)&lt;/span&gt;
    -t DIR, --target&lt;span class="o"&gt;=&lt;/span&gt;DIR  Set target to DIR &lt;span class="o"&gt;(&lt;/span&gt;default is parent of stow dir&lt;span class="o"&gt;)&lt;/span&gt;

    -S, --stow            Stow the package names that follow this option
    -D, --delete          Unstow the package names that follow this option
    -R, --restow          Restow &lt;span class="o"&gt;(&lt;/span&gt;like stow -D followed by stow -S&lt;span class="o"&gt;)&lt;/span&gt;

    --ignore&lt;span class="o"&gt;=&lt;/span&gt;REGEX        Ignore files ending in this Perl regex
    --defer&lt;span class="o"&gt;=&lt;/span&gt;REGEX         Don&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t stow files beginning with this Perl regex
                          &lt;span class="k"&gt;if&lt;/span&gt; the file is already stowed to another package
    --override&lt;span class="o"&gt;=&lt;/span&gt;REGEX      Force stowing files beginning with this Perl regex
                          &lt;span class="k"&gt;if&lt;/span&gt; the file is already stowed to another package
    --adopt               &lt;span class="o"&gt;(&lt;/span&gt;Use with care!&lt;span class="o"&gt;)&lt;/span&gt;  Import existing files into stow package
                          from target.  Please &lt;span class="nb"&gt;read&lt;/span&gt; docs before using.
    -p, --compat          Use legacy algorithm &lt;span class="k"&gt;for&lt;/span&gt; unstowing

    -n, --no, --simulate  Do not actually make any filesystem changes
    -v, --verbose&lt;span class="o"&gt;[=&lt;/span&gt;N&lt;span class="o"&gt;]&lt;/span&gt;     Increase verbosity &lt;span class="o"&gt;(&lt;/span&gt;levels are &lt;span class="m"&gt;0&lt;/span&gt;,1,2,3&lt;span class="p"&gt;;&lt;/span&gt;
                            -v or --verbose adds &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; --verbose&lt;span class="o"&gt;=&lt;/span&gt;N sets level&lt;span class="o"&gt;)&lt;/span&gt;
    -V, --version         Show stow version number
    -h, --help            Show this &lt;span class="nb"&gt;help&lt;/span&gt;

Report bugs to: bug-stow@gnu.org
Stow home page: &amp;lt;http://www.gnu.org/software/stow/&amp;gt;
General &lt;span class="nb"&gt;help&lt;/span&gt; using GNU software: &amp;lt;http://www.gnu.org/gethelp/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，毎回このインストール作業をするのは面倒なので， &lt;tt class="docutils literal"&gt;astow&lt;/tt&gt; というシェルスクリプトを書いてみた &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# 自動的にstowするスクリプト&lt;/span&gt;
&lt;span class="c1"&gt;# 1番目の引数はパッケージ名&lt;/span&gt;
&lt;span class="c1"&gt;# 2番目以降はconfigureの引数になる&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$#&lt;/span&gt; -ge &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;PACKAGENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
    &lt;span class="nb"&gt;shift&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;PACKAGENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$PACKAGENAME&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$PACKAGENAME&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;y/n&lt;span class="o"&gt;]&lt;/span&gt; n:
    &lt;span class="nb"&gt;read&lt;/span&gt; ans
    &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$ans&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -d &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.local/stow/ &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    mkdir -p &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.local/stow/
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;====&lt;/span&gt;  ./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.local/stow/&lt;span class="nv"&gt;$PACKAGENAME&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;=====================&lt;/span&gt;
./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.local/stow/&lt;span class="nv"&gt;$PACKAGENAME&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;====&lt;/span&gt; &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="o"&gt;=======================================================&lt;/span&gt;
    make
    &lt;span class="nv"&gt;MAKEERROR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
   &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Error : ./conifigure --prefix=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.local/stow/&lt;/span&gt;&lt;span class="nv"&gt;$PACKAGENAME&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$MAKEERROR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;====&lt;/span&gt; make install &lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.local/stow/&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PACKAGENAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=====================&lt;/span&gt;
    make install &lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.local/stow/&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PACKAGENAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;MAKEERROR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ERROR : make&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$MAKEERROR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;====&lt;/span&gt; stow &lt;span class="nv"&gt;$PACKAGENAME&lt;/span&gt; &lt;span class="o"&gt;==========================================&lt;/span&gt;
    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.local/stow
    stow &lt;span class="nv"&gt;$PACKAGENAME&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ERROR : make install prefix=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.local/stow/&lt;/span&gt;&lt;span class="nv"&gt;$PACKAGENAME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;astow&lt;/tt&gt; は第一引数としてパッケージ名（ &lt;tt class="docutils literal"&gt;stow&lt;/tt&gt; ディレクトリ以下に作るフォルダ名），第二引数として &lt;tt class="docutils literal"&gt;configure&lt;/tt&gt; のオプションを要求する。つまり， &lt;tt class="docutils literal"&gt;astow&lt;/tt&gt; を使うとインストール作業は次のように簡略化できるのだ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; hoge-0.01  &lt;span class="c1"&gt;# ソースコードのあるディレクトリへ移動&lt;/span&gt;
$ astow hoge-0.01 --prefix&lt;span class="o"&gt;=&lt;/span&gt;~.local/stow
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，引数なしで実行するとカレントディレクトリ名を元にパッケージ名を決定する。良かったら使ってみてください。&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;automated stow の略のつもり&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="Software"></category><category term="Cygwin"></category><category term="bash"></category><category term="zsh"></category></entry><entry><title>64bit版CygwinでwolをコンパイルしてWake on Lanする</title><link href="http://blog.calcurio.com/cygwin-wol.html" rel="alternate"></link><published>2015-03-05T18:55:46+09:00</published><updated>2016-06-05T23:37:59+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-03-05:/cygwin-wol.html</id><summary type="html">&lt;!-- tags: bash, bash, screen, cygwin, Firefox, keyboard, math, pelican, Pelican, percol, python, python, reStructuredText, Vimperator, TODO, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI --&gt;
&lt;p&gt;cygwinにはどうやらWakeOnLanのためのクライアントが無いようだ。そこで， &lt;a class="reference external" href="http://sourceforge.net/projects/wake-on-lan/?source=typ_redirect"&gt;wol&lt;/a&gt; コマンドをコンパイルして使えるようにする。なお，環境は以下のとおり。&lt;/p&gt;
$ uname -a
CYGWIN_NT-6.3 User-PC &lt;span class="m"&gt;1&lt;/span&gt;.7.34&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.285/5/3&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2015&lt;/span&gt;-02-04 &lt;span class="m"&gt;12&lt;/span&gt;:14 x86_64 Cygwin
&lt;/pre&gt;
</summary><content type="html">&lt;!-- tags: bash, bash, screen, cygwin, Firefox, keyboard, math, pelican, Pelican, percol, python, python, reStructuredText, Vimperator, TODO, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI --&gt;
&lt;p&gt;cygwinにはどうやらWakeOnLanのためのクライアントが無いようだ。そこで， &lt;a class="reference external" href="http://sourceforge.net/projects/wake-on-lan/?source=typ_redirect"&gt;wol&lt;/a&gt; コマンドをコンパイルして使えるようにする。なお，環境は以下のとおり。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ uname -a
CYGWIN_NT-6.3 User-PC &lt;span class="m"&gt;1&lt;/span&gt;.7.34&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.285/5/3&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2015&lt;/span&gt;-02-04 &lt;span class="m"&gt;12&lt;/span&gt;:14 x86_64 Cygwin
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;まず， &lt;a class="reference external" href="http://sourceforge.net/projects/wake-on-lan/"&gt;wol | SourceForge.net&lt;/a&gt; からソースコードをダウンロードしてくる。で，configureするのだが，そのままでは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/wol-0.7.1 $ ./configure
checking build system type... ./config.guess: unable to guess system &lt;span class="nb"&gt;type&lt;/span&gt;

This script, last modified &lt;span class="m"&gt;2004&lt;/span&gt;-01-05, has failed to recognize
the operating system you are using. It is advised that you
download the most up to date version of the config scripts from

    ftp://ftp.gnu.org/pub/gnu/config/

If the version you run &lt;span class="o"&gt;(&lt;/span&gt;./config.guess&lt;span class="o"&gt;)&lt;/span&gt; is already up to date, please
send the following data and any information you think might be
pertinent to &amp;lt;config-patches@gnu.org&amp;gt; in order to provide the needed
information to handle your system.

config.guess &lt;span class="nv"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2004&lt;/span&gt;-01-05

uname -m &lt;span class="o"&gt;=&lt;/span&gt; x86_64
uname -r &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.7.34&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.285/5/3&lt;span class="o"&gt;)&lt;/span&gt;
uname -s &lt;span class="o"&gt;=&lt;/span&gt; CYGWIN_NT-6.3
uname -v &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2015&lt;/span&gt;-02-04 &lt;span class="m"&gt;12&lt;/span&gt;:14

/usr/bin/uname -p &lt;span class="o"&gt;=&lt;/span&gt; unknown
/bin/uname -X     &lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="nv"&gt;hostinfo&lt;/span&gt;               &lt;span class="o"&gt;=&lt;/span&gt;
/bin/universe          &lt;span class="o"&gt;=&lt;/span&gt;
/usr/bin/arch -k       &lt;span class="o"&gt;=&lt;/span&gt;
/bin/arch              &lt;span class="o"&gt;=&lt;/span&gt; x86_64
/usr/bin/oslevel       &lt;span class="o"&gt;=&lt;/span&gt;
/usr/convex/getsysinfo &lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="nv"&gt;UNAME_MACHINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; x86_64
&lt;span class="nv"&gt;UNAME_RELEASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;.7.34&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.285/5/3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;UNAME_SYSTEM&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; CYGWIN_NT-6.3
&lt;span class="nv"&gt;UNAME_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2015&lt;/span&gt;-02-04 &lt;span class="m"&gt;12&lt;/span&gt;:14
configure: error: cannot guess build type&lt;span class="p"&gt;;&lt;/span&gt; you must specify one
Error : ./conifigure
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;となり，アーキテクチャを判定できないようだ。そこで &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--build&lt;/span&gt;&lt;/tt&gt; オプションで明示的に64bitのCygwinだと教えてあげることにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/wol-0.7.1 $ ./configure --build&lt;span class="o"&gt;=&lt;/span&gt;x86_64-unknown-cygwin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;tt class="docutils literal"&gt;configure&lt;/tt&gt; は通るようになったが，今度は &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; でエラーがでた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/wol-0.7.1 $ make

~~~~ 上略 ~~~~

&lt;span class="k"&gt;if&lt;/span&gt; gcc -DHAVE_CONFIG_H -I. -I. -I.. -I../intl -I../include    -g -O2 -W -Wall -Wpointer-arith -Wimplicit-function-declaration -MT realloc.o -MD -MP -MF &lt;span class="s2"&gt;&amp;quot;.deps/realloc.Tpo&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -c -o realloc.o &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; -f &lt;span class="s1"&gt;&amp;#39;realloc.c&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;realloc.c&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt; mv -f &lt;span class="s2"&gt;&amp;quot;.deps/realloc.Tpo&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.deps/realloc.Po&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; rm -f &lt;span class="s2"&gt;&amp;quot;.deps/realloc.Tpo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
realloc.c:27:7: 警告: 組み込み関数 ‘malloc’ と型が競合しています
 char *malloc &lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       ^
realloc.c:28:7: 警告: 組み込み関数 ‘realloc’ と型が競合しています
 char *realloc &lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       ^
&lt;span class="k"&gt;if&lt;/span&gt; gcc -DHAVE_CONFIG_H -I. -I. -I.. -I../intl -I../include    -g -O2 -W -Wall -Wpointer-arith -Wimplicit-function-declaration -MT getpass4.o -MD -MP -MF &lt;span class="s2"&gt;&amp;quot;.deps/getpass4.Tpo&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -c -o getpass4.o &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; -f &lt;span class="s1"&gt;&amp;#39;getpass4.c&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;getpass4.c&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt; mv -f &lt;span class="s2"&gt;&amp;quot;.deps/getpass4.Tpo&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.deps/getpass4.Po&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; rm -f &lt;span class="s2"&gt;&amp;quot;.deps/getpass4.Tpo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
In file included from getpass4.c:7:0:
getline.h:32:1: エラー: ‘getline’ と型が競合しています
 getline PARAMS &lt;span class="o"&gt;((&lt;/span&gt;char **_lineptr, size_t *_n, FILE *_stream&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 ^
In file included from /usr/include/stdio.h:29:0,
                 from getpass4.c:3:
/usr/include/sys/stdio.h:37:9: 備考: 前の ‘getline’ の宣言はここです
 ssize_t _EXFUN&lt;span class="o"&gt;(&lt;/span&gt;getline, &lt;span class="o"&gt;(&lt;/span&gt;char **, size_t *, FILE *&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         ^
In file included from getpass4.c:7:0:
getline.h:35:1: エラー: ‘getdelim’ と型が競合しています
 getdelim PARAMS &lt;span class="o"&gt;((&lt;/span&gt;char **_lineptr, size_t *_n, int _delimiter, FILE *_stream&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 ^
In file included from /usr/include/stdio.h:29:0,
                 from getpass4.c:3:
/usr/include/sys/stdio.h:38:9: 備考: 前の ‘getdelim’ の宣言はここです
 ssize_t _EXFUN&lt;span class="o"&gt;(&lt;/span&gt;getdelim, &lt;span class="o"&gt;(&lt;/span&gt;char **, size_t *, int, FILE *&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         ^
Makefile:240: ターゲット &lt;span class="s1"&gt;&amp;#39;getpass4.o&amp;#39;&lt;/span&gt; のレシピで失敗しました
make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: *** &lt;span class="o"&gt;[&lt;/span&gt;getpass4.o&lt;span class="o"&gt;]&lt;/span&gt; エラー &lt;span class="m"&gt;1&lt;/span&gt;
make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: ディレクトリ &lt;span class="s1"&gt;&amp;#39;/home/tm/wol-0.7.1/lib&amp;#39;&lt;/span&gt; から出ます
Makefile:230: ターゲット &lt;span class="s1"&gt;&amp;#39;all-recursive&amp;#39;&lt;/span&gt; のレシピで失敗しました
make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: *** &lt;span class="o"&gt;[&lt;/span&gt;all-recursive&lt;span class="o"&gt;]&lt;/span&gt; エラー &lt;span class="m"&gt;1&lt;/span&gt;
make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: ディレクトリ &lt;span class="s1"&gt;&amp;#39;/home/tm/wol-0.7.1&amp;#39;&lt;/span&gt; から出ます
Makefile:183: ターゲット &lt;span class="s1"&gt;&amp;#39;all&amp;#39;&lt;/span&gt; のレシピで失敗しました
make: *** &lt;span class="o"&gt;[&lt;/span&gt;all&lt;span class="o"&gt;]&lt;/span&gt; エラー &lt;span class="m"&gt;2&lt;/span&gt;
ERROR : make
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どうやら &lt;tt class="docutils literal"&gt;stdio.h&lt;/tt&gt; の内容と競合しているようだ。システム標準のファイルに手を加えるのは心が引けるが， &lt;tt class="docutils literal"&gt;/usr/include/sys/stdio.h&lt;/tt&gt; の該当する2行をコメントアウトする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// ssize_t  _EXFUN(getline, (char **, size_t *, FILE *));&lt;/span&gt;
&lt;span class="c1"&gt;// ssize_t  _EXFUN(getdelim, (char **, size_t *, int, FILE *));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはすんなりと &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; が通る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/wol-0.7.1 $ make
~/wol-0.7.1 $ make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なお，今回のようにソースから &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; するときは &lt;tt class="docutils literal"&gt;stow&lt;/tt&gt; を使って管理すると楽。 &lt;tt class="docutils literal"&gt;stow&lt;/tt&gt; は  &lt;a class="reference external" href="http://qiita.com/pasela/items/9c6cd7b9e477ed0501c8"&gt;paco&lt;/a&gt; のようなものだがpacoのように開発が混乱していないし，cygwinのsetup.exeでインストールできる点で優れている。 &lt;tt class="docutils literal"&gt;stow&lt;/tt&gt; の使い方については別記事 &lt;a class="reference external" href="http://blog.calcurio.com/stow.html"&gt;stowでソースからmakeしたプログラムを管理する | 電脳手帳&lt;/a&gt; に書いた。&lt;/p&gt;
</content><category term="Software"></category><category term="Cygwin"></category></entry><entry><title>楽にカレントディレクトリをコピペするコマンドを作る</title><link href="http://blog.calcurio.com/copy_paste_pwd.html" rel="alternate"></link><published>2015-02-21T16:02:05+09:00</published><updated>2016-06-05T23:37:52+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-02-21:/copy_paste_pwd.html</id><summary type="html">&lt;!-- tags: bash, Firefox, keyboard, math, pelican, Pelican, percol, python, python, reStructuredText, Vimperator, TODO, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI --&gt;
&lt;p&gt;GNU Screenなんかで作業していると，このウィンドウと同じパスへ移動したいとか思うことがある。ScreenやTmuxの機能をつかえばショートカットキー一発でかっちょいいかんじにできるだろうけど，今回はシェルのエイリアスで泥臭く，でもシンプルで柔軟な対応をすることにした。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: bash, Firefox, keyboard, math, pelican, Pelican, percol, python, python, reStructuredText, Vimperator, TODO, Vim, Vimperator, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog, Software/CUI --&gt;
&lt;p&gt;GNU Screenなんかで作業していると，このウィンドウと同じパスへ移動したいとか思うことがある。ScreenやTmuxの機能をつかえばショートカットキー一発でかっちょいいかんじにできるだろうけど，今回はシェルのエイリアスで泥臭く，でもシンプルで柔軟な対応をすることにした。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;原理&lt;/h2&gt;
&lt;p&gt;仕組みは簡単。クリップボードを介して，パスのやり取りをする。つまり，&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;クリップボードにカレントディレクトリを書き込むエイリアス &lt;tt class="docutils literal"&gt;gp&lt;/tt&gt; (get pathの略)&lt;/li&gt;
&lt;li&gt;クリップボードの中身に &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; するエイリアス &lt;tt class="docutils literal"&gt;pp&lt;/tt&gt; (put pathの略)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;の2つを作る。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;クリップボードを操作する&lt;/h2&gt;
&lt;p&gt;クリップボードを操作する方法はOSに依存する。&lt;/p&gt;
&lt;div class="section" id="cygwin"&gt;
&lt;h3&gt;cygwin&lt;/h3&gt;
&lt;p&gt;cygwinならば， &lt;tt class="docutils literal"&gt;/dev/clipboard&lt;/tt&gt; を通常のファイルのように読み書きするだけでよい。すなわち，次のように.zshrcに書けば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;gp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pwd &amp;gt; /dev/clipboard&amp;#39;&lt;/span&gt;    &lt;span class="c1"&gt;# カレントディレクトリをクリップボードへコピー&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cd `cat /dev/clipboard`&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# クリップボードのパスへ移動&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="linux"&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;p&gt;Linuxの場合は &lt;tt class="docutils literal"&gt;xclip &lt;span class="pre"&gt;-o&lt;/span&gt;&lt;/tt&gt; でクリップボードから標準出力， &lt;tt class="docutils literal"&gt;xclip &lt;span class="pre"&gt;-i&lt;/span&gt;&lt;/tt&gt; でクリップボードへ入力ができる。すなわち，次のようになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;gp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pwd | xclip -i&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# カレントディレクトリをクリップボードへコピー&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;pp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cd `xclip -o`&amp;#39;&lt;/span&gt;   &lt;span class="c1"&gt;# クリップボードのパスへ移動&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはこのエイリアスを使ってガンガン移動しまくろう。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="zsh"></category><category term="bash"></category><category term="screen"></category><category term="Cygwin"></category></entry><entry><title>シェルでディレクトリの上下移動を楽する</title><link href="http://blog.calcurio.com/move_updir.html" rel="alternate"></link><published>2015-02-18T11:52:29+09:00</published><updated>2015-02-18T12:21:48+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-02-18:/move_updir.html</id><summary type="html">&lt;!-- tags: Firefox, Pelican, TODO, Vim, keyboard, math, pelican, percol, python, python, reStructuredText, yoga_tablet2, zsh --&gt;
&lt;!-- category: PC, Software, blog, Software/Blog --&gt;
&lt;p&gt;シェルで1つ上のディレクトリに移動しようと思ったら，普通は &lt;tt class="docutils literal"&gt;cd ..&lt;/tt&gt; する。さて，深いディレクトリから脱出したいときは，いくつ上のディレクトリまでなら許容できるだろうか。&lt;/p&gt;

$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../..  &lt;span class="c1"&gt;# 2個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../..  &lt;span class="c1"&gt;# 3個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../../..  &lt;span class="c1"&gt;# 4個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../../../..  &lt;span class="c1"&gt;# 5個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../../../../..  &lt;span class="c1"&gt;# 6個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../../../../../..  &lt;span class="c1"&gt;# 7個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../../../../../../..  &lt;span class="c1"&gt;# 8個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../../../../../../../..  &lt;span class="c1"&gt;# 9個上&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;僕は4個上が限界です。それ以上だと間違いが激増する。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: Firefox, Pelican, TODO, Vim, keyboard, math, pelican, percol, python, python, reStructuredText, yoga_tablet2, zsh --&gt;
&lt;!-- category: PC, Software, blog, Software/Blog --&gt;
&lt;p&gt;シェルで1つ上のディレクトリに移動しようと思ったら，普通は &lt;tt class="docutils literal"&gt;cd ..&lt;/tt&gt; する。さて，深いディレクトリから脱出したいときは，いくつ上のディレクトリまでなら許容できるだろうか。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..  &lt;span class="c1"&gt;# 1個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../..  &lt;span class="c1"&gt;# 2個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../..  &lt;span class="c1"&gt;# 3個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../../..  &lt;span class="c1"&gt;# 4個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../../../..  &lt;span class="c1"&gt;# 5個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../../../../..  &lt;span class="c1"&gt;# 6個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../../../../../..  &lt;span class="c1"&gt;# 7個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../../../../../../..  &lt;span class="c1"&gt;# 8個上&lt;/span&gt;
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ../../../../../../../../..  &lt;span class="c1"&gt;# 9個上&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;僕は4個上が限界です。それ以上だと間違いが激増する。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;そこで &lt;em&gt;N&lt;/em&gt; 個上のディレクトリに移動する &lt;tt class="docutils literal"&gt;u&lt;/tt&gt; コマンドをエイリアスで作ってみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cd ../; LASTU=&amp;quot;u&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;uu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cd ../../; LASTU=&amp;quot;uu&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;uuu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cd ../../../; LASTU=&amp;quot;uuu&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;uuuu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cd ../../../../; LASTU=&amp;quot;uuuu&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;uuuuu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cd ../../../../../; LASTU=&amp;quot;uuuuu&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;uuuuuu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cd ../../../../../../; LASTU=&amp;quot;uuuuuu&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;uuuuuuu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cd ../../../../../../../; LASTU=&amp;quot;uuuuuuu&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;uuuuuuuu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cd ../../../../../../../../; LASTU=&amp;quot;uuuuuuuu&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こうすると，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/too/deep/directory/to/move/around/with/normal/cd/command $ uuuu
~/too/deep/directory/to/move/around $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;てな感じで，4個上でも楽に移動できる。&lt;/p&gt;
&lt;p&gt;それでも間違ったときのために &lt;em&gt;N&lt;/em&gt; 個下に戻る &lt;tt class="docutils literal"&gt;r&lt;/tt&gt; コマンドも定義しておこう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test &amp;quot;$LASTU&amp;quot; != &amp;quot;&amp;quot; &amp;amp;&amp;amp; cd - &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; eval `echo $LASTU |sed -e s/u//`; &amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;rr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test &amp;quot;$LASTU&amp;quot; != &amp;quot;&amp;quot; &amp;amp;&amp;amp; cd - &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; eval `echo $LASTU |sed -e s/uu//`; &amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;rrr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test &amp;quot;$LASTU&amp;quot; != &amp;quot;&amp;quot; &amp;amp;&amp;amp; cd - &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; eval `echo $LASTU |sed -e s/uuu//`; &amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;rrrr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test &amp;quot;$LASTU&amp;quot; != &amp;quot;&amp;quot; &amp;amp;&amp;amp; cd - &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; eval `echo $LASTU |sed -e s/uuuu//`; &amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;rrrrr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test &amp;quot;$LASTU&amp;quot; != &amp;quot;&amp;quot; &amp;amp;&amp;amp; cd - &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; eval `echo $LASTU |sed -e s/uuuuu//`; &amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;rrrrrr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test &amp;quot;$LASTU&amp;quot; != &amp;quot;&amp;quot; &amp;amp;&amp;amp; cd - &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; eval `echo $LASTU |sed -e s/uuuuuu//`; &amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;rrrrrrr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test &amp;quot;$LASTU&amp;quot; != &amp;quot;&amp;quot; &amp;amp;&amp;amp; cd - &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; eval `echo $LASTU |sed -e s/uuuuuuu//`; &amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで上下移動が楽チンになった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/too/deep/directory/to/move/around/with/normal/cd/command $ uuuu
~/too/deep/directory/to/move/around $ rr
~/too/deep/directory/to/move/around/with/normal $ r
~/too/deep/directory/to/move/around/with/normal/cd $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;便利。&lt;/p&gt;
</content><category term="Software"></category><category term="bash"></category><category term="zsh"></category></entry><entry><title>reStructuredTextで同じ名前で複数のリンクを張る</title><link href="http://blog.calcurio.com/rst_link.html" rel="alternate"></link><published>2015-02-14T18:39:47+09:00</published><updated>2015-02-15T03:04:39+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-02-14:/rst_link.html</id><summary type="html">&lt;p&gt;reStructuredTextで，次のようなHTMLを生成したかった。&lt;/p&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.example.org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;link&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;単純に&lt;/p&gt;

&lt;span class="s"&gt;`link &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;http://www.example.org&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`_&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;と書いてしまうと，同じ &lt;tt class="docutils literal"&gt;link&lt;/tt&gt; という名前が複数のURLを参照することになるので&lt;/p&gt;
Duplicate explicit target name: &amp;quot;link&amp;quot;.
&lt;/pre&gt;
&lt;p&gt;とかエラーメッセージがでて怒られる。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;reStructuredTextで，次のようなHTMLを生成したかった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;link&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.example.org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;link&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;単純に&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;`link &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;http://www.example.com&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`_&lt;/span&gt;
&lt;span class="s"&gt;`link &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;http://www.example.org&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`_&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書いてしまうと，同じ &lt;tt class="docutils literal"&gt;link&lt;/tt&gt; という名前が複数のURLを参照することになるので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Duplicate explicit target name: &amp;quot;link&amp;quot;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とかエラーメッセージがでて怒られる。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;こんなときにはアンダースコアを二重にすると良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;`link &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;http://www.example.com&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`__&lt;/span&gt;
&lt;span class="s"&gt;`link &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;http://www.example.org&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こういう書き方は &lt;tt class="docutils literal"&gt;Anonymous Hyperlink&lt;/tt&gt; というらしい。&lt;/p&gt;
&lt;div class="section" id="url"&gt;
&lt;h2&gt;参考URL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#anonymous-hyperlinks"&gt;reStructuredText Markup Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/5464627/how-to-have-same-text-in-two-links-with-restructured-text"&gt;python - How to have same text in two links with restructured text? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="python"></category></entry><entry><title>vimのmark機能を使いやすくする</title><link href="http://blog.calcurio.com/vim_mark.html" rel="alternate"></link><published>2015-02-14T18:10:16+09:00</published><updated>2015-02-14T21:02:41+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-02-14:/vim_mark.html</id><summary type="html">&lt;!-- tags: Firefox, keyboard, math, pelican, Pelican, percol, python, python, reStructuredText, TODO, Vim, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog --&gt;
&lt;p&gt;vimのマークってあんまり活用してなかったなぁ。ということで使いやすいように &lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt; を改造したのでメモ。今回は&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;showmarksプラグインでマークを可視化&lt;/li&gt;
&lt;li&gt;マークするアルファベットを自動的に決める&lt;/li&gt;
&lt;li&gt;マークを一覧表示する&lt;/li&gt;
&lt;li&gt;次のマーク，前のマークに移動する&lt;/li&gt;
&lt;li&gt;マークを一括削除する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ことが楽にできるようになった。さて，お膳立てはしたので後は習慣になるかどうか。&lt;/p&gt;
</summary><content type="html">&lt;!-- tags: Firefox, keyboard, math, pelican, Pelican, percol, python, python, reStructuredText, TODO, Vim, yoga_tablet2, zsh --&gt;
&lt;!-- category: blog, PC, Software, Software/Blog --&gt;
&lt;p&gt;vimのマークってあんまり活用してなかったなぁ。ということで使いやすいように &lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt; を改造したのでメモ。今回は&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;showmarksプラグインでマークを可視化&lt;/li&gt;
&lt;li&gt;マークするアルファベットを自動的に決める&lt;/li&gt;
&lt;li&gt;マークを一覧表示する&lt;/li&gt;
&lt;li&gt;次のマーク，前のマークに移動する&lt;/li&gt;
&lt;li&gt;マークを一括削除する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ことが楽にできるようになった。さて，お膳立てはしたので後は習慣になるかどうか。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="vim-showmarks"&gt;
&lt;h2&gt;プラグインvim-showmarksの導入&lt;/h2&gt;
&lt;p&gt;マークがなんで使いづらいかって，どこに何をマークしたのかいちいち覚えていられないから。そこでわかりやすいように常にマーク位置と記号を表示してくれるプラグイン &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vim-showmarks&lt;/span&gt;&lt;/tt&gt; を導入した。&lt;/p&gt;
&lt;p&gt;ちなみに，vimには &lt;a class="reference external" href="http://www.vim.org/scripts/script.php?script_id=152"&gt;ShowMarks&lt;/a&gt; と &lt;a class="reference external" href="http://www.vim.org/scripts/script.php?script_id=2142"&gt;showmarks&lt;/a&gt; の2つのプラグインがあって非常に紛らわしい。今回導入したのは全部小文字でマイナーな &lt;a class="reference external" href="http://www.vim.org/scripts/script.php?script_id=2142"&gt;showmarks&lt;/a&gt; の方。 &lt;a class="reference external" href="http://www.vim.org/scripts/script.php?script_id=152"&gt;ShowMarks&lt;/a&gt; では他のプラグインとの相性のせいか，マークの位置を正しく認識できなかった 。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.vim.org/scripts/script.php?script_id=152"&gt;ShowMarks - Visually shows the location of marks. : vim online&lt;/a&gt; : いろんなところで解説されてる有名なやつ&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.vim.org/scripts/script.php?script_id=2142"&gt;showmarks - Display marks as signs (needs +sign feat ) : vim online&lt;/a&gt;  : 今回扱う超マイナーなやつ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;インストールは例によってNeoBundleを使う。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Neobundle &lt;span class="s1"&gt;&amp;#39;jacquesbh/vim-showmarks&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使えるようになるEXコマンドは次のとおり。マークの変更はCursorholdイベント発生時に反映されるようだ。 &lt;tt class="docutils literal"&gt;updatetime&lt;/tt&gt; は短めに設定しておこう。&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;:DoShowMarks&lt;/dt&gt;
&lt;dd&gt;現在のバッファでマークを表示する&lt;/dd&gt;
&lt;dt&gt;:DoShowMarks!&lt;/dt&gt;
&lt;dd&gt;全てのバッファでマークを表示する&lt;/dd&gt;
&lt;dt&gt;:NoShowMarks&lt;/dt&gt;
&lt;dd&gt;現在のバッファでマークを表示しない&lt;/dd&gt;
&lt;dt&gt;:NoShowMarks!&lt;/dt&gt;
&lt;dd&gt;全てのバッファでマークを表示しない&lt;/dd&gt;
&lt;dt&gt;:[count]ShowMarksOnce&lt;/dt&gt;
&lt;dd&gt;[count]回のCursorholdイベントの間だけマークを表示する。(Cursorholdはautocomdのイベント。例えば， set updatetime=5000 でCursorholdは5000ミリ秒おきに発生するようになる)&lt;/dd&gt;
&lt;dt&gt;:[count]PreviewMarks&lt;/dt&gt;
&lt;dd&gt;[count]回のCursorholdイベントの間だけ，画面上部に:marks のように別ウィンドウで一覧表示する。&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;デフォルトでは起動時にマークを表示しないので，.vimrcにautocmdを書いて対応する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; 起動時にマーク表示&lt;/span&gt;
aug show&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;sync&lt;/span&gt;
        &lt;span class="k"&gt;au&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
        &lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;BufReadPost&lt;/span&gt; * &lt;span class="k"&gt;sil&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; DoShowMarks
aug END
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また， &lt;tt class="docutils literal"&gt;let g:showmarks_marks = &amp;quot;abcdef&amp;quot;&lt;/tt&gt; で表示されるマークを限定できる。ココらへんは &lt;a class="reference external" href="http://www.vim.org/scripts/script.php?script_id=152"&gt;ShowMarks&lt;/a&gt; と一緒かな。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;自動的にマークする文字を決定する関数をつくる&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://saihoooooooo.hatenablog.com/entry/2013/04/30/001908"&gt;vimのマーク機能をできるだけ活用してみる - Make 鮫 noise&lt;/a&gt; では， &lt;tt class="docutils literal"&gt;a~z&lt;/tt&gt; のマークを順番に使ってくれる関数 &lt;tt class="docutils literal"&gt;AutoMarkrement()&lt;/tt&gt; を制作してくれている。これは便利なのでそのまま使わせていただくことにする。ただし，マッピングだけは &lt;tt class="docutils literal"&gt;nnoremap &lt;span class="pre"&gt;&amp;lt;silent&amp;gt;[Mark]m&lt;/span&gt; &lt;span class="pre"&gt;:&amp;lt;C-u&amp;gt;call&lt;/span&gt; &lt;span class="pre"&gt;&amp;lt;SID&amp;gt;AutoMarkrement()&amp;lt;CR&amp;gt;:DoShowMarks&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;/tt&gt; として， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vim-showmarks&lt;/span&gt;&lt;/tt&gt; を呼び出して瞬時に反映させるようにした。&lt;/p&gt;
&lt;p&gt;これにより， &lt;tt class="docutils literal"&gt;mm&lt;/tt&gt; のキー入力で自動的にマークできるようになった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot;----------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; vimのマーク機能をできるだけ活用してみる - Make 鮫 noise&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; http://saihoooooooo.hatenablog.com/entry/2013/04/30/001908&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; mを押すことで現在位置に対して自動的にアルファベットを割り振る&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;----------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; マーク設定 : {{{&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 基本マップ&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark] &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="k"&gt;m&lt;/span&gt; [Mark]
&lt;span class="c"&gt;&amp;quot; 現在位置をマーク&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g:markrement_char&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:markrement_char &lt;span class="p"&gt;=&lt;/span&gt; [
    \     &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    \     &lt;span class="s1"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;
    \ ]
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;[Mark]&lt;span class="k"&gt;m&lt;/span&gt; :&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:AutoMarkrement&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b:markrement_pos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; % len&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt;:markrement_char&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
    execute &lt;span class="s1"&gt;&amp;#39;mark&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:markrement_char[&lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos]
    echo &lt;span class="s1"&gt;&amp;#39;marked&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:markrement_char[&lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos]
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだけではアレなので便利そうな機能を幾つか追加してみる。&lt;tt class="docutils literal"&gt;AutoMarkrement()&lt;/tt&gt; は愚直にaから順番にマークしていくだけ。以下で定義する &lt;tt class="docutils literal"&gt;:SetNextMarkChar&lt;/tt&gt; を使えば， &lt;tt class="docutils literal"&gt;:SetNextMarkChar s&lt;/tt&gt; で次にセットするアルファベットをsに変更できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; 次にマークする文字を設定するExコマンドを定義&lt;/span&gt;
command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;? SetNextMarkChar &lt;span class="k"&gt;call&lt;/span&gt; s:set_next_mark_char&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;args&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:set_next_mark_char&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos&lt;span class="p"&gt;=&lt;/span&gt;index&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt;:markrement_char&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    echo &lt;span class="s2"&gt;&amp;quot;Next:&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;g&lt;/span&gt;:markrement_char[&lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;]
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;毎回 &lt;tt class="docutils literal"&gt;:SetNextMarkChar&lt;/tt&gt; と入力するのも面倒なので，キーマッピングで対処する。ここらへんベタ書きじゃなくてなんとかスマートな感じにできると嬉しいのだが...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; 次にマークする文字を設定する&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sa&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sb&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;sc&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]sd :SetNextMarkChar &lt;span class="k"&gt;d&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;se&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;e&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sf&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]sg :SetNextMarkChar &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sh&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;si&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;sj&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]sk :SetNextMarkChar &lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sl&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sm&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;m&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sn&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;so&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sp&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]sq :SetNextMarkChar &lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;sr&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;r&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;ss&lt;/span&gt; :SetNextMarkChar s&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;st&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;su&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sv&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;v&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sw&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]sx :SetNextMarkChar &lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sy&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;y&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]sz :SetNextMarkChar z&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同様に， &lt;tt class="docutils literal"&gt;AutoMarkrement()&lt;/tt&gt; を通して任意のアルファベットでマークしつつ &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vim-showmarks&lt;/span&gt;&lt;/tt&gt; に反映させるショートカットキーを定義する。これで素のvimで &lt;tt class="docutils literal"&gt;ma&lt;/tt&gt; の動作は &lt;tt class="docutils literal"&gt;mfa&lt;/tt&gt; で再現できるようになった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; 次にマークする文字を設定して，同時にマークする&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fa :SetNextMarkChar &lt;span class="k"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fb :SetNextMarkChar &lt;span class="k"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fc :SetNextMarkChar &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fd :SetNextMarkChar &lt;span class="k"&gt;d&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fe :SetNextMarkChar &lt;span class="k"&gt;e&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;ff&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fg :SetNextMarkChar &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fh :SetNextMarkChar &lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;fi&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fj :SetNextMarkChar &lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;fk&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fl :SetNextMarkChar &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fm :SetNextMarkChar &lt;span class="k"&gt;m&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fn :SetNextMarkChar &lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;fo&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;fp&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fq :SetNextMarkChar &lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fr :SetNextMarkChar &lt;span class="k"&gt;r&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;fs&lt;/span&gt; :SetNextMarkChar s&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;ft&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;fu&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fv :SetNextMarkChar &lt;span class="k"&gt;v&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fw :SetNextMarkChar &lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fx :SetNextMarkChar &lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fy :SetNextMarkChar &lt;span class="k"&gt;y&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fz :SetNextMarkChar z&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;マークを操作するプレフィックスは &lt;tt class="docutils literal"&gt;m&lt;/tt&gt; と決めたので，マーク間の移動も &lt;tt class="docutils literal"&gt;m&lt;/tt&gt; を使うことにしよう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; 次/前のマーク&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;n&lt;/span&gt; ]`
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;p&lt;/span&gt; [`
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一覧表示ももちろん &lt;tt class="docutils literal"&gt;m&lt;/tt&gt; から呼び出す。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; vim-showmarksでマークを一覧表示&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;l&lt;/span&gt; :&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Previewmarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こちらは &lt;a class="reference external" href="http://syui.github.io/blog/2014/12/10/vim/"&gt;Vimのマークについて - MBA-HACK2&lt;/a&gt; からいただいてきたマッピング。マークをすべて削除して vim-showmarks に反映させる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; マークの全削除を行うコマンドを設定する&lt;/span&gt;
&lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;bar MarksDelete &lt;span class="k"&gt;sil&lt;/span&gt; :&lt;span class="k"&gt;delm&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; :&lt;span class="k"&gt;delm&lt;/span&gt; &lt;span class="m"&gt;0-9&lt;/span&gt;A&lt;span class="p"&gt;-&lt;/span&gt;Z &lt;span class="p"&gt;|&lt;/span&gt; :&lt;span class="k"&gt;wv&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; :DoShowMarks
nn &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;[Mark]&lt;span class="k"&gt;d&lt;/span&gt; :MarksDelete&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; }}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;今回の改造をまとめとくと以下のようになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot;==============================================&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; マーク周りの改善&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;==============================================&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;----------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; jacquesbh/vim-showmarks&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;----------------------------------------------&lt;/span&gt;
Neobundle &lt;span class="s1"&gt;&amp;#39;jacquesbh/vim-showmarks&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 最初からマークを表示する&lt;/span&gt;
aug show&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;sync&lt;/span&gt;
        &lt;span class="k"&gt;au&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
        &lt;span class="k"&gt;au&lt;/span&gt; &lt;span class="nb"&gt;BufReadPost&lt;/span&gt; * &lt;span class="k"&gt;sil&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; DoShowMarks
aug END
&lt;span class="c"&gt;&amp;quot;----------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; vimのマーク機能をできるだけ活用してみる - Make 鮫 noise&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; http://saihoooooooo.hatenablog.com/entry/2013/04/30/001908&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; mを押すことで現在位置に対して自動的にアルファベットを割り振る&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;----------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; マーク設定 : {{{&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 基本マップ&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark] &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Nop&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nmap &lt;span class="k"&gt;m&lt;/span&gt; [Mark]
&lt;span class="c"&gt;&amp;quot; 現在位置をマーク&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g:markrement_char&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:markrement_char &lt;span class="p"&gt;=&lt;/span&gt; [
    \     &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    \     &lt;span class="s1"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;
    \ ]
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;[Mark]&lt;span class="k"&gt;m&lt;/span&gt; :&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:AutoMarkrement&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b:markrement_pos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; % len&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt;:markrement_char&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
    execute &lt;span class="s1"&gt;&amp;#39;mark&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:markrement_char[&lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos]
    echo &lt;span class="s1"&gt;&amp;#39;marked&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:markrement_char[&lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos]
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 次にマークする文字を設定するExコマンドを定義&lt;/span&gt;
command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;? SetNextMarkChar &lt;span class="k"&gt;call&lt;/span&gt; s:set_next_mark_char&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;args&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:set_next_mark_char&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos&lt;span class="p"&gt;=&lt;/span&gt;index&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;g&lt;/span&gt;:markrement_char&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    echo &lt;span class="s2"&gt;&amp;quot;Next:&amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;g&lt;/span&gt;:markrement_char[&lt;span class="k"&gt;b&lt;/span&gt;:markrement_pos&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;]
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 次にマークする文字を設定する&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sa&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sb&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;sc&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]sd :SetNextMarkChar &lt;span class="k"&gt;d&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;se&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;e&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sf&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]sg :SetNextMarkChar &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sh&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;si&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;sj&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]sk :SetNextMarkChar &lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sl&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sm&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;m&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sn&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;so&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sp&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]sq :SetNextMarkChar &lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;sr&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;r&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;ss&lt;/span&gt; :SetNextMarkChar s&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;st&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;su&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sv&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;v&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sw&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]sx :SetNextMarkChar &lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;sy&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;y&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]sz :SetNextMarkChar z&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 次にマークする文字を設定して，同時にマークする&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fa :SetNextMarkChar &lt;span class="k"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fb :SetNextMarkChar &lt;span class="k"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fc :SetNextMarkChar &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fd :SetNextMarkChar &lt;span class="k"&gt;d&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fe :SetNextMarkChar &lt;span class="k"&gt;e&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;ff&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fg :SetNextMarkChar &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fh :SetNextMarkChar &lt;span class="k"&gt;h&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;fi&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fj :SetNextMarkChar &lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;fk&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fl :SetNextMarkChar &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fm :SetNextMarkChar &lt;span class="k"&gt;m&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fn :SetNextMarkChar &lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;fo&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;o&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;fp&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fq :SetNextMarkChar &lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fr :SetNextMarkChar &lt;span class="k"&gt;r&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;fs&lt;/span&gt; :SetNextMarkChar s&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="nb"&gt;ft&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;fu&lt;/span&gt; :SetNextMarkChar &lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fv :SetNextMarkChar &lt;span class="k"&gt;v&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fw :SetNextMarkChar &lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fx :SetNextMarkChar &lt;span class="k"&gt;x&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fy :SetNextMarkChar &lt;span class="k"&gt;y&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]fz :SetNextMarkChar z&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;AutoMarkrement&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:DoShowMarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; 次/前のマーク&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;n&lt;/span&gt; ]`
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;p&lt;/span&gt; [`
&lt;span class="c"&gt;&amp;quot; 一覧表示&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; [Mark]&lt;span class="k"&gt;l&lt;/span&gt; :&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Previewmarks&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; マークの全削除を行うコマンドを設定する&lt;/span&gt;
&lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;bar MarksDelete &lt;span class="k"&gt;sil&lt;/span&gt; :&lt;span class="k"&gt;delm&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; :&lt;span class="k"&gt;delm&lt;/span&gt; &lt;span class="m"&gt;0-9&lt;/span&gt;A&lt;span class="p"&gt;-&lt;/span&gt;Z &lt;span class="p"&gt;|&lt;/span&gt; :&lt;span class="k"&gt;wv&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; :DoShowMarks
nn &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;[Mark]&lt;span class="k"&gt;d&lt;/span&gt; :MarksDelete&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; }}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Vim"></category></entry><entry><title>PelicanのMakefileを書き換えて便利機能を追加する</title><link href="http://blog.calcurio.com/pelican_make.html" rel="alternate"></link><published>2015-02-14T03:10:10+09:00</published><updated>2015-02-14T20:46:05+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-02-14:/pelican_make.html</id><summary type="html">&lt;p&gt;Pelicanはmakeでブログを作っていく。最初からある機能はシンプルなもので，Tinkererのように記事の生成をする機能はない。そこで，自分で &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; を書き換えて記事の管理機能を作ることにした。&lt;/p&gt;
&lt;p&gt;ちなみに，以前の記事: &lt;a class="reference external" href="pelican_multisite.html"&gt;Pelicanで複数のサイトを生成・管理する&lt;/a&gt; でも &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; を編集してマルチサイト機能を追加している。今回は，マルチサイトを前提に機能を追加していくことにしよう。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Pelicanはmakeでブログを作っていく。最初からある機能はシンプルなもので，Tinkererのように記事の生成をする機能はない。そこで，自分で &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; を書き換えて記事の管理機能を作ることにした。&lt;/p&gt;
&lt;p&gt;ちなみに，以前の記事: &lt;a class="reference external" href="pelican_multisite.html"&gt;Pelicanで複数のサイトを生成・管理する&lt;/a&gt; でも &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; を編集してマルチサイト機能を追加している。今回は，マルチサイトを前提に機能を追加していくことにしよう。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="make-new"&gt;
&lt;h2&gt;新しい記事を書く $ make new&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;make edit&lt;/tt&gt; で新しい記事を書けるようにしよう。仕様は&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;make edit f=hoge.rst&lt;/tt&gt; でファイル名を指定する&lt;/li&gt;
&lt;li&gt;ファイル名の指定がない場合は，現在のUNIXTIMEをファイル名とする。e.g. &lt;tt class="docutils literal"&gt;1423890327.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;環境変数 &lt;tt class="docutils literal"&gt;EDITOR&lt;/tt&gt; にあるエディタで開く。環境変数がないならデフォルトはvimを使う&lt;/li&gt;
&lt;li&gt;ファイルは &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;content/2015-02/hoge.rst&lt;/span&gt;&lt;/tt&gt; という形式で，現在日時から自動的に配置する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とする。これを実現するには次のように &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; に記述すればいい。なお，  &lt;strong&gt;$(PREFIX)はマルチサイト用の変数&lt;/strong&gt; だ。これは &lt;a class="reference external" href="pelican_multisite.html"&gt;Pelicanで複数のサイトを生成・管理する&lt;/a&gt; で追加した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;EDITOR&lt;/span&gt;&lt;span class="o"&gt;?=&lt;/span&gt;vim
&lt;span class="cp"&gt;ifdef f&lt;/span&gt;
    &lt;span class="nv"&gt;NEWFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;f&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;endif&lt;/span&gt;

&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;test&lt;/span&gt; -e &lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_content/&lt;span class="sb"&gt;`&lt;/span&gt;date +%Y-%m&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; mkdir &lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_content/&lt;span class="sb"&gt;`&lt;/span&gt;date +%Y-%m&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="cp"&gt;ifdef NEWFILE&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;EDITOR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;_content/`date +%Y-%m`/&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;NEWFILE&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;EDITOR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;_content/`date +%Y-%m`/`date +%s`.rst&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="make-edit"&gt;
&lt;h2&gt;既存の記事を編集する $ make edit&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;make edit&lt;/tt&gt; で既存の記事を楽に探して編集できるようにしよう。仕様は&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;content以下の &lt;tt class="docutils literal"&gt;*.rst&lt;/tt&gt; と &lt;tt class="docutils literal"&gt;*.md&lt;/tt&gt; を更新日時の新しい方から一覧表示する&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mooz/percol"&gt;mooz/percol&lt;/a&gt; で選択する&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;make edit q=hoge&lt;/tt&gt; でpercolにクエリーを渡す&lt;/li&gt;
&lt;li&gt;更新日時でも絞り込めるように，日時の情報もpercolに渡す&lt;/li&gt;
&lt;li&gt;[未実装] 記事のタイトルでも絞り込める&lt;/li&gt;
&lt;li&gt;[未実装] &lt;tt class="docutils literal"&gt;:status: draft&lt;/tt&gt; な記事を絞り込める&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とする。 &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; は次のようになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;EDITOR&lt;/span&gt;&lt;span class="o"&gt;?=&lt;/span&gt;vim
&lt;span class="cp"&gt;ifdef q&lt;/span&gt;
    &lt;span class="nv"&gt;QUERY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;q&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;endif&lt;/span&gt;

&lt;span class="nf"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    which percol
&lt;span class="cp"&gt;ifdef QUERY&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;EDITOR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;`find ./&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;_content -regex &amp;#39;.*\.\(rst\|md\)&amp;#39; -print0 |xargs -0 ls -lat --time-style=+&amp;quot;&lt;/span&gt;%Y/%m/%d %H:%M:%S&lt;span class="s2"&gt;&amp;quot; | awk &amp;#39;{for(i=6;i&amp;lt;NF;i++){printf(&amp;quot;&lt;/span&gt;%s%s&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;i,OFS=&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)}print &lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;NF}&amp;#39; | percol --query=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;QUERY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; | awk &amp;#39;{for(i=3;i&amp;lt;NF;i++){printf(&amp;quot;&lt;/span&gt;%s%s&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;i,OFS=&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)}print &lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;NF}&amp;#39; `&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;EDITOR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;`find ./&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;_content -regex &amp;#39;.*\.\(rst\|md\)&amp;#39; -print0 |xargs -0 ls -lat --time-style=+&amp;quot;&lt;/span&gt;%Y/%m/%d %H:%M:%S&lt;span class="s2"&gt;&amp;quot; | awk &amp;#39;{for(i=6;i&amp;lt;NF;i++){printf(&amp;quot;&lt;/span&gt;%s%s&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;i,OFS=&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)}print &lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;NF}&amp;#39; | percol | awk &amp;#39;{for(i=3;i&amp;lt;NF;i++){printf(&amp;quot;&lt;/span&gt;%s%s&lt;span class="s2"&gt;&amp;quot;,&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;i,OFS=&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)}print &lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;NF}&amp;#39; `&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ワンライナーを無理につかったから読みづらくなってしまったな。そのうちpythonで書き直す予定。&lt;/p&gt;
&lt;p&gt;ちなみに編集したいファイル名がわかりきっている場合は，いちいちpercolを通すのも面倒なので&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make new &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hoge.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で対処できる。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="make-del"&gt;
&lt;h2&gt;既存の記事を削除する $ make del&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;make del&lt;/tt&gt; で既存の記事を探して削除できるようにしよう。仕様は&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;content以下の &lt;tt class="docutils literal"&gt;*.rst&lt;/tt&gt; と &lt;tt class="docutils literal"&gt;*.md&lt;/tt&gt; を &lt;a class="reference external" href="https://github.com/mooz/percol"&gt;mooz/percol&lt;/a&gt; で選択できるようにする&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;make del q=hoge&lt;/tt&gt; でpercolにクエリーを渡す&lt;/li&gt;
&lt;li&gt;削除するまえにユーザーに確認する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;ifdef q&lt;/span&gt;
    &lt;span class="nv"&gt;QUERY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;q&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="cp"&gt;endif&lt;/span&gt;

&lt;span class="nf"&gt;del&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    which percol
&lt;span class="cp"&gt;ifdef QUERY&lt;/span&gt;
    rm -i &lt;span class="s2"&gt;&amp;quot;`find ./&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;_content -regex &amp;#39;.*\.\(rst\|md\)&amp;#39; | percol --query=&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;QUERY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;`&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;else&lt;/span&gt;
    rm -i &lt;span class="s2"&gt;&amp;quot;`find ./&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;_content -regex &amp;#39;.*\.\(rst\|md\)&amp;#39; | percol`&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="make-publish-make-republish"&gt;
&lt;h2&gt;自動的に &lt;tt class="docutils literal"&gt;make publish&lt;/tt&gt; し続ける $ make republish&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;make regenerate&lt;/tt&gt; ではファイル更新を監視して自動的に &lt;tt class="docutils literal"&gt;make html&lt;/tt&gt; し続けてくれる。同じように &lt;tt class="docutils literal"&gt;make publish&lt;/tt&gt; し続けるルール &lt;tt class="docutils literal"&gt;republish&lt;/tt&gt; を書いてみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;republish&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; -r &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;PUBLISHCONF&lt;span class="k"&gt;)&lt;/span&gt; --cache-path &lt;span class="k"&gt;$(&lt;/span&gt;CACHEDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rsync-uploadgitpush"&gt;
&lt;h2&gt;rsync_uploadするとgitでpushする&lt;/h2&gt;
&lt;p&gt;rsyncで本番サーバーにコピーするということは，編集が一区切りついたということ。このタイミングで自動的にgitでpushしておくべきだろう。ということで，書いてみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;rsync_upload&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
    rsync -e &lt;span class="s2"&gt;&amp;quot;ssh -p &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SSH_PORT&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; -i &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;SSH_KEY&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -P -rvzc --delete &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;/ &lt;span class="k"&gt;$(&lt;/span&gt;SSH_USER&lt;span class="k"&gt;)&lt;/span&gt;@&lt;span class="k"&gt;$(&lt;/span&gt;SSH_HOST&lt;span class="k"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;$(&lt;/span&gt;SSH_TARGET_DIR&lt;span class="k"&gt;)&lt;/span&gt; --cvs-exclude
    git add -A
    git commit -m &lt;span class="s1"&gt;&amp;#39;hook rcyns_upload&amp;#39;&lt;/span&gt;
    git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="phony"&gt;
&lt;h2&gt;わすれずに.PHONYに追記しておこう&lt;/h2&gt;
&lt;p&gt;makeのルールを追加したら， &lt;tt class="docutils literal"&gt;.PHONY&lt;/tt&gt; の追記もお忘れなく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;regenerate&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt; &lt;span class="n"&gt;devserver&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt; &lt;span class="n"&gt;ssh_upload&lt;/span&gt; &lt;span class="n"&gt;rsync_upload&lt;/span&gt; &lt;span class="n"&gt;dropbox_upload&lt;/span&gt; &lt;span class="n"&gt;ftp_upload&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;3&lt;span class="n"&gt;_upload&lt;/span&gt; &lt;span class="n"&gt;cf_upload&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt; &lt;span class="n"&gt;edit&lt;/span&gt; &lt;span class="n"&gt;cotent&lt;/span&gt; &lt;span class="n"&gt;republish&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Pelican"></category></entry><entry><title>vimperatorのcopy.jsでreSTのURLコピペを楽する</title><link href="http://blog.calcurio.com/vimperator_copy.html" rel="alternate"></link><published>2015-02-13T22:51:16+09:00</published><updated>2015-02-21T02:20:59+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-02-13:/vimperator_copy.html</id><summary type="html">&lt;p&gt;reStructuredTextでブログを書いていると，URLのコピペもreSTの形式でやりたくなる。これはvimperatorの &lt;a class="reference external" href="https://github.com/vimpr/vimperator-plugins/blob/master/copy.js"&gt;copy.js&lt;/a&gt; プラグインで実現できる。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;reStructuredTextでブログを書いていると，URLのコピペもreSTの形式でやりたくなる。これはvimperatorの &lt;a class="reference external" href="https://github.com/vimpr/vimperator-plugins/blob/master/copy.js"&gt;copy.js&lt;/a&gt; プラグインで実現できる。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;デフォルトでcopy.jsはreST形式はサポートしてないので， &lt;tt class="docutils literal"&gt;.vimperatorrc&lt;/tt&gt; に書式を設定する。ついでにmarkdownにも対応してみよう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot;copy.js&lt;/span&gt;
javascript &lt;span class="p"&gt;&amp;lt;&amp;lt;&lt;/span&gt;EOM
  liberator.globalVariables.copy_templates &lt;span class="p"&gt;=&lt;/span&gt; [
    { label: &lt;span class="s1"&gt;&amp;#39;titleAndURL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     value: &lt;span class="s1"&gt;&amp;#39;%TITLE%\n%URL%&amp;#39;&lt;/span&gt; }&lt;span class="p"&gt;,&lt;/span&gt;
    { label: &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           value: &lt;span class="s1"&gt;&amp;#39;%TITLE%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; map: &lt;span class="s1"&gt;&amp;#39;,y&amp;#39;&lt;/span&gt; }&lt;span class="p"&gt;,&lt;/span&gt;
    { label: &lt;span class="s1"&gt;&amp;#39;anchor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          value: &lt;span class="s1"&gt;&amp;#39;&amp;lt;a href=&amp;quot;%URL%&amp;quot;&amp;gt;%TITLE%&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt; }&lt;span class="p"&gt;,&lt;/span&gt;
    { label: &lt;span class="s1"&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        value: &lt;span class="s1"&gt;&amp;#39;[%TITLE%](%URL%)&amp;#39;&lt;/span&gt; }&lt;span class="p"&gt;,&lt;/span&gt;
    { label: &lt;span class="s1"&gt;&amp;#39;reStructureText&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; value: &lt;span class="s1"&gt;&amp;#39; `%TITLE% &amp;lt;%URL%&amp;gt;`_ &amp;#39;&lt;/span&gt; }&lt;span class="p"&gt;,&lt;/span&gt;
    { label: &lt;span class="s1"&gt;&amp;#39;selanchor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       value: &lt;span class="s1"&gt;&amp;#39;&amp;lt;a href=&amp;quot;%URL%&amp;quot; title=&amp;quot;%TITLE%&amp;quot;&amp;gt;%SEL%&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt; }&lt;span class="p"&gt;,&lt;/span&gt;
    { label: &lt;span class="s1"&gt;&amp;#39;htmlblockquote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  value: &lt;span class="s1"&gt;&amp;#39;&amp;lt;blockquote cite=&amp;quot;%URL%&amp;quot; title=&amp;quot;%TITLE%&amp;quot;&amp;gt;%HTMLSEL%&amp;lt;/blockquote&amp;gt;&amp;#39;&lt;/span&gt; }&lt;span class="p"&gt;,&lt;/span&gt;
    { label: &lt;span class="s1"&gt;&amp;#39;ASIN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   value: &lt;span class="s1"&gt;&amp;#39;copy ASIN code from Amazon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; custom: &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;{&lt;span class="k"&gt;return&lt;/span&gt; content.document.getElementById&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ASIN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.value;} }&lt;span class="p"&gt;,&lt;/span&gt;
  ];
EOM

&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="k"&gt;ya&lt;/span&gt; :copy anchor&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; yp :copy titleAndURL&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; yt :copy &lt;span class="nb"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; ys :copy selanchor&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; yq :copy htmlblockquote&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; yr :copy reStructureText&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; ym :copy markdown&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じに &lt;tt class="docutils literal"&gt;.vimperatorrc&lt;/tt&gt; に設定しておくと， &lt;tt class="docutils literal"&gt;yr&lt;/tt&gt; のキー入力でreST形式のURLがクリップボードに格納できるようになる。&lt;/p&gt;
&lt;p&gt;超便利。&lt;/p&gt;
</content><category term="Software"></category><category term="Firefox"></category><category term="reStructuredText"></category><category term="Vimperator"></category></entry><entry><title>vimperatorのステーラスラインにタイトルを表示する</title><link href="http://blog.calcurio.com/vimperator_statusline.html" rel="alternate"></link><published>2015-02-13T22:21:20+09:00</published><updated>2019-05-02T14:32:03+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-02-13:/vimperator_statusline.html</id><summary type="html">&lt;p&gt;いつからかvimperatorのstatuslineにはURLだけで，タイトルが表示されなくなっていた。あるいは記憶違いで，昔からなかっただろうか？ とにかくvimperator-3.8.3ではURLだけだ。下の画像のようにタイトルも表示されるようにする方法を記しておく。&lt;/p&gt;

&lt;img alt="statlulineにタイトルを表示する" src="http://blog.calcurio.com/images/statusline_title.png" /&gt;

&lt;p&gt;できれば &lt;tt class="docutils literal"&gt;.vimperatorrc&lt;/tt&gt; だけでなんとかしたかったが，無理なのでソースコードも少しだけいじることになる。コンパイル済みのxpi (vimperator-3.8.3) もあるので面倒な方はそちらを使うと良い。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;いつからかvimperatorのstatuslineにはURLだけで，タイトルが表示されなくなっていた。あるいは記憶違いで，昔からなかっただろうか？ とにかくvimperator-3.8.3ではURLだけだ。下の画像のようにタイトルも表示されるようにする方法を記しておく。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="statlulineにタイトルを表示する" src="http://blog.calcurio.com/images/statusline_title.png" /&gt;
&lt;/div&gt;
&lt;p&gt;できれば &lt;tt class="docutils literal"&gt;.vimperatorrc&lt;/tt&gt; だけでなんとかしたかったが，無理なのでソースコードも少しだけいじることになる。コンパイル済みのxpi (vimperator-3.8.3) もあるので面倒な方はそちらを使うと良い。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;まず，gitでソースを持ってくる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git@github.com:vimperator/vimperator-labs.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vimperator-labs/common/content/statusline.js&lt;/span&gt;&lt;/tt&gt; の中にあるupdateUrl関数を次のように書き換える。要は &lt;tt class="docutils literal"&gt;url = buffer.title + &amp;quot;&amp;nbsp; &amp;quot; + url;&lt;/tt&gt; を適切な場所に1行挿入しただけだ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateUrl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// quick hack to make the muttator compose work, needs more thought&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO: this probably needs a more general solution.&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;textToSubURI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;unEscapeURIForUI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="hll"&gt;        &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;  &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// make it even more Vim-like&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;about:blank&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[No Name]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^liberator://help/(\\S+)#(.*)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; [Help]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^liberator://help/(\\S+)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$1 [Help]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，makeしてxpiをfirefoxにインストールする。&lt;/p&gt;
&lt;p&gt;ソースをいじるのが面倒な場合を考慮して， &lt;a class="reference external" href="http://blog.calcurio.com/files/vimperator-3.8.3_mod.xpi"&gt;コンパイルしたxpi&lt;/a&gt; も配布しておこう。ただし，バージョンナンバーとか全くいじっていないので注意すること。&lt;/p&gt;
&lt;p&gt;次に，これだけではページ読み込み時にURLしか表示されない（おそらくページ読み込みまえにupodateUrl関数が呼び出されるないため？）。そこで，autocmdを &lt;tt class="docutils literal"&gt;.vimperatorrc&lt;/tt&gt; に書いておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;autocmd DOMLoad .* &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;js&lt;/span&gt; args.url &lt;span class="p"&gt;==&lt;/span&gt; buffer.URL &amp;amp;&amp;amp; &lt;span class="nb"&gt;statusline&lt;/span&gt;.&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでだいたいOKだと思う。&lt;/p&gt;
</content><category term="Software"></category><category term="Firefox"></category><category term="Vimperator"></category></entry><entry><title>Pelicanで複数のサイトを生成・管理する</title><link href="http://blog.calcurio.com/pelican_multisite.html" rel="alternate"></link><published>2015-02-09T00:51:12+09:00</published><updated>2015-02-14T14:39:16+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-02-09:/pelican_multisite.html</id><summary type="html">&lt;p&gt;Wordpressにはマルチサイト機能というのがあって，1つのWordpressで &lt;em&gt;N&lt;/em&gt; 個のサイトを管理できる。サイト間でプラグインとかは共通にできるので，設定変更のたびにN個のサイトでポチポチ作業する必要がなくなって楽になる。（個人的にはWordpressのマルチサイトは無駄に複雑化すんので素直に複数インストールするが吉と思うが）&lt;/p&gt;
&lt;p&gt;Pelicanでも同じようなことをやってみた。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Wordpressにはマルチサイト機能というのがあって，1つのWordpressで &lt;em&gt;N&lt;/em&gt; 個のサイトを管理できる。サイト間でプラグインとかは共通にできるので，設定変更のたびにN個のサイトでポチポチ作業する必要がなくなって楽になる。（個人的にはWordpressのマルチサイトは無駄に複雑化すんので素直に複数インストールするが吉と思うが）&lt;/p&gt;
&lt;p&gt;Pelicanでも同じようなことをやってみた。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;プレフィックスでファイルを分ける&lt;/h2&gt;
&lt;p&gt;まず，適当なプレフィックスを付けて:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cache/
contents/
output/
pelicanconf.py
publishconf.py
&lt;/pre&gt;
&lt;p&gt;を分ける。例えば，IT関連の記事は &lt;tt class="docutils literal"&gt;tech&lt;/tt&gt; ，日記は &lt;tt class="docutils literal"&gt;diary&lt;/tt&gt; として区別するなら:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
tech_cache/
tech_contents/
tech_output/
tech_pelicanconf.py
tech_publishconf.py
&lt;/pre&gt;
&lt;p&gt;と&lt;/p&gt;
&lt;pre class="literal-block"&gt;
diary_cache/
diary_contents/
diary_output/
diary_pelicanconf.py
diary_publishconf.py
&lt;/pre&gt;
&lt;p&gt;をそれぞれ作るわけだ。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="makefile"&gt;
&lt;h2&gt;Makefileを書き換える&lt;/h2&gt;
&lt;p&gt;次に，Makeファイルの変数を少し書き換える。デフォルトで &lt;tt class="docutils literal"&gt;tech&lt;/tt&gt; をmakeするようにするならこんな感じか。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;?=&lt;/span&gt;tech

&lt;span class="nv"&gt;BASEDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CURDIR&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;INPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_content
&lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_output
&lt;span class="nv"&gt;CONFFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_pelicanconf.py
&lt;span class="nv"&gt;PUBLISHCONF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_publishconf.py
&lt;span class="nv"&gt;CACHEDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/&lt;span class="k"&gt;$(&lt;/span&gt;PREFIX&lt;span class="k"&gt;)&lt;/span&gt;_cache
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;cacheディレクトリを指定するオプション &lt;code&gt;--cache-path $(CACHEDIR)&lt;/code&gt; はついていないので，これも &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; に書き加えておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;CONFFILE&lt;span class="k"&gt;)&lt;/span&gt; --cache-path &lt;span class="k"&gt;$(&lt;/span&gt;CACHEDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;regenerate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; -r &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;CONFFILE&lt;span class="k"&gt;)&lt;/span&gt; --cache-path &lt;span class="k"&gt;$(&lt;/span&gt;CACHEDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;PUBLISHCONF&lt;span class="k"&gt;)&lt;/span&gt; --cache-path &lt;span class="k"&gt;$(&lt;/span&gt;CACHEDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こうしておけば，今後はPREFIXを指定していつもどおりにmakeするだけでマルチサイト機能を利用できる。 &lt;em&gt;diary&lt;/em&gt; をコンパイルするなら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make html &lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;diary
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とする。あるいは，しばらく &lt;em&gt;diary&lt;/em&gt; を編集しつづけるなら環境変数を設定してやればオプションを省略できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;diary
$ make html
$ make serve
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="develop-server-sh"&gt;
&lt;h2&gt;develop_server.shを書き換える&lt;/h2&gt;
&lt;p&gt;Pelicanでブログを書きながらプレビューするときは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make html      &lt;span class="c1"&gt;# htmlファイルを作る&lt;/span&gt;
$ make serve     &lt;span class="c1"&gt;# pythonの簡易Webサーバを起動する&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で &lt;tt class="docutils literal"&gt;localhost:8000&lt;/tt&gt; をブラウザで開けば良い。記事を更新するたびに &lt;tt class="docutils literal"&gt;make html&lt;/tt&gt; するのは面倒なので，ファイル更新を監視して自動的に &lt;tt class="docutils literal"&gt;make html&lt;/tt&gt; してくれるルール &lt;tt class="docutils literal"&gt;regenerate&lt;/tt&gt; もある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make regenerate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし， &lt;tt class="docutils literal"&gt;make regenerate&lt;/tt&gt; と &lt;tt class="docutils literal"&gt;make serve&lt;/tt&gt; のためにシェルを2つ開きっぱなしにするのは無駄なので，1つにまとめてしまった &lt;tt class="docutils literal"&gt;devserver&lt;/tt&gt; がある。(個人的にはデバッグメッセージが読めにくくなるので使っていないが)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make devserver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，これは &lt;tt class="docutils literal"&gt;develop_server.sh&lt;/tt&gt; を呼び出しているだけだから，こいつも &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; と同様にマルチサイト対応版に書き換えてやる。デフォルトを &lt;tt class="docutils literal"&gt;tech&lt;/tt&gt; にするなら次のように書く。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;tech&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;BASEDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;INPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$BASEDIR&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_content
&lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$BASEDIR&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_output
&lt;span class="nv"&gt;CONFFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$BASEDIR&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_pelicanconf.py
&lt;span class="nv"&gt;CACHEDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$BASEDIR&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_cache
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に，pelicanの呼び出し部に &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-cache-path&lt;/span&gt;&lt;/tt&gt; の指定を加えておしまい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$PELICAN&lt;/span&gt; --debug --autoreload -r &lt;span class="nv"&gt;$INPUTDIR&lt;/span&gt; -o &lt;span class="nv"&gt;$OUTPUTDIR&lt;/span&gt; -s &lt;span class="nv"&gt;$CONFFILE&lt;/span&gt; &lt;span class="nv"&gt;$PELICANOPTS&lt;/span&gt; --cache-path &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CACHEDIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;最後に&lt;/h2&gt;
&lt;p&gt;あとは，サイトによってちょっと背景色を変えたいとか，そういう必要があるなら &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; で適当な変数を定義しておいて，jinja2の書式で適当にテンプレートを書き換えておけば良いだろう。&lt;/p&gt;
&lt;p&gt;てな感じで，今回は非常にシンプルかつ柔軟にマルチサイト対応できた。Wordpressではこうはいかないね。pelicanを使っていて良かったと思える瞬間だ。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="Pelican"></category><category term="python"></category></entry><entry><title>zshで余計な履歴を残さない・削除する。percolとの連携を前提に</title><link href="http://blog.calcurio.com/zsh_hist.html" rel="alternate"></link><published>2015-01-31T15:50:52+09:00</published><updated>2015-02-09T01:35:06+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-01-31:/zsh_hist.html</id><summary type="html">&lt;p&gt;SSHでサーバーをガンガンいじるようになると，シェル履歴の再利用は非常に重要になってくる。前回： &lt;a class="reference external" href="http://calcurio.com/wordpress/?p=2371"&gt;percolを書き換えていい感じにzshで履歴検索できるようにする&lt;/a&gt; で，percolで簡単に絞り込めるようにしてみた。履歴をよくよく見てみると，かなり無駄なコマンドが打ち込まれていることに気づく。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;再利用することを念頭に，余計なコマンドはそもそも記録しない&lt;/li&gt;
&lt;li&gt;無駄なコマンドを削除するスクリプトを作って，それを呼び出すpercolのキーバインドを設定する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必要があるだろう。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;SSHでサーバーをガンガンいじるようになると，シェル履歴の再利用は非常に重要になってくる。前回： &lt;a class="reference external" href="http://calcurio.com/wordpress/?p=2371"&gt;percolを書き換えていい感じにzshで履歴検索できるようにする&lt;/a&gt; で，percolで簡単に絞り込めるようにしてみた。履歴をよくよく見てみると，かなり無駄なコマンドが打ち込まれていることに気づく。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;再利用することを念頭に，余計なコマンドはそもそも記録しない&lt;/li&gt;
&lt;li&gt;無駄なコマンドを削除するスクリプトを作って，それを呼び出すpercolのキーバインドを設定する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必要があるだろう。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;余計なコマンドを記録しない&lt;/h2&gt;
&lt;p&gt;記録しておく価値が無い使い捨てのコマンドは，行頭にスペースを打っておくとhistoryとして扱われない。
これはbashやzshの機能であり， &lt;a class="reference external" href="http://qiita.com/sawanoboly/items/99ba7943c5a3e4f6f271"&gt;その入力だけBashのヒストリを残さない - Qiita&lt;/a&gt; にあるように，&lt;/p&gt;
&lt;p&gt;bashなら環境変数 &lt;cite&gt;HISTCONTROL=ignorespace&lt;/cite&gt; を設定する。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;HISTCONTROL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ignoredups     &lt;span class="c1"&gt;# 前と重複する行は記録しない&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;HISTCONTROL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ignorespace    &lt;span class="c1"&gt;# 行頭がスペースのコマンドは記録しない&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;HISTCONTROL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ignoreboth     &lt;span class="c1"&gt;# ignoredups,ignorespaceの両方を設定&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;zshなら次のようにオプションを設定する。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setopt HIST_IGNORE_DUPS           &lt;span class="c1"&gt;# 前と重複する行は記録しない&lt;/span&gt;
setopt HIST_IGNORE_ALL_DUPS       &lt;span class="c1"&gt;# 履歴中の重複行をファイル記録前に無くす&lt;/span&gt;
setopt HIST_IGNORE_SPACE          &lt;span class="c1"&gt;# 行頭がスペースのコマンドは記録しない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;関係ないけど，zshならこんなオプションも付けておくと便利だと思う。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setopt HIST_FIND_NO_DUPS          &lt;span class="c1"&gt;# 履歴検索中、(連続してなくとも)重複を飛ばす&lt;/span&gt;
setopt HIST_REDUCE_BLANKS         &lt;span class="c1"&gt;# 余分な空白は詰めて記録&lt;/span&gt;
setopt HIST_NO_STORE              &lt;span class="c1"&gt;# histroyコマンドは記録しない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;コマンド履歴を削除する&lt;/h2&gt;
&lt;p&gt;引数として与えられた行をコマンド履歴から削除するスクリプトを作りたいわけだが，
これは容易ではない。というのも，コマンド履歴は&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;historyファイル (.zsh_history or .bash_hisotry)&lt;/li&gt;
&lt;li&gt;zsh(bash)プロセスのメモリ上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の2つに記録されているからだ。単にhistoryファイルの該当行を削除するだけでなく，再読み込み
させてメモリに反映させなければならない。&lt;/p&gt;
&lt;p&gt;しかも，zshなら &lt;cite&gt;setopt SHARE_HISTORY&lt;/cite&gt; で全てのzshプロセスで履歴が共有される。
これは超便利なオプションだが，履歴削除を全てのzshプロセスに反映させるのは割りと面倒である。&lt;/p&gt;
&lt;p&gt;今，hoge piyoというコマンド実行履歴を削除したいとする。手順は次の通り&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sed -i &lt;span class="s1"&gt;&amp;#39;/^hoge piyo$/d&amp;#39;&lt;/span&gt; .zsh_history  &lt;span class="c1"&gt;# historyファイルから無駄履歴を削除&lt;/span&gt;
$ &lt;span class="nb"&gt;fc&lt;/span&gt; -R .zsh_history                    &lt;span class="c1"&gt;# 履歴を再読み込みする&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;もちろん，これだけでは別のzshのプロセスの履歴には， &lt;cite&gt;hoge piyo&lt;/cite&gt; が残ったままだ。&lt;/p&gt;
&lt;div class="section" id="zsh"&gt;
&lt;h3&gt;いかにして全てのzshのプロセスに反映させるか&lt;/h3&gt;
&lt;p&gt;全てのzshプロセスで &lt;cite&gt;fc -R .zsh_history&lt;/cite&gt; を実行して再読み込みさせたいのだが，どうするのが一番かしこいだろうか。screenにおける &lt;cite&gt;screen -x&lt;/cite&gt; や，vimにおけるvimサーバのように，別プロセスのzshやbashにコマンドを実行させるようなな機能があれば簡単であるが，ざっと見る限り無いようである。&lt;/p&gt;
&lt;p&gt;私はzshとpercolと連携させており，historyコマンドではなく.zsh_historyを参照させることで対応している。こうすれば，多少の速度低下を犠牲にメモリ内容を意識する必要はない。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="history"&gt;
&lt;h3&gt;問題はhistoryファイル中の該当行の削除&lt;/h3&gt;
&lt;p&gt;&lt;cite&gt;hoge piyo&lt;/cite&gt; なら簡単だが， &lt;cite&gt;ls /hoge/piyo&lt;/cite&gt; をsedで削除しようとしたらエスケープしないといけない。
それ以外にも &lt;cite&gt;/ &amp;quot; ' | * ? .&lt;/cite&gt; などの特殊記号がふんだんにあるので
全てに対応したエスケープを考えだすと辛いことになる。これをエスケープ問題と呼ぼう。&lt;/p&gt;
&lt;p&gt;それとは別に，改行問題もある。zshでは&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="sb"&gt;`&lt;/span&gt;ls&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    mv &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_bak
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;みたいな複数行の履歴は，historyコマンドで&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="sb"&gt;`&lt;/span&gt;ls&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;do&lt;span class="se"&gt;\n&lt;/span&gt;mv &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_bak&lt;span class="se"&gt;\n&lt;/span&gt;done&lt;span class="se"&gt;\n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;となり，historyコマンドが勝手に加えた &lt;cite&gt;n&lt;/cite&gt; と，コマンド入力時からある &lt;cite&gt;n&lt;/cite&gt; は区別されない。
したがって，削除スクリプトの引数にすることはできない。
なお，これは履歴削除だけでなく実行時もエラーになる ( &lt;cite&gt;for i in `ls`ndonmv $i ${i}_bakndonen&lt;/cite&gt; と打っても実行できない)。&lt;/p&gt;
&lt;p&gt;全zshプロセスに削除を反映させるためだけでなく，複数行の履歴を削除するためにも.zsh_historyを参照するべきといえる。 .zsh_historyでは&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="sb"&gt;`&lt;/span&gt;ls&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
    mv &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_bak&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;に置換されて記録される。こちらもそのままでは実行できないし，削除も難しい。&lt;/p&gt;
&lt;p&gt;私はpythonで簡単な行削除スクリプトを作った。ロジックは簡単で，&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;最後に，コマンド履歴をpercolから削除する手順をまとめておく。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="zsh"></category><category term="percol"></category><category term="python"></category></entry><entry><title>percol+zshで複数行コマンドの履歴を実行する</title><link href="http://blog.calcurio.com/zsh_percol.html" rel="alternate"></link><published>2015-01-31T15:50:52+09:00</published><updated>2015-02-09T01:34:27+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-01-31:/zsh_percol.html</id><summary type="html">&lt;p&gt;以前書いたように，私はpercolを使ってzshの履歴検索を拡張している。
&lt;a class="reference external" href="zsh_hist"&gt;zshで余計な履歴を残さない・削除する。percolとの連携を前提に&lt;/a&gt;
で書いたように，全てのzshのメモリ上に履歴削除を反映させるのは
面倒だ。そこで，historyコマンドではなく.zsh_historyをソースとして
percolにしぼり込みをさせたい。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;以前書いたように，私はpercolを使ってzshの履歴検索を拡張している。
&lt;a class="reference external" href="zsh_hist"&gt;zshで余計な履歴を残さない・削除する。percolとの連携を前提に&lt;/a&gt;
で書いたように，全てのzshのメモリ上に履歴削除を反映させるのは
面倒だ。そこで，historyコマンドではなく.zsh_historyをソースとして
percolにしぼり込みをさせたい。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;しかし，percolは行単位の絞り込みをおこなうスクリプトだから&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="sb"&gt;`&lt;/span&gt;ls&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    mv &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_bak
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のような複数行に渡るコマンド履歴を実行するには難がある。これは，.zsh_historyには&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="sb"&gt;`&lt;/span&gt;ls&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
    mv &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_bak&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;として記録されているので，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="sb"&gt;`&lt;/span&gt;ls&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; mv &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_bak&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と相互変換するスクリプトBRconv.pyを作成して，複数行コマンド履歴の実行・削除を実現することにした。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;方法&lt;/h2&gt;
&lt;p&gt;まず，以下の内容でBRconv.py を作成して，pathの通ったところに保存する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に，.zshrcに次のように記述する。&lt;/p&gt;
&lt;p&gt;最後に，.percol/rc.pyで次のように設定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これにより，percolで履歴から複数行コマンドを実行できるようになる。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Software"></category><category term="zsh"></category><category term="percol"></category><category term="python"></category></entry><entry><title>Pelicanの記事をVimで楽々編集する</title><link href="http://blog.calcurio.com/pelican-vim.html" rel="alternate"></link><published>2015-01-22T16:51:58+09:00</published><updated>2016-06-06T00:52:11+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-01-22:/pelican-vim.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; のブログ記事はreStructedTextで書くものだが，下記のようなメタ情報を書き込むのが面倒。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;
&lt;span class="gh"&gt;##########################################&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; 2015-01-22 16:51:58
&lt;span class="nc"&gt;:modified:&lt;/span&gt; 2015-01-22 17:09:33
&lt;span class="nc"&gt;:category:&lt;/span&gt; blog
&lt;span class="nc"&gt;:tags:&lt;/span&gt; Pelican, Vim
&lt;span class="nc"&gt;:slug:&lt;/span&gt; pelican-vim
&lt;span class="nc"&gt;:authors:&lt;/span&gt; M\. Tsuyuki
&lt;span class="nc"&gt;:summary:&lt;/span&gt; VimでPelicanのテンプレートと，更新日時を自動入力する方法を説明する
&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;こんなものは人間の仕事ではない。機械にやらせることにする。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; のブログ記事はreStructedTextで書くものだが，下記のようなメタ情報を書き込むのが面倒。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;Pelicanの記事をVimで楽々編集する&lt;/span&gt;
&lt;span class="gh"&gt;##########################################&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; 2015-01-22 16:51:58
&lt;span class="nc"&gt;:modified:&lt;/span&gt; 2015-01-22 17:09:33
&lt;span class="nc"&gt;:category:&lt;/span&gt; blog
&lt;span class="nc"&gt;:tags:&lt;/span&gt; Pelican, Vim
&lt;span class="nc"&gt;:slug:&lt;/span&gt; pelican-vim
&lt;span class="nc"&gt;:authors:&lt;/span&gt; M\. Tsuyuki
&lt;span class="nc"&gt;:summary:&lt;/span&gt; VimでPelicanのテンプレートと，更新日時を自動入力する方法を説明する
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;こんなものは人間の仕事ではない。機械にやらせることにする。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;PelicanなんだからもちろんPythonでと言いたいところだが，シェルスクリプト。&lt;/p&gt;
&lt;p&gt;引数としてファイル名(ham.rstとか，egg.md)を読んで，reSTやMarkdownに応じた書式でメタ情報を生成するmkskel.shを作った。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;##*.&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;md&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; Title:
    &lt;span class="nb"&gt;echo&lt;/span&gt; Date: &lt;span class="sb"&gt;`&lt;/span&gt;date +&lt;span class="s1"&gt;&amp;#39;%F %T&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; Modified: &lt;span class="sb"&gt;`&lt;/span&gt;date +&lt;span class="s1"&gt;&amp;#39;%F %T&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; Category: blog
    &lt;span class="nb"&gt;echo&lt;/span&gt; Tags: 未分類
    &lt;span class="nb"&gt;echo&lt;/span&gt; Slug: &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;%.*&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; Authors: M. Tsuyuki
    &lt;span class="nb"&gt;echo&lt;/span&gt; Summary:
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;##*.&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rst&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; title
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;##########################################&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; :date: &lt;span class="sb"&gt;`&lt;/span&gt;date +&lt;span class="s1"&gt;&amp;#39;%F %T&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; :modified: &lt;span class="m"&gt;2015&lt;/span&gt;-01-22 &lt;span class="m"&gt;17&lt;/span&gt;:09:33
    &lt;span class="nb"&gt;echo&lt;/span&gt; :category: blog
    &lt;span class="nb"&gt;echo&lt;/span&gt; :tags: 未分類
    &lt;span class="nb"&gt;echo&lt;/span&gt; :slug: &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;%.*&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; :authors: M&lt;span class="se"&gt;\\&lt;/span&gt;. Tsuyuki
    &lt;span class="nb"&gt;echo&lt;/span&gt; :summary:
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;そして，.vimrcで*.rstや*.mdを作成時にmkskel.shを呼び出すようにautocmdを設定する。以下では，pelicanのブログを作成しているディレクトリでのみテンプレートを読み込むようにしている。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; スケルトンを作成する&lt;/span&gt;
autocmd &lt;span class="nb"&gt;BufNewFile&lt;/span&gt; $HOME&lt;span class="sr"&gt;/git_projects/&lt;/span&gt;pelican&lt;span class="p"&gt;-&lt;/span&gt;blog&lt;span class="sr"&gt;/content/&lt;/span&gt;*.md &lt;span class="m"&gt;0&lt;/span&gt;r&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;sh&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$HOME/git_projects/pelican-blog/mkskel.sh&amp;quot;&lt;/span&gt;  %
autocmd &lt;span class="nb"&gt;BufNewFile&lt;/span&gt; $HOME&lt;span class="sr"&gt;/git_projects/&lt;/span&gt;pelican&lt;span class="p"&gt;-&lt;/span&gt;blog&lt;span class="sr"&gt;/content/&lt;/span&gt;*.rst &lt;span class="m"&gt;0&lt;/span&gt;r&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;sh&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$HOME/git_projects/pelican-blog/mkskel.sh&amp;quot;&lt;/span&gt; %
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;最後に，ファイル保存時に更新日時を更新するため，.vimrcにautocmdを設定する。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; 保存時に更新日時を書き換える&lt;/span&gt;
autocmd &lt;span class="nb"&gt;BufWrite&lt;/span&gt; $HOME&lt;span class="sr"&gt;/git_projects/&lt;/span&gt;pelican&lt;span class="p"&gt;-&lt;/span&gt;blog&lt;span class="sr"&gt;/content/&lt;/span&gt;*.md exe &lt;span class="s2"&gt;&amp;quot;%s/^Modified:.*/Modified: &amp;quot;&lt;/span&gt;.strftime&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%F %T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;/ | normal ``&amp;quot;&lt;/span&gt;
autocmd &lt;span class="nb"&gt;BufWrite&lt;/span&gt; $HOME&lt;span class="sr"&gt;/git_projects/&lt;/span&gt;pelican&lt;span class="p"&gt;-&lt;/span&gt;blog&lt;span class="sr"&gt;/content/&lt;/span&gt;*.rst exe &lt;span class="s2"&gt;&amp;quot;%s/^:modified:.*/:modified: &amp;quot;&lt;/span&gt;.strftime&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%F %T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;/ | normal ``&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;これで人間様はタグ，カテゴリだけ気すれば良いようになった。ラクチン。&lt;/p&gt;
</content><category term="Software"></category><category term="Pelican"></category><category term="Vim"></category></entry><entry><title>render_mathのMarkdownにおけるレンダリング結果</title><link href="http://blog.calcurio.com/using-mathjax-md.html" rel="alternate"></link><published>2015-01-21T12:00:00+09:00</published><updated>2015-02-14T12:38:12+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-01-21:/using-mathjax-md.html</id><content type="html">&lt;p&gt;render_mathプラグインを使ってPelicanでもMathjaxを簡単に導入できる。導入方法は&lt;a href="using-mathjax.html"&gt;PelicanでMathJaxを使って数式を表示する&lt;/a&gt;を参照してほしい。導入方法の記事自体はreSTで書いたので，この記事ではMarkdownで書いたときのレンダリング結果を示す。&lt;/p&gt;
&lt;p&gt;Markdownでは式番号も簡単に付けられるので，数式を書くならreStructuredTextよりもMarkdownかな。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h1&gt;Markdownの記述方法とレンダリング結果&lt;/h1&gt;
&lt;p&gt;render_mathを正しく導入できていれば，Markdownでは次のように &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt; の数式を書けるようになる:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;インライン数式は$&lt;/span&gt;&lt;span class="n"&gt;A_&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;$てな感じに書ける。&lt;/span&gt;

&lt;span class="err"&gt;ブロック数式の書き方は&lt;/span&gt;

&lt;span class="err"&gt;$$&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;alpha_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;cdots&lt;/span&gt; &lt;span class="n"&gt;O_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q_t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S_i&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$$&lt;/span&gt;

&lt;span class="err"&gt;である。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;インライン数式は&lt;span class="math"&gt;\(A_\text{c} = (\pi/4) d^2\)&lt;/span&gt;てな感じに書ける。&lt;/p&gt;
&lt;p&gt;ブロック数式の書き方は&lt;/p&gt;
&lt;div class="math"&gt;$$ \alpha_t(i) = P(O_1, O_2, \cdots O_t, q_t= S_i \lambda) $$&lt;/div&gt;
&lt;p&gt;である。&lt;/p&gt;
&lt;p&gt;しかも，数式番号（とういうか&lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt;のマクロ）も使える:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$\&lt;/span&gt;&lt;span class="n"&gt;LaTeX$のマクロは次のように書け&lt;/span&gt;&lt;span class="err"&gt;，数式番号が使える！&lt;/span&gt;

&lt;span class="err"&gt;$$&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;equation&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;eq1&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;equation&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;$$&lt;/span&gt;

&lt;span class="err"&gt;引用は式&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$\&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;eq1&lt;/span&gt;&lt;span class="err"&gt;}$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;のようになる。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt;のマクロは次のように書け，数式番号が使える！&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{equation}
    y=x^2 \label{eq1}
\end{equation}
$$&lt;/div&gt;
&lt;p&gt;引用は式(&lt;span class="math"&gt;\(\ref{eq1}\)&lt;/span&gt;)のようになる。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        fonts: [['STIX', 'TeX']]," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Software"></category><category term="pelican"></category><category term="math"></category></entry><entry><title>PelicanでMathJaxを使って数式を表示する</title><link href="http://blog.calcurio.com/using-mathjax.html" rel="alternate"></link><published>2015-01-21T10:43:00+09:00</published><updated>2015-02-14T12:38:06+09:00</updated><author><name>M. Tsuyuki</name></author><id>tag:blog.calcurio.com,2015-01-21:/using-mathjax.html</id><content type="html">&lt;p&gt;Pelicanでもmathjaxを導入して数式を記述することができる。Tinkererなら，pipでsphinxのmathjaxプラグインを導入すれば良いのだが，PelicanはSphinxに依存しない(よね？)のでPelican独自のプラグインを導入しなければならない。これは，pipには無い（2015年1月21日時点では）のでgithubよりダウンロードする。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;インストール&lt;/h2&gt;
&lt;p&gt;githubのページ &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;getpelican/pelican-plugins&lt;/a&gt; よりプラグインを導入する方法を説明する。&lt;/p&gt;
&lt;p&gt;まず，依存関係を満たす。render_mathはPelican 3.5以上とTypogrify 2.0.7以上，markdownに依存しているので，pipでインストールしておく&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pelican typogrify markdown
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に，リポジトリをクローンする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/getpelican/pelican-plugins
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に，pelicanconf.pyでプラグインを有効化する。ホームディレクトリ以下にcloneした場合は&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Pelican Plugins&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HOME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/pelican-plugins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;render_math&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とすれば良い。
なお，私の場合は複数マシンから編集するのでpelican-pluginsのパスをベタ打ちしないようにした。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="restructuredtext"&gt;
&lt;h2&gt;reStructuredTextの記述方法&lt;/h2&gt;
&lt;p&gt;正しく導入できていれば，reStructuredTextでは次のように &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt; の数式を書けるようになる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;インライン数式は :math:`A&lt;span class="nb"&gt;_&lt;/span&gt;&lt;span class="k"&gt;\text&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;c&lt;span class="nb"&gt;}&lt;/span&gt; = (&lt;span class="k"&gt;\pi&lt;/span&gt;/4) d&lt;span class="nb"&gt;^&lt;/span&gt;2` てな感じに書ける。

ブロック数式の書き方は

.. math::

  &lt;span class="k"&gt;\alpha&lt;/span&gt;&lt;span class="nb"&gt;_&lt;/span&gt;t(i) = P(O&lt;span class="nb"&gt;_&lt;/span&gt;1, O&lt;span class="nb"&gt;_&lt;/span&gt;2, &lt;span class="k"&gt;\cdots&lt;/span&gt; O&lt;span class="nb"&gt;_&lt;/span&gt;t, q&lt;span class="nb"&gt;_&lt;/span&gt;t= S&lt;span class="nb"&gt;_&lt;/span&gt;i &lt;span class="k"&gt;\lambda&lt;/span&gt;)

である。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インライン数式は &lt;span class="math"&gt;\(A_\text{c} = (\pi/4) d^2\)&lt;/span&gt; てな感じに書ける。&lt;/p&gt;
&lt;p&gt;ブロック数式の書き方は&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\alpha_t(i) = P(O_1, O_2, \cdots O_t, q_t= S_i \lambda)
\end{equation*}
&lt;/div&gt;
&lt;p&gt;である。&lt;/p&gt;
&lt;p&gt;どうやら，PelicanのreStructreudTextでは数式番号は使えないようである。
Sphinxの拡張では使えるだけに残念だ。&lt;/p&gt;
&lt;p&gt;ちなみに，SphinxやTinkererなら以下のようにして数式番号を付けられる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.. math:: e&lt;span class="nb"&gt;^{&lt;/span&gt;i&lt;span class="k"&gt;\pi&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt; + 1 = 0
   :label: euler

Euler&amp;#39;s identity, equation :eq:`euler`, was elected one of the most
beautiful mathematical formulas.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="markdown"&gt;
&lt;h2&gt;Markdownの記述方法&lt;/h2&gt;
&lt;p&gt;正しく導入できていれば，Markdownでは次のように &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt; の数式を書けるようになる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;インライン数式は&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;A_&lt;/span&gt;&lt;span class="nv"&gt;\text&lt;/span&gt;&lt;span class="nb"&gt;{c} &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;\pi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt; d^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;てな感じに書ける。

ブロック数式の書き方は

&lt;span class="sb"&gt;$$&lt;/span&gt;&lt;span class="nb"&gt; &lt;/span&gt;&lt;span class="nv"&gt;\alpha&lt;/span&gt;&lt;span class="nb"&gt;_t&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt; P&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;O_&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;, O_&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="nb"&gt;, &lt;/span&gt;&lt;span class="nv"&gt;\cdots&lt;/span&gt;&lt;span class="nb"&gt; O_t, q_t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt; S_i &lt;/span&gt;&lt;span class="nv"&gt;\lambda&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt; &lt;/span&gt;&lt;span class="s"&gt;$$&lt;/span&gt;

である。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかも，数式番号（とういうか:math:&lt;cite&gt;LaTeX&lt;/cite&gt; のマクロ）も使える&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;\LaTeX&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;のマクロは次のように書け，数式番号が使える！

&lt;span class="sb"&gt;$$&lt;/span&gt;&lt;span class="nb"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{equation}&lt;/span&gt;
&lt;span class="nb"&gt;    y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;x^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="nb"&gt; &lt;/span&gt;&lt;span class="nv"&gt;\label&lt;/span&gt;&lt;span class="nb"&gt;{eq&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{equation}&lt;/span&gt;
&lt;span class="s"&gt;$$&lt;/span&gt;

引用は式(&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;\ref&lt;/span&gt;&lt;span class="nb"&gt;{eq&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;)のようになる。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この記事自体はreSTで書かれているので，Markdownの場合のレンダリング結果は &lt;a class="reference external" href="using-mathjax-md.html"&gt;render_mathのMarkdownにおけるレンダリング結果&lt;/a&gt; を参照。&lt;/p&gt;
&lt;div class="section" id="url"&gt;
&lt;h3&gt;参考URL&lt;/h3&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;getpelican/pelican-plugins&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://github.com/barrysteyn/pelican_plugin-render_math"&gt;barrysteyn/pelican_plugin-render_math&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-MML-AM_CHTML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        fonts: [['STIX', 'TeX']]," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Software"></category><category term="Pelican"></category><category term="math"></category></entry></feed>